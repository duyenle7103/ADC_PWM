
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003010  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab34  0800ab34  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab34  0800ab34  0001ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab3c  0800ab3c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab3c  0800ab3c  0001ab3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab40  0800ab40  0001ab40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800ab44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000314  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015913  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e26  00000000  00000000  000359a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001450  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fa2  00000000  00000000  0003ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254d6  00000000  00000000  0003bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c6a1  00000000  00000000  00061098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc6af  00000000  00000000  0007d739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000053d4  00000000  00000000  00159de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0015f1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b0c 	.word	0x08007b0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08007b0c 	.word	0x08007b0c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b970 	b.w	8000d3c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	460d      	mov	r5, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	460f      	mov	r7, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4694      	mov	ip, r2
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0xe2>
 8000a8a:	fab2 f382 	clz	r3, r2
 8000a8e:	b143      	cbz	r3, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a94:	f1c3 0220 	rsb	r2, r3, #32
 8000a98:	409f      	lsls	r7, r3
 8000a9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a9e:	4317      	orrs	r7, r2
 8000aa0:	409c      	lsls	r4, r3
 8000aa2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aa6:	fa1f f58c 	uxth.w	r5, ip
 8000aaa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aae:	0c22      	lsrs	r2, r4, #16
 8000ab0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ab4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ab8:	fb01 f005 	mul.w	r0, r1, r5
 8000abc:	4290      	cmp	r0, r2
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ac8:	f080 811c 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000acc:	4290      	cmp	r0, r2
 8000ace:	f240 8119 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	4462      	add	r2, ip
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	b2a4      	uxth	r4, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae6:	fb00 f505 	mul.w	r5, r0, r5
 8000aea:	42a5      	cmp	r5, r4
 8000aec:	d90a      	bls.n	8000b04 <__udivmoddi4+0x90>
 8000aee:	eb1c 0404 	adds.w	r4, ip, r4
 8000af2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af6:	f080 8107 	bcs.w	8000d08 <__udivmoddi4+0x294>
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	f240 8104 	bls.w	8000d08 <__udivmoddi4+0x294>
 8000b00:	4464      	add	r4, ip
 8000b02:	3802      	subs	r0, #2
 8000b04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b08:	1b64      	subs	r4, r4, r5
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11e      	cbz	r6, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40dc      	lsrs	r4, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	e9c6 4300 	strd	r4, r3, [r6]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0xbc>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80ed 	beq.w	8000cfe <__udivmoddi4+0x28a>
 8000b24:	2100      	movs	r1, #0
 8000b26:	e9c6 0500 	strd	r0, r5, [r6]
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b30:	fab3 f183 	clz	r1, r3
 8000b34:	2900      	cmp	r1, #0
 8000b36:	d149      	bne.n	8000bcc <__udivmoddi4+0x158>
 8000b38:	42ab      	cmp	r3, r5
 8000b3a:	d302      	bcc.n	8000b42 <__udivmoddi4+0xce>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	f200 80f8 	bhi.w	8000d32 <__udivmoddi4+0x2be>
 8000b42:	1a84      	subs	r4, r0, r2
 8000b44:	eb65 0203 	sbc.w	r2, r5, r3
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4617      	mov	r7, r2
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d0e2      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	e9c6 4700 	strd	r4, r7, [r6]
 8000b54:	e7df      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b56:	b902      	cbnz	r2, 8000b5a <__udivmoddi4+0xe6>
 8000b58:	deff      	udf	#255	; 0xff
 8000b5a:	fab2 f382 	clz	r3, r2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8090 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b64:	1a8a      	subs	r2, r1, r2
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fa1f fe8c 	uxth.w	lr, ip
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b74:	fb07 2015 	mls	r0, r7, r5, r2
 8000b78:	0c22      	lsrs	r2, r4, #16
 8000b7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b7e:	fb0e f005 	mul.w	r0, lr, r5
 8000b82:	4290      	cmp	r0, r2
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b86:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4290      	cmp	r0, r2
 8000b92:	f200 80cb 	bhi.w	8000d2c <__udivmoddi4+0x2b8>
 8000b96:	4645      	mov	r5, r8
 8000b98:	1a12      	subs	r2, r2, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ba4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x14e>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb8:	d202      	bcs.n	8000bc0 <__udivmoddi4+0x14c>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f200 80bb 	bhi.w	8000d36 <__udivmoddi4+0x2c2>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	eba4 040e 	sub.w	r4, r4, lr
 8000bc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bca:	e79f      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bcc:	f1c1 0720 	rsb	r7, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bda:	fa05 f401 	lsl.w	r4, r5, r1
 8000bde:	fa20 f307 	lsr.w	r3, r0, r7
 8000be2:	40fd      	lsrs	r5, r7
 8000be4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be8:	4323      	orrs	r3, r4
 8000bea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bee:	fa1f fe8c 	uxth.w	lr, ip
 8000bf2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bf6:	0c1c      	lsrs	r4, r3, #16
 8000bf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bfc:	fb08 f50e 	mul.w	r5, r8, lr
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	fa00 f001 	lsl.w	r0, r0, r1
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c14:	f080 8088 	bcs.w	8000d28 <__udivmoddi4+0x2b4>
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	f240 8085 	bls.w	8000d28 <__udivmoddi4+0x2b4>
 8000c1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c22:	4464      	add	r4, ip
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	b29d      	uxth	r5, r3
 8000c28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c44:	d26c      	bcs.n	8000d20 <__udivmoddi4+0x2ac>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	d96a      	bls.n	8000d20 <__udivmoddi4+0x2ac>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	4464      	add	r4, ip
 8000c4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c52:	fba3 9502 	umull	r9, r5, r3, r2
 8000c56:	eba4 040e 	sub.w	r4, r4, lr
 8000c5a:	42ac      	cmp	r4, r5
 8000c5c:	46c8      	mov	r8, r9
 8000c5e:	46ae      	mov	lr, r5
 8000c60:	d356      	bcc.n	8000d10 <__udivmoddi4+0x29c>
 8000c62:	d053      	beq.n	8000d0c <__udivmoddi4+0x298>
 8000c64:	b156      	cbz	r6, 8000c7c <__udivmoddi4+0x208>
 8000c66:	ebb0 0208 	subs.w	r2, r0, r8
 8000c6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c72:	40ca      	lsrs	r2, r1
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	4317      	orrs	r7, r2
 8000c78:	e9c6 7400 	strd	r7, r4, [r6]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	f1c3 0120 	rsb	r1, r3, #32
 8000c88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c90:	fa25 f101 	lsr.w	r1, r5, r1
 8000c94:	409d      	lsls	r5, r3
 8000c96:	432a      	orrs	r2, r5
 8000c98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ca8:	0c11      	lsrs	r1, r2, #16
 8000caa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cae:	fb00 f50e 	mul.w	r5, r0, lr
 8000cb2:	428d      	cmp	r5, r1
 8000cb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x258>
 8000cba:	eb1c 0101 	adds.w	r1, ip, r1
 8000cbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc2:	d22f      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc4:	428d      	cmp	r5, r1
 8000cc6:	d92d      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	4461      	add	r1, ip
 8000ccc:	1b49      	subs	r1, r1, r5
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce0:	4291      	cmp	r1, r2
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x282>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cec:	d216      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000cee:	4291      	cmp	r1, r2
 8000cf0:	d914      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000cf2:	3d02      	subs	r5, #2
 8000cf4:	4462      	add	r2, ip
 8000cf6:	1a52      	subs	r2, r2, r1
 8000cf8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cfc:	e738      	b.n	8000b70 <__udivmoddi4+0xfc>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	4630      	mov	r0, r6
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000d04:	4639      	mov	r1, r7
 8000d06:	e6e6      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	e6fb      	b.n	8000b04 <__udivmoddi4+0x90>
 8000d0c:	4548      	cmp	r0, r9
 8000d0e:	d2a9      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d10:	ebb9 0802 	subs.w	r8, r9, r2
 8000d14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	e7a3      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1c:	4645      	mov	r5, r8
 8000d1e:	e7ea      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d20:	462b      	mov	r3, r5
 8000d22:	e794      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d24:	4640      	mov	r0, r8
 8000d26:	e7d1      	b.n	8000ccc <__udivmoddi4+0x258>
 8000d28:	46d0      	mov	r8, sl
 8000d2a:	e77b      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2c:	3d02      	subs	r5, #2
 8000d2e:	4462      	add	r2, ip
 8000d30:	e732      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d32:	4608      	mov	r0, r1
 8000d34:	e70a      	b.n	8000b4c <__udivmoddi4+0xd8>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e742      	b.n	8000bc2 <__udivmoddi4+0x14e>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d54:	4a3d      	ldr	r2, [pc, #244]	; (8000e4c <MX_ADC1_Init+0x10c>)
 8000d56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d64:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d6a:	4b37      	ldr	r3, [pc, #220]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d80:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <MX_ADC1_Init+0x110>)
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d84:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d8c:	2205      	movs	r2, #5
 8000d8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9e:	482a      	ldr	r0, [pc, #168]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000da0:	f002 fad4 	bl	800334c <HAL_ADC_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f001 fe6d 	bl	8002a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dae:	2308      	movs	r3, #8
 8000db0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4822      	ldr	r0, [pc, #136]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000dc0:	f002 fc36 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dca:	f001 fe5d 	bl	8002a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dce:	2309      	movs	r3, #9
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481b      	ldr	r0, [pc, #108]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000ddc:	f002 fc28 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000de6:	f001 fe4f 	bl	8002a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dea:	230a      	movs	r3, #10
 8000dec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000dee:	2303      	movs	r3, #3
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000df8:	f002 fc1a 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e02:	f001 fe41 	bl	8002a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e06:	230b      	movs	r3, #11
 8000e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000e14:	f002 fc0c 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e1e:	f001 fe33 	bl	8002a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e22:	230c      	movs	r3, #12
 8000e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e26:	2305      	movs	r3, #5
 8000e28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_ADC1_Init+0x108>)
 8000e30:	f002 fbfe 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e3a:	f001 fe25 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000003c 	.word	0x2000003c
 8000e4c:	40012000 	.word	0x40012000
 8000e50:	0f000001 	.word	0x0f000001

08000e54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a3c      	ldr	r2, [pc, #240]	; (8000f64 <HAL_ADC_MspInit+0x110>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d171      	bne.n	8000f5a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a3a      	ldr	r2, [pc, #232]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a33      	ldr	r2, [pc, #204]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a2c      	ldr	r2, [pc, #176]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_ADC_MspInit+0x114>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4823      	ldr	r0, [pc, #140]	; (8000f6c <HAL_ADC_MspInit+0x118>)
 8000ede:	f003 fac9 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <HAL_ADC_MspInit+0x11c>)
 8000ef6:	f003 fabd 	bl	8004474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000efc:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <HAL_ADC_MspInit+0x124>)
 8000efe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f40:	f002 ff28 	bl	8003d94 <HAL_DMA_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f4a:	f001 fd9d 	bl	8002a88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_ADC_MspInit+0x120>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012000 	.word	0x40012000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	20000084 	.word	0x20000084
 8000f78:	40026410 	.word	0x40026410

08000f7c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2108      	movs	r1, #8
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <button_init+0x14>)
 8000f86:	f003 fc11 	bl	80047ac <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <button_Scan>:

void button_Scan(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	482f      	ldr	r0, [pc, #188]	; (800105c <button_Scan+0xc8>)
 8000fa0:	f003 fc04 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	482c      	ldr	r0, [pc, #176]	; (800105c <button_Scan+0xc8>)
 8000faa:	f003 fbff 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000fae:	230a      	movs	r3, #10
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	492b      	ldr	r1, [pc, #172]	; (8001060 <button_Scan+0xcc>)
 8000fb4:	482b      	ldr	r0, [pc, #172]	; (8001064 <button_Scan+0xd0>)
 8000fb6:	f005 f84a 	bl	800604e <HAL_SPI_Receive>
	int button_index = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000; // 1000 0000 0000 0000
 8000fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc2:	817b      	strh	r3, [r7, #10]
	for(int i = 0; i < 16; i++){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	e03f      	b.n	800104a <button_Scan+0xb6>
		if(i >= 0 && i <= 3){
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db06      	blt.n	8000fde <button_Scan+0x4a>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	dc03      	bgt.n	8000fde <button_Scan+0x4a>
			button_index = i + 4; // Do theo schematic thì spi gửi ko giống như button trên mạch
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e018      	b.n	8001010 <button_Scan+0x7c>
		}else if(i >= 4 && i <= 7){ // -> Cần convert lại cho nó đúng với thứ tự mình muốn
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	dd07      	ble.n	8000ff4 <button_Scan+0x60>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	dc04      	bgt.n	8000ff4 <button_Scan+0x60>
			button_index = 7 - i;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f1c3 0307 	rsb	r3, r3, #7
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00d      	b.n	8001010 <button_Scan+0x7c>
		}else if(i >= 8 && i <= 11){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	dd06      	ble.n	8001008 <button_Scan+0x74>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0b      	cmp	r3, #11
 8000ffe:	dc03      	bgt.n	8001008 <button_Scan+0x74>
			button_index = i + 4;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3304      	adds	r3, #4
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	e003      	b.n	8001010 <button_Scan+0x7c>
		} else {
			button_index = 23 - i;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f1c3 0317 	rsb	r3, r3, #23
 800100e:	60fb      	str	r3, [r7, #12]
		}
		if(spi_button & mask){
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <button_Scan+0xcc>)
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	897b      	ldrh	r3, [r7, #10]
 8001016:	4013      	ands	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <button_Scan+0x96>
			button_count[button_index] = 0;
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <button_Scan+0xd4>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2100      	movs	r1, #0
 8001024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001028:	e009      	b.n	800103e <button_Scan+0xaa>
		}else{
			button_count[button_index]++;
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <button_Scan+0xd4>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001032:	3301      	adds	r3, #1
 8001034:	b299      	uxth	r1, r3
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <button_Scan+0xd4>)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		if(spi_button & mask){
//			button_count[i] = 0;
//		}else{
//			button_count[i]++;
//		}
		mask = mask >> 1;
 800103e:	897b      	ldrh	r3, [r7, #10]
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	817b      	strh	r3, [r7, #10]
	for(int i = 0; i < 16; i++){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3301      	adds	r3, #1
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	ddbc      	ble.n	8000fca <button_Scan+0x36>
	}
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020c00 	.word	0x40020c00
 8001060:	20000104 	.word	0x20000104
 8001064:	20000248 	.word	0x20000248
 8001068:	200000e4 	.word	0x200000e4

0800106c <isButtonUp>:

uint8_t isButtonUp(){
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	if(button_count[BTN_UP] == 1){
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <isButtonUp+0x1c>)
 8001072:	88db      	ldrh	r3, [r3, #6]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <isButtonUp+0x10>
        return 1;
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <isButtonUp+0x12>
	}else{
        return 0;
 800107c:	2300      	movs	r3, #0
	}
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200000e4 	.word	0x200000e4

0800108c <isButtonDown>:

uint8_t isButtonDown(){
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
    if(button_count[BTN_DOWN] == 1){
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <isButtonDown+0x1c>)
 8001092:	89db      	ldrh	r3, [r3, #14]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <isButtonDown+0x10>
        return 1;
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <isButtonDown+0x12>
    }else{
        return 0;
 800109c:	2300      	movs	r3, #0
    }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	200000e4 	.word	0x200000e4

080010ac <buzzer_init>:

uint8_t current_duty_cycle = 0;
uint8_t duty_cycle = 0;
uint8_t buzzer_status = 0;

void buzzer_init(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010b0:	2100      	movs	r1, #0
 80010b2:	4802      	ldr	r0, [pc, #8]	; (80010bc <buzzer_init+0x10>)
 80010b4:	f005 fd0c 	bl	8006ad0 <HAL_TIM_PWM_Start>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002e8 	.word	0x200002e8

080010c0 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <buzzer_SetVolume+0x28>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, duty_cycle);
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <buzzer_SetVolume+0x28>)
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <buzzer_SetVolume+0x2c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000107 	.word	0x20000107
 80010ec:	200002e8 	.word	0x200002e8

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_DMA_Init+0x3c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <MX_DMA_Init+0x3c>)
 8001100:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_DMA_Init+0x3c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2038      	movs	r0, #56	; 0x38
 8001118:	f002 fe05 	bl	8003d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800111c:	2038      	movs	r0, #56	; 0x38
 800111e:	f002 fe1e 	bl	8003d5e <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8001134:	201e      	movs	r0, #30
 8001136:	f002 f825 	bl	8003184 <DEC2BCD>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <ds3231_init+0x6c>)
 8001140:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001142:	2016      	movs	r0, #22
 8001144:	f002 f81e 	bl	8003184 <DEC2BCD>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <ds3231_init+0x6c>)
 800114e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001150:	2015      	movs	r0, #21
 8001152:	f002 f817 	bl	8003184 <DEC2BCD>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <ds3231_init+0x6c>)
 800115c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800115e:	2006      	movs	r0, #6
 8001160:	f002 f810 	bl	8003184 <DEC2BCD>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <ds3231_init+0x6c>)
 800116a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800116c:	200f      	movs	r0, #15
 800116e:	f002 f809 	bl	8003184 <DEC2BCD>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <ds3231_init+0x6c>)
 8001178:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800117a:	2009      	movs	r0, #9
 800117c:	f002 f802 	bl	8003184 <DEC2BCD>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <ds3231_init+0x6c>)
 8001186:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8001188:	2017      	movs	r0, #23
 800118a:	f001 fffb 	bl	8003184 <DEC2BCD>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b02      	ldr	r3, [pc, #8]	; (800119c <ds3231_init+0x6c>)
 8001194:	719a      	strb	r2, [r3, #6]
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000010c 	.word	0x2000010c

080011a0 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
}

void ds3231_ReadTime(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80011a6:	230a      	movs	r3, #10
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2307      	movs	r3, #7
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <ds3231_ReadTime+0xa4>)
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	2200      	movs	r2, #0
 80011b6:	21d0      	movs	r1, #208	; 0xd0
 80011b8:	4823      	ldr	r0, [pc, #140]	; (8001248 <ds3231_ReadTime+0xa8>)
 80011ba:	f003 fc55 	bl	8004a68 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <ds3231_ReadTime+0xa4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 ffc4 	bl	8003150 <BCD2DEC>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <ds3231_ReadTime+0xac>)
 80011ce:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <ds3231_ReadTime+0xa4>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 ffbb 	bl	8003150 <BCD2DEC>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <ds3231_ReadTime+0xb0>)
 80011e0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <ds3231_ReadTime+0xa4>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 ffb2 	bl	8003150 <BCD2DEC>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <ds3231_ReadTime+0xb4>)
 80011f2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <ds3231_ReadTime+0xa4>)
 80011f6:	78db      	ldrb	r3, [r3, #3]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 ffa9 	bl	8003150 <BCD2DEC>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <ds3231_ReadTime+0xb8>)
 8001204:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <ds3231_ReadTime+0xa4>)
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	f001 ffa0 	bl	8003150 <BCD2DEC>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <ds3231_ReadTime+0xbc>)
 8001216:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <ds3231_ReadTime+0xa4>)
 800121a:	795b      	ldrb	r3, [r3, #5]
 800121c:	4618      	mov	r0, r3
 800121e:	f001 ff97 	bl	8003150 <BCD2DEC>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <ds3231_ReadTime+0xc0>)
 8001228:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <ds3231_ReadTime+0xa4>)
 800122c:	799b      	ldrb	r3, [r3, #6]
 800122e:	4618      	mov	r0, r3
 8001230:	f001 ff8e 	bl	8003150 <BCD2DEC>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <ds3231_ReadTime+0xc4>)
 800123a:	701a      	strb	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000010c 	.word	0x2000010c
 8001248:	20000170 	.word	0x20000170
 800124c:	20000115 	.word	0x20000115
 8001250:	20000114 	.word	0x20000114
 8001254:	20000113 	.word	0x20000113
 8001258:	20000117 	.word	0x20000117
 800125c:	20000116 	.word	0x20000116
 8001260:	20000118 	.word	0x20000118
 8001264:	20000119 	.word	0x20000119

08001268 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_FSMC_Init+0xec>)
 8001296:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800129a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_FSMC_Init+0xec>)
 800129e:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <MX_FSMC_Init+0xf0>)
 80012a0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_FSMC_Init+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_FSMC_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_FSMC_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_FSMC_Init+0xec>)
 80012b6:	2210      	movs	r2, #16
 80012b8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_FSMC_Init+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_FSMC_Init+0xec>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_FSMC_Init+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_FSMC_Init+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_FSMC_Init+0xec>)
 80012d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_FSMC_Init+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_FSMC_Init+0xec>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_FSMC_Init+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_FSMC_Init+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_FSMC_Init+0xec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012fa:	230f      	movs	r3, #15
 80012fc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012fe:	230f      	movs	r3, #15
 8001300:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001302:	233c      	movs	r3, #60	; 0x3c
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800130a:	2310      	movs	r3, #16
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800130e:	2311      	movs	r3, #17
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001316:	2308      	movs	r3, #8
 8001318:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800131a:	230f      	movs	r3, #15
 800131c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800131e:	2309      	movs	r3, #9
 8001320:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800132a:	2311      	movs	r3, #17
 800132c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001332:	463a      	mov	r2, r7
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_FSMC_Init+0xec>)
 800133c:	f005 fa6a 	bl	8006814 <HAL_SRAM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001346:	f001 fb9f 	bl	8002a88 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	; 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000011c 	.word	0x2000011c
 8001358:	a0000104 	.word	0xa0000104

0800135c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_FSMC_MspInit+0x88>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d131      	bne.n	80013dc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_FSMC_MspInit+0x88>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_FSMC_MspInit+0x8c>)
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_FSMC_MspInit+0x8c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6393      	str	r3, [r2, #56]	; 0x38
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_FSMC_MspInit+0x8c>)
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800139a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800139e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013ac:	230c      	movs	r3, #12
 80013ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <HAL_FSMC_MspInit+0x90>)
 80013b6:	f003 f85d 	bl	8004474 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013ba:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80013be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013cc:	230c      	movs	r3, #12
 80013ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <HAL_FSMC_MspInit+0x94>)
 80013d6:	f003 f84d 	bl	8004474 <HAL_GPIO_Init>
 80013da:	e000      	b.n	80013de <HAL_FSMC_MspInit+0x82>
    return;
 80013dc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000016c 	.word	0x2000016c
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013fc:	f7ff ffae 	bl	800135c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a75      	ldr	r2, [pc, #468]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b73      	ldr	r3, [pc, #460]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a6e      	ldr	r2, [pc, #440]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <MX_GPIO_Init+0x1f4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b68      	ldr	r3, [pc, #416]	; (80015fc <MX_GPIO_Init+0x1f4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a67      	ldr	r2, [pc, #412]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a60      	ldr	r2, [pc, #384]	; (80015fc <MX_GPIO_Init+0x1f4>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b5e      	ldr	r3, [pc, #376]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a59      	ldr	r2, [pc, #356]	; (80015fc <MX_GPIO_Init+0x1f4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b53      	ldr	r3, [pc, #332]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a52      	ldr	r2, [pc, #328]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b45      	ldr	r3, [pc, #276]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a44      	ldr	r2, [pc, #272]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <MX_GPIO_Init+0x1f4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2170      	movs	r1, #112	; 0x70
 8001502:	483f      	ldr	r0, [pc, #252]	; (8001600 <MX_GPIO_Init+0x1f8>)
 8001504:	f003 f952 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150e:	483d      	ldr	r0, [pc, #244]	; (8001604 <MX_GPIO_Init+0x1fc>)
 8001510:	f003 f94c 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	483b      	ldr	r0, [pc, #236]	; (8001608 <MX_GPIO_Init+0x200>)
 800151a:	f003 f947 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001524:	4839      	ldr	r0, [pc, #228]	; (800160c <MX_GPIO_Init+0x204>)
 8001526:	f003 f941 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2108      	movs	r1, #8
 800152e:	4838      	ldr	r0, [pc, #224]	; (8001610 <MX_GPIO_Init+0x208>)
 8001530:	f003 f93c 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001534:	2370      	movs	r3, #112	; 0x70
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	482d      	ldr	r0, [pc, #180]	; (8001600 <MX_GPIO_Init+0x1f8>)
 800154c:	f002 ff92 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <MX_GPIO_Init+0x1fc>)
 800156a:	f002 ff83 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800156e:	23c0      	movs	r3, #192	; 0xc0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4822      	ldr	r0, [pc, #136]	; (800160c <MX_GPIO_Init+0x204>)
 8001582:	f002 ff77 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001586:	2330      	movs	r3, #48	; 0x30
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	481a      	ldr	r0, [pc, #104]	; (8001604 <MX_GPIO_Init+0x1fc>)
 800159a:	f002 ff6b 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800159e:	2340      	movs	r3, #64	; 0x40
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4814      	ldr	r0, [pc, #80]	; (8001608 <MX_GPIO_Init+0x200>)
 80015b6:	f002 ff5d 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <MX_GPIO_Init+0x204>)
 80015d4:	f002 ff4e 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015d8:	2308      	movs	r3, #8
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4808      	ldr	r0, [pc, #32]	; (8001610 <MX_GPIO_Init+0x208>)
 80015f0:	f002 ff40 	bl	8004474 <HAL_GPIO_Init>

}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	40021000 	.word	0x40021000
 8001604:	40020800 	.word	0x40020800
 8001608:	40021800 	.word	0x40021800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020c00 	.word	0x40020c00

08001614 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_I2C1_Init+0x50>)
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_I2C1_Init+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_I2C1_Init+0x50>)
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_I2C1_Init+0x58>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_I2C1_Init+0x50>)
 8001632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C1_Init+0x50>)
 8001652:	f003 f8c5 	bl	80047e0 <HAL_I2C_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800165c:	f001 fa14 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000170 	.word	0x20000170
 8001668:	40005400 	.word	0x40005400
 800166c:	000186a0 	.word	0x000186a0

08001670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_I2C_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016be:	2304      	movs	r3, #4
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <HAL_I2C_MspInit+0x8c>)
 80016ca:	f002 fed3 	bl	8004474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_I2C_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400

08001700 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <LCD_WR_REG+0x1c>)
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	8013      	strh	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	600ffffe 	.word	0x600ffffe

08001720 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <LCD_WR_DATA+0x1c>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	8053      	strh	r3, [r2, #2]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	600ffffe 	.word	0x600ffffe

08001740 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LCD_RD_DATA+0x20>)
 8001748:	885b      	ldrh	r3, [r3, #2]
 800174a:	b29b      	uxth	r3, r3
 800174c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	b29b      	uxth	r3, r3
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	600ffffe 	.word	0x600ffffe

08001764 <lcd_AddressSet>:

void lcd_AddressSet(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4604      	mov	r4, r0
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	4603      	mov	r3, r0
 8001778:	80bb      	strh	r3, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001782:	202a      	movs	r0, #42	; 0x2a
 8001784:	f7ff ffbc 	bl	8001700 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	b29b      	uxth	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ffc6 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffc0 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ffba 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ffb4 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017b8:	202b      	movs	r0, #43	; 0x2b
 80017ba:	f7ff ffa1 	bl	8001700 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017be:	88bb      	ldrh	r3, [r7, #4]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ffab 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ffa5 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017d6:	883b      	ldrh	r3, [r7, #0]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff9f 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017e2:	883b      	ldrh	r3, [r7, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff99 	bl	8001720 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017ee:	202c      	movs	r0, #44	; 0x2c
 80017f0:	f7ff ff86 	bl	8001700 <LCD_WR_REG>
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <lcd_Clear+0x60>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <lcd_Clear+0x60>)
 8001810:	885b      	ldrh	r3, [r3, #2]
 8001812:	3b01      	subs	r3, #1
 8001814:	b29b      	uxth	r3, r3
 8001816:	2100      	movs	r1, #0
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff ffa3 	bl	8001764 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800181e:	2300      	movs	r3, #0
 8001820:	81fb      	strh	r3, [r7, #14]
 8001822:	e011      	b.n	8001848 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001824:	2300      	movs	r3, #0
 8001826:	81bb      	strh	r3, [r7, #12]
 8001828:	e006      	b.n	8001838 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff77 	bl	8001720 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	81bb      	strh	r3, [r7, #12]
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <lcd_Clear+0x60>)
 800183a:	885b      	ldrh	r3, [r3, #2]
 800183c:	89ba      	ldrh	r2, [r7, #12]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3f3      	bcc.n	800182a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	3301      	adds	r3, #1
 8001846:	81fb      	strh	r3, [r7, #14]
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <lcd_Clear+0x60>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	89fa      	ldrh	r2, [r7, #14]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3e8      	bcc.n	8001824 <lcd_Clear+0x28>
		}
	}
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200001c4 	.word	0x200001c4

08001860 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x, uint16_t y, uint16_t color) // 1 điểm ảnh
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
 800186a:	460b      	mov	r3, r1
 800186c:	80bb      	strh	r3, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x, y, x, y);
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	88b9      	ldrh	r1, [r7, #4]
 8001878:	88f8      	ldrh	r0, [r7, #6]
 800187a:	f7ff ff73 	bl	8001764 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff4d 	bl	8001720 <LCD_WR_DATA>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) // Ve duong
{
 800188e:	b590      	push	{r4, r7, lr}
 8001890:	b08d      	sub	sp, #52	; 0x34
 8001892:	af00      	add	r7, sp, #0
 8001894:	4604      	mov	r4, r0
 8001896:	4608      	mov	r0, r1
 8001898:	4611      	mov	r1, r2
 800189a:	461a      	mov	r2, r3
 800189c:	4623      	mov	r3, r4
 800189e:	80fb      	strh	r3, [r7, #6]
 80018a0:	4603      	mov	r3, r0
 80018a2:	80bb      	strh	r3, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80018b4:	887a      	ldrh	r2, [r7, #2]
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80018bc:	883a      	ldrh	r2, [r7, #0]
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dd02      	ble.n	80018d8 <lcd_DrawLine+0x4a>
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e00b      	b.n	80018f0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <lcd_DrawLine+0x56>
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e005      	b.n	80018f0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	425b      	negs	r3, r3
 80018ee:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	dd02      	ble.n	80018fc <lcd_DrawLine+0x6e>
 80018f6:	2301      	movs	r3, #1
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	e00b      	b.n	8001914 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <lcd_DrawLine+0x7a>
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e005      	b.n	8001914 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	425b      	negs	r3, r3
 8001912:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001914:	6a3a      	ldr	r2, [r7, #32]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	429a      	cmp	r2, r3
 800191a:	dd02      	ble.n	8001922 <lcd_DrawLine+0x94>
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	e001      	b.n	8001926 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001926:	2300      	movs	r3, #0
 8001928:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800192a:	e02b      	b.n	8001984 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	b29b      	uxth	r3, r3
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	b291      	uxth	r1, r2
 8001934:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff91 	bl	8001860 <lcd_DrawPoint>
		xerr+=delta_x;
 800193e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	4413      	add	r3, r2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 800194e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	429a      	cmp	r2, r3
 8001954:	dd07      	ble.n	8001966 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	429a      	cmp	r2, r3
 800196c:	dd07      	ble.n	800197e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800196e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4413      	add	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 800197e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001980:	3301      	adds	r3, #1
 8001982:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001984:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	429a      	cmp	r2, r3
 800198a:	dacf      	bge.n	800192c <lcd_DrawLine+0x9e>
		}
	}
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3734      	adds	r7, #52	; 0x34
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
	...

08001998 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x, uint16_t y, uint8_t character, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode) // 1 ky tu size = 12 16 24 32, fc: mau chu, bc: mau nen, mode: hien nen
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	4604      	mov	r4, r0
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4623      	mov	r3, r4
 80019a8:	80fb      	strh	r3, [r7, #6]
 80019aa:	4603      	mov	r3, r0
 80019ac:	80bb      	strh	r3, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
 80019b2:	4613      	mov	r3, r2
 80019b4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80019be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	fb12 f303 	smulbb	r3, r2, r3
 80019ee:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	3b20      	subs	r3, #32
 80019f4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4413      	add	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29c      	uxth	r4, r3
 8001a04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	88b9      	ldrh	r1, [r7, #4]
 8001a16:	88f8      	ldrh	r0, [r7, #6]
 8001a18:	4622      	mov	r2, r4
 8001a1a:	f7ff fea3 	bl	8001764 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	827b      	strh	r3, [r7, #18]
 8001a22:	e07a      	b.n	8001b1a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001a24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d028      	beq.n	8001a7e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d108      	bne.n	8001a46 <lcd_ShowChar+0xae>
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	8a7b      	ldrh	r3, [r7, #18]
 8001a38:	493c      	ldr	r1, [pc, #240]	; (8001b2c <lcd_ShowChar+0x194>)
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	440a      	add	r2, r1
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	75fb      	strb	r3, [r7, #23]
 8001a44:	e01b      	b.n	8001a7e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001a46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a4a:	2b18      	cmp	r3, #24
 8001a4c:	d10b      	bne.n	8001a66 <lcd_ShowChar+0xce>
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	8a79      	ldrh	r1, [r7, #18]
 8001a52:	4837      	ldr	r0, [pc, #220]	; (8001b30 <lcd_ShowChar+0x198>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4403      	add	r3, r0
 8001a5e:	440b      	add	r3, r1
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e00b      	b.n	8001a7e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001a66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a6a:	2b20      	cmp	r3, #32
 8001a6c:	d15a      	bne.n	8001b24 <lcd_ShowChar+0x18c>
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	8a7b      	ldrh	r3, [r7, #18]
 8001a72:	4930      	ldr	r1, [pc, #192]	; (8001b34 <lcd_ShowChar+0x19c>)
 8001a74:	0192      	lsls	r2, r2, #6
 8001a76:	440a      	add	r2, r1
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75bb      	strb	r3, [r7, #22]
 8001a82:	e044      	b.n	8001b0e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d120      	bne.n	8001ace <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a8c:	7dfa      	ldrb	r2, [r7, #23]
 8001a8e:	7dbb      	ldrb	r3, [r7, #22]
 8001a90:	fa42 f303 	asr.w	r3, r2, r3
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <lcd_ShowChar+0x10e>
 8001a9c:	883b      	ldrh	r3, [r7, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fe3e 	bl	8001720 <LCD_WR_DATA>
 8001aa4:	e003      	b.n	8001aae <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001aa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fe39 	bl	8001720 <LCD_WR_DATA>
				m++;
 8001aae:	7d7b      	ldrb	r3, [r7, #21]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001ab4:	7d7b      	ldrb	r3, [r7, #21]
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001abc:	fb01 f202 	mul.w	r2, r1, r2
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11f      	bne.n	8001b08 <lcd_ShowChar+0x170>
				{
					m=0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	757b      	strb	r3, [r7, #21]
					break;
 8001acc:	e022      	b.n	8001b14 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001ace:	7dfa      	ldrb	r2, [r7, #23]
 8001ad0:	7dbb      	ldrb	r3, [r7, #22]
 8001ad2:	fa42 f303 	asr.w	r3, r2, r3
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <lcd_ShowChar+0x152>
 8001ade:	883a      	ldrh	r2, [r7, #0]
 8001ae0:	88b9      	ldrh	r1, [r7, #4]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff febb 	bl	8001860 <lcd_DrawPoint>
				x++;
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	3301      	adds	r3, #1
 8001aee:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	8a3b      	ldrh	r3, [r7, #16]
 8001af4:	1ad2      	subs	r2, r2, r3
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d105      	bne.n	8001b08 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001afc:	8a3b      	ldrh	r3, [r7, #16]
 8001afe:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	80bb      	strh	r3, [r7, #4]
					break;
 8001b06:	e005      	b.n	8001b14 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001b08:	7dbb      	ldrb	r3, [r7, #22]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	75bb      	strb	r3, [r7, #22]
 8001b0e:	7dbb      	ldrb	r3, [r7, #22]
 8001b10:	2b07      	cmp	r3, #7
 8001b12:	d9b7      	bls.n	8001a84 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001b14:	8a7b      	ldrh	r3, [r7, #18]
 8001b16:	3301      	adds	r3, #1
 8001b18:	827b      	strh	r3, [r7, #18]
 8001b1a:	8a7a      	ldrh	r2, [r7, #18]
 8001b1c:	89bb      	ldrh	r3, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d380      	bcc.n	8001a24 <lcd_ShowChar+0x8c>
 8001b22:	e000      	b.n	8001b26 <lcd_ShowChar+0x18e>
		else return;
 8001b24:	bf00      	nop
				}
			}
		}
	}
}
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	08007b94 	.word	0x08007b94
 8001b30:	08008184 	.word	0x08008184
 8001b34:	08009354 	.word	0x08009354

08001b38 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001b4c:	e004      	b.n	8001b58 <mypow+0x20>
 8001b4e:	79fa      	ldrb	r2, [r7, #7]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	71ba      	strb	r2, [r7, #6]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f5      	bne.n	8001b4e <mypow+0x16>
	return result;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x, uint16_t y, uint16_t num, uint8_t len, uint16_t fc, uint16_t bc, uint8_t sizey) //len: do dai cua so
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	80fb      	strh	r3, [r7, #6]
 8001b82:	4603      	mov	r3, r0
 8001b84:	80bb      	strh	r3, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001b92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b96:	085b      	lsrs	r3, r3, #1
 8001b98:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e059      	b.n	8001c54 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001ba0:	887c      	ldrh	r4, [r7, #2]
 8001ba2:	787a      	ldrb	r2, [r7, #1]
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	4619      	mov	r1, r3
 8001bb0:	200a      	movs	r0, #10
 8001bb2:	f7ff ffc1 	bl	8001b38 <mypow>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	fbb4 f1f3 	udiv	r1, r4, r3
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <lcd_ShowIntNum+0xf8>)
 8001bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	1aca      	subs	r2, r1, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d121      	bne.n	8001c1c <lcd_ShowIntNum+0xac>
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	787b      	ldrb	r3, [r7, #1]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	429a      	cmp	r2, r3
 8001be0:	da1c      	bge.n	8001c1c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001be2:	7b3b      	ldrb	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d117      	bne.n	8001c18 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	7b7b      	ldrb	r3, [r7, #13]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	fb12 f303 	smulbb	r3, r2, r3
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b298      	uxth	r0, r3
 8001bfc:	8c3a      	ldrh	r2, [r7, #32]
 8001bfe:	88b9      	ldrh	r1, [r7, #4]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	2220      	movs	r2, #32
 8001c12:	f7ff fec1 	bl	8001998 <lcd_ShowChar>
				continue;
 8001c16:	e01a      	b.n	8001c4e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	fb12 f303 	smulbb	r3, r2, r3
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b298      	uxth	r0, r3
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	3330      	adds	r3, #48	; 0x30
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	8c3c      	ldrh	r4, [r7, #32]
 8001c38:	88b9      	ldrh	r1, [r7, #4]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4623      	mov	r3, r4
 8001c4a:	f7ff fea5 	bl	8001998 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	3301      	adds	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	787b      	ldrb	r3, [r7, #1]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d3a1      	bcc.n	8001ba0 <lcd_ShowIntNum+0x30>
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	cccccccd 	.word	0xcccccccd

08001c6c <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x, uint16_t y, float num, uint8_t len, uint16_t fc, uint16_t bc, uint8_t sizey)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b08b      	sub	sp, #44	; 0x2c
 8001c70:	af04      	add	r7, sp, #16
 8001c72:	4604      	mov	r4, r0
 8001c74:	4608      	mov	r0, r1
 8001c76:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	81fb      	strh	r3, [r7, #14]
 8001c82:	4603      	mov	r3, r0
 8001c84:	81bb      	strh	r3, [r7, #12]
 8001c86:	460b      	mov	r3, r1
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001c8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c9a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001d74 <lcd_ShowFloatNum+0x108>
 8001c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca6:	ee17 3a90 	vmov	r3, s15
 8001caa:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	75fb      	strb	r3, [r7, #23]
 8001cb0:	e057      	b.n	8001d62 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001cb2:	8abc      	ldrh	r4, [r7, #20]
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	200a      	movs	r0, #10
 8001cc4:	f7ff ff38 	bl	8001b38 <mypow>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	fbb4 f1f3 	udiv	r1, r4, r3
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <lcd_ShowFloatNum+0x10c>)
 8001cd0:	fba3 2301 	umull	r2, r3, r3, r1
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	1aca      	subs	r2, r1, r3
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001ce4:	7dfa      	ldrb	r2, [r7, #23]
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	3b02      	subs	r3, #2
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11d      	bne.n	8001d2a <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	3b02      	subs	r3, #2
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	7dbb      	ldrb	r3, [r7, #22]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	fb12 f303 	smulbb	r3, r2, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	4413      	add	r3, r2
 8001d02:	b298      	uxth	r0, r3
 8001d04:	88ba      	ldrh	r2, [r7, #4]
 8001d06:	89b9      	ldrh	r1, [r7, #12]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	222e      	movs	r2, #46	; 0x2e
 8001d1a:	f7ff fe3d 	bl	8001998 <lcd_ShowChar>
			t++;
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	3301      	adds	r3, #1
 8001d22:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	3301      	adds	r3, #1
 8001d28:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	7dbb      	ldrb	r3, [r7, #22]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	fb12 f303 	smulbb	r3, r2, r3
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	7cfb      	ldrb	r3, [r7, #19]
 8001d40:	3330      	adds	r3, #48	; 0x30
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	88bc      	ldrh	r4, [r7, #4]
 8001d46:	89b9      	ldrh	r1, [r7, #12]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	4623      	mov	r3, r4
 8001d58:	f7ff fe1e 	bl	8001998 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
 8001d62:	7dfa      	ldrb	r2, [r7, #23]
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d3a3      	bcc.n	8001cb2 <lcd_ShowFloatNum+0x46>
	}
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}
 8001d74:	42c80000 	.word	0x42c80000
 8001d78:	cccccccd 	.word	0xcccccccd

08001d7c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) // Chinh huong man hinh
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <lcd_SetDir+0x44>)
 8001d98:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d9c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <lcd_SetDir+0x44>)
 8001da0:	22f0      	movs	r2, #240	; 0xf0
 8001da2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001da4:	e006      	b.n	8001db4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <lcd_SetDir+0x44>)
 8001da8:	22f0      	movs	r2, #240	; 0xf0
 8001daa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <lcd_SetDir+0x44>)
 8001dae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001db2:	805a      	strh	r2, [r3, #2]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	200001c4 	.word	0x200001c4

08001dc4 <lcd_init>:


void lcd_init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dce:	48aa      	ldr	r0, [pc, #680]	; (8002078 <lcd_init+0x2b4>)
 8001dd0:	f002 fcec 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dd8:	f001 fa94 	bl	8003304 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de2:	48a5      	ldr	r0, [pc, #660]	; (8002078 <lcd_init+0x2b4>)
 8001de4:	f002 fce2 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001de8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dec:	f001 fa8a 	bl	8003304 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffc3 	bl	8001d7c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001df6:	20d3      	movs	r0, #211	; 0xd3
 8001df8:	f7ff fc82 	bl	8001700 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001dfc:	f7ff fca0 	bl	8001740 <LCD_RD_DATA>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b9d      	ldr	r3, [pc, #628]	; (800207c <lcd_init+0x2b8>)
 8001e06:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001e08:	f7ff fc9a 	bl	8001740 <LCD_RD_DATA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <lcd_init+0x2b8>)
 8001e12:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001e14:	f7ff fc94 	bl	8001740 <LCD_RD_DATA>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b97      	ldr	r3, [pc, #604]	; (800207c <lcd_init+0x2b8>)
 8001e1e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001e20:	4b96      	ldr	r3, [pc, #600]	; (800207c <lcd_init+0x2b8>)
 8001e22:	889b      	ldrh	r3, [r3, #4]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b94      	ldr	r3, [pc, #592]	; (800207c <lcd_init+0x2b8>)
 8001e2a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001e2c:	f7ff fc88 	bl	8001740 <LCD_RD_DATA>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b91      	ldr	r3, [pc, #580]	; (800207c <lcd_init+0x2b8>)
 8001e36:	889b      	ldrh	r3, [r3, #4]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	; (800207c <lcd_init+0x2b8>)
 8001e3e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001e40:	20cf      	movs	r0, #207	; 0xcf
 8001e42:	f7ff fc5d 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fc6a 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001e4c:	20c1      	movs	r0, #193	; 0xc1
 8001e4e:	f7ff fc67 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001e52:	2030      	movs	r0, #48	; 0x30
 8001e54:	f7ff fc64 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001e58:	20ed      	movs	r0, #237	; 0xed
 8001e5a:	f7ff fc51 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001e5e:	2064      	movs	r0, #100	; 0x64
 8001e60:	f7ff fc5e 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f7ff fc5b 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001e6a:	2012      	movs	r0, #18
 8001e6c:	f7ff fc58 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001e70:	2081      	movs	r0, #129	; 0x81
 8001e72:	f7ff fc55 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001e76:	20e8      	movs	r0, #232	; 0xe8
 8001e78:	f7ff fc42 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001e7c:	2085      	movs	r0, #133	; 0x85
 8001e7e:	f7ff fc4f 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e82:	2010      	movs	r0, #16
 8001e84:	f7ff fc4c 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001e88:	207a      	movs	r0, #122	; 0x7a
 8001e8a:	f7ff fc49 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001e8e:	20cb      	movs	r0, #203	; 0xcb
 8001e90:	f7ff fc36 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001e94:	2039      	movs	r0, #57	; 0x39
 8001e96:	f7ff fc43 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	f7ff fc40 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fc3d 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001ea6:	2034      	movs	r0, #52	; 0x34
 8001ea8:	f7ff fc3a 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001eac:	2002      	movs	r0, #2
 8001eae:	f7ff fc37 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001eb2:	20f7      	movs	r0, #247	; 0xf7
 8001eb4:	f7ff fc24 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001eb8:	2020      	movs	r0, #32
 8001eba:	f7ff fc31 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001ebe:	20ea      	movs	r0, #234	; 0xea
 8001ec0:	f7ff fc1e 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fc2b 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fc28 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001ed0:	20c0      	movs	r0, #192	; 0xc0
 8001ed2:	f7ff fc15 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ed6:	201b      	movs	r0, #27
 8001ed8:	f7ff fc22 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001edc:	20c1      	movs	r0, #193	; 0xc1
 8001ede:	f7ff fc0f 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7ff fc1c 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001ee8:	20c5      	movs	r0, #197	; 0xc5
 8001eea:	f7ff fc09 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001eee:	2030      	movs	r0, #48	; 0x30
 8001ef0:	f7ff fc16 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001ef4:	2030      	movs	r0, #48	; 0x30
 8001ef6:	f7ff fc13 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001efa:	20c7      	movs	r0, #199	; 0xc7
 8001efc:	f7ff fc00 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001f00:	20b7      	movs	r0, #183	; 0xb7
 8001f02:	f7ff fc0d 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001f06:	2036      	movs	r0, #54	; 0x36
 8001f08:	f7ff fbfa 	bl	8001700 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001f0c:	2008      	movs	r0, #8
 8001f0e:	f7ff fc07 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001f12:	203a      	movs	r0, #58	; 0x3a
 8001f14:	f7ff fbf4 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001f18:	2055      	movs	r0, #85	; 0x55
 8001f1a:	f7ff fc01 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001f1e:	20b1      	movs	r0, #177	; 0xb1
 8001f20:	f7ff fbee 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fbfb 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001f2a:	201a      	movs	r0, #26
 8001f2c:	f7ff fbf8 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001f30:	20b6      	movs	r0, #182	; 0xb6
 8001f32:	f7ff fbe5 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001f36:	200a      	movs	r0, #10
 8001f38:	f7ff fbf2 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001f3c:	20a2      	movs	r0, #162	; 0xa2
 8001f3e:	f7ff fbef 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001f42:	20f2      	movs	r0, #242	; 0xf2
 8001f44:	f7ff fbdc 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fbe9 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001f4e:	2026      	movs	r0, #38	; 0x26
 8001f50:	f7ff fbd6 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff fbe3 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001f5a:	20e0      	movs	r0, #224	; 0xe0
 8001f5c:	f7ff fbd0 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001f60:	200f      	movs	r0, #15
 8001f62:	f7ff fbdd 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001f66:	202a      	movs	r0, #42	; 0x2a
 8001f68:	f7ff fbda 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001f6c:	2028      	movs	r0, #40	; 0x28
 8001f6e:	f7ff fbd7 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f72:	2008      	movs	r0, #8
 8001f74:	f7ff fbd4 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001f78:	200e      	movs	r0, #14
 8001f7a:	f7ff fbd1 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f7e:	2008      	movs	r0, #8
 8001f80:	f7ff fbce 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001f84:	2054      	movs	r0, #84	; 0x54
 8001f86:	f7ff fbcb 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001f8a:	20a9      	movs	r0, #169	; 0xa9
 8001f8c:	f7ff fbc8 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001f90:	2043      	movs	r0, #67	; 0x43
 8001f92:	f7ff fbc5 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001f96:	200a      	movs	r0, #10
 8001f98:	f7ff fbc2 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f9c:	200f      	movs	r0, #15
 8001f9e:	f7ff fbbf 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fbbc 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff fbb9 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff fbb6 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff fbb3 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001fba:	20e1      	movs	r0, #225	; 0xe1
 8001fbc:	f7ff fba0 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff fbad 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001fc6:	2015      	movs	r0, #21
 8001fc8:	f7ff fbaa 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001fcc:	2017      	movs	r0, #23
 8001fce:	f7ff fba7 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f7ff fba4 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001fd8:	2011      	movs	r0, #17
 8001fda:	f7ff fba1 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001fde:	2006      	movs	r0, #6
 8001fe0:	f7ff fb9e 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001fe4:	202b      	movs	r0, #43	; 0x2b
 8001fe6:	f7ff fb9b 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001fea:	2056      	movs	r0, #86	; 0x56
 8001fec:	f7ff fb98 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ff0:	203c      	movs	r0, #60	; 0x3c
 8001ff2:	f7ff fb95 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ff6:	2005      	movs	r0, #5
 8001ff8:	f7ff fb92 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f7ff fb8f 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002002:	200f      	movs	r0, #15
 8002004:	f7ff fb8c 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002008:	203f      	movs	r0, #63	; 0x3f
 800200a:	f7ff fb89 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800200e:	203f      	movs	r0, #63	; 0x3f
 8002010:	f7ff fb86 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002014:	200f      	movs	r0, #15
 8002016:	f7ff fb83 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800201a:	202b      	movs	r0, #43	; 0x2b
 800201c:	f7ff fb70 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fb7d 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fb7a 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff fb77 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002032:	203f      	movs	r0, #63	; 0x3f
 8002034:	f7ff fb74 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002038:	202a      	movs	r0, #42	; 0x2a
 800203a:	f7ff fb61 	bl	8001700 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fb6e 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff fb6b 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f7ff fb68 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002050:	20ef      	movs	r0, #239	; 0xef
 8002052:	f7ff fb65 	bl	8001720 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002056:	2011      	movs	r0, #17
 8002058:	f7ff fb52 	bl	8001700 <LCD_WR_REG>
	HAL_Delay(120);
 800205c:	2078      	movs	r0, #120	; 0x78
 800205e:	f001 f951 	bl	8003304 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002062:	2029      	movs	r0, #41	; 0x29
 8002064:	f7ff fb4c 	bl	8001700 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206e:	4804      	ldr	r0, [pc, #16]	; (8002080 <lcd_init+0x2bc>)
 8002070:	f002 fb9c 	bl	80047ac <HAL_GPIO_WritePin>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020800 	.word	0x40020800
 800207c:	200001c4 	.word	0x200001c4
 8002080:	40020000 	.word	0x40020000

08002084 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08b      	sub	sp, #44	; 0x2c
 8002088:	af04      	add	r7, sp, #16
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	461a      	mov	r2, r3
 800208e:	4603      	mov	r3, r0
 8002090:	81fb      	strh	r3, [r7, #14]
 8002092:	460b      	mov	r3, r1
 8002094:	81bb      	strh	r3, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80020a2:	e048      	b.n	8002136 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d145      	bne.n	8002136 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80020aa:	89fa      	ldrh	r2, [r7, #14]
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <lcd_ShowStr+0xc4>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	429a      	cmp	r2, r3
 80020be:	dc3f      	bgt.n	8002140 <lcd_ShowStr+0xbc>
 80020c0:	89ba      	ldrh	r2, [r7, #12]
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <lcd_ShowStr+0xc4>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	4619      	mov	r1, r3
 80020c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020cc:	1acb      	subs	r3, r1, r3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dc36      	bgt.n	8002140 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b80      	cmp	r3, #128	; 0x80
 80020d8:	d902      	bls.n	80020e0 <lcd_ShowStr+0x5c>
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
 80020de:	e02a      	b.n	8002136 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b0d      	cmp	r3, #13
 80020e6:	d10b      	bne.n	8002100 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80020e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80020f4:	8abb      	ldrh	r3, [r7, #20]
 80020f6:	81fb      	strh	r3, [r7, #14]
					str++;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	e017      	b.n	8002130 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	88fc      	ldrh	r4, [r7, #6]
 8002106:	89b9      	ldrh	r1, [r7, #12]
 8002108:	89f8      	ldrh	r0, [r7, #14]
 800210a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	4623      	mov	r3, r4
 800211c:	f7ff fc3c 	bl	8001998 <lcd_ShowChar>
					x+=sizey/2;
 8002120:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	b29a      	uxth	r2, r3
 800212a:	89fb      	ldrh	r3, [r7, #14]
 800212c:	4413      	add	r3, r2
 800212e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1b2      	bne.n	80020a4 <lcd_ShowStr+0x20>
 800213e:	e000      	b.n	8002142 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002140:	bf00      	nop
			}
		}
	}
}
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	200001c4 	.word	0x200001c4

0800214c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09}; // 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002150:	2201      	movs	r2, #1
 8002152:	2140      	movs	r1, #64	; 0x40
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <led7_init+0x14>)
 8002156:	f002 fb29 	bl	80047ac <HAL_GPIO_WritePin>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021800 	.word	0x40021800

08002164 <led7_Scan>:

void led7_Scan(){
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002168:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <led7_Scan+0x104>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <led7_Scan+0x104>)
 8002172:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002174:	4b3d      	ldr	r3, [pc, #244]	; (800226c <led7_Scan+0x108>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <led7_Scan+0x10c>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <led7_Scan+0x104>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21b      	sxth	r3, r3
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <led7_Scan+0x104>)
 800218e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <led7_Scan+0x108>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d847      	bhi.n	8002228 <led7_Scan+0xc4>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <led7_Scan+0x3c>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021cf 	.word	0x080021cf
 80021a8:	080021ed 	.word	0x080021ed
 80021ac:	0800220b 	.word	0x0800220b
	case 0:
		spi_buffer |= 0x00b0;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <led7_Scan+0x104>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <led7_Scan+0x104>)
 80021bc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf; //1011
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <led7_Scan+0x104>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <led7_Scan+0x104>)
 80021ca:	801a      	strh	r2, [r3, #0]
		break;
 80021cc:	e02d      	b.n	800222a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <led7_Scan+0x104>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <led7_Scan+0x104>)
 80021da:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf; //1101
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <led7_Scan+0x104>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	f023 0320 	bic.w	r3, r3, #32
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <led7_Scan+0x104>)
 80021e8:	801a      	strh	r2, [r3, #0]
		break;
 80021ea:	e01e      	b.n	800222a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <led7_Scan+0x104>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <led7_Scan+0x104>)
 80021f8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef; //1110
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <led7_Scan+0x104>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	f023 0310 	bic.w	r3, r3, #16
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <led7_Scan+0x104>)
 8002206:	801a      	strh	r2, [r3, #0]
		break;
 8002208:	e00f      	b.n	800222a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <led7_Scan+0x104>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <led7_Scan+0x104>)
 8002216:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f; //0111
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <led7_Scan+0x104>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002220:	b29a      	uxth	r2, r3
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <led7_Scan+0x104>)
 8002224:	801a      	strh	r2, [r3, #0]
		break;
 8002226:	e000      	b.n	800222a <led7_Scan+0xc6>
	default:
		break;
 8002228:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <led7_Scan+0x108>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	425a      	negs	r2, r3
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	f002 0203 	and.w	r2, r2, #3
 800223a:	bf58      	it	pl
 800223c:	4253      	negpl	r3, r2
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <led7_Scan+0x108>)
 8002240:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2140      	movs	r1, #64	; 0x40
 8002246:	480b      	ldr	r0, [pc, #44]	; (8002274 <led7_Scan+0x110>)
 8002248:	f002 fab0 	bl	80047ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800224c:	2301      	movs	r3, #1
 800224e:	2202      	movs	r2, #2
 8002250:	4905      	ldr	r1, [pc, #20]	; (8002268 <led7_Scan+0x104>)
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <led7_Scan+0x114>)
 8002254:	f003 fdbf 	bl	8005dd6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002258:	2201      	movs	r2, #1
 800225a:	2140      	movs	r1, #64	; 0x40
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <led7_Scan+0x110>)
 800225e:	f002 faa5 	bl	80047ac <HAL_GPIO_WritePin>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000000e 	.word	0x2000000e
 800226c:	200001cc 	.word	0x200001cc
 8002270:	20000000 	.word	0x20000000
 8002274:	40021800 	.word	0x40021800
 8002278:	20000248 	.word	0x20000248

0800227c <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	db0e      	blt.n	80022ae <led7_SetDigit+0x32>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b09      	cmp	r3, #9
 8002294:	dc0b      	bgt.n	80022ae <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <led7_SetDigit+0x40>)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	b2d9      	uxtb	r1, r3
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <led7_SetDigit+0x44>)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	460a      	mov	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
	}
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000004 	.word	0x20000004
 80022c0:	20000000 	.word	0x20000000

080022c4 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <led7_SetColon+0x20>
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <led7_SetColon+0x3c>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f023 0308 	bic.w	r3, r3, #8
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <led7_SetColon+0x3c>)
 80022e0:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80022e2:	e006      	b.n	80022f2 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <led7_SetColon+0x3c>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <led7_SetColon+0x3c>)
 80022f0:	801a      	strh	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000000e 	.word	0x2000000e
 8002304:	00000000 	.word	0x00000000

08002308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800230e:	f000 ff87 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002312:	f000 f8bd 	bl	8002490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002316:	f7ff f877 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 800231a:	f7fe fee9 	bl	80010f0 <MX_DMA_Init>
  MX_SPI1_Init();
 800231e:	f000 fd11 	bl	8002d44 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002322:	f7fe ffa1 	bl	8001268 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002326:	f7ff f975 	bl	8001614 <MX_I2C1_Init>
  MX_TIM13_Init();
 800232a:	f000 fe4d 	bl	8002fc8 <MX_TIM13_Init>
  MX_TIM2_Init();
 800232e:	f000 fdff 	bl	8002f30 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002332:	f7fe fd05 	bl	8000d40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002336:	f000 f937 	bl	80025a8 <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_timer[LED7SEG_TIMER] == 1){
 800233a:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <main+0x170>)
 800233c:	885b      	ldrh	r3, [r3, #2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d111      	bne.n	8002366 <main+0x5e>
		  setTimer(LED7SEG_PERIOD, LED7SEG_TIMER);
 8002342:	2101      	movs	r1, #1
 8002344:	2005      	movs	r0, #5
 8002346:	f000 fc9b 	bl	8002c80 <setTimer>
		  led7_Scan();
 800234a:	f7ff ff0b 	bl	8002164 <led7_Scan>
		  led7_SetColon(colon_status = 1 - colon_status);
 800234e:	4b4b      	ldr	r3, [pc, #300]	; (800247c <main+0x174>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f1c3 0301 	rsb	r3, r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b48      	ldr	r3, [pc, #288]	; (800247c <main+0x174>)
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <main+0x174>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ffaf 	bl	80022c4 <led7_SetColon>
	  }
	  if(flag_timer[LCD_TIMER] == 1){
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <main+0x170>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d109      	bne.n	8002382 <main+0x7a>
		  setTimer(LCD_PERIOD, LCD_TIMER);
 800236e:	2100      	movs	r1, #0
 8002370:	2005      	movs	r0, #5
 8002372:	f000 fc85 	bl	8002c80 <setTimer>
		  button_Update();
 8002376:	f000 f943 	bl	8002600 <button_Update>
		  adc_Display();
 800237a:	f000 f979 	bl	8002670 <adc_Display>
		  diagram_display();
 800237e:	f000 fb25 	bl	80029cc <diagram_display>
	  }
	  if(flag_timer[UPDATE_TIMER] == 1){
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <main+0x170>)
 8002384:	889b      	ldrh	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <main+0x94>
		  setTimer(UPDATE_PERIOD, UPDATE_TIMER);
 800238a:	2102      	movs	r1, #2
 800238c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002390:	f000 fc76 	bl	8002c80 <setTimer>
		  led7_Update();
 8002394:	f000 fa5a 	bl	800284c <led7_Update>
		  adc_Update();
 8002398:	f000 fa9e 	bl	80028d8 <adc_Update>
	  }
	  if(flag_timer[BUZZER_TIMER] == 1){
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <main+0x170>)
 800239e:	88db      	ldrh	r3, [r3, #6]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d118      	bne.n	80023d6 <main+0xce>
		  setTimer(BUZZER_PERIOD, BUZZER_TIMER);
 80023a4:	2103      	movs	r1, #3
 80023a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023aa:	f000 fc69 	bl	8002c80 <setTimer>
		  if(Humidity > 70){
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <main+0x178>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	2b46      	cmp	r3, #70	; 0x46
 80023b4:	d90c      	bls.n	80023d0 <main+0xc8>
			  buzzer_Sound(buzzer_status = 1 - buzzer_status);
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <main+0x17c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f1c3 0301 	rsb	r3, r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <main+0x17c>)
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <main+0x17c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fae7 	bl	800299c <buzzer_Sound>
 80023ce:	e002      	b.n	80023d6 <main+0xce>
		  }else{
			  buzzer_Sound(0);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f000 fae3 	bl	800299c <buzzer_Sound>
		  }
	  }
	  if(flag_timer[DIAGRAM_TIMER] == 1){
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <main+0x170>)
 80023d8:	891b      	ldrh	r3, [r3, #8]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d1ad      	bne.n	800233a <main+0x32>
		  setTimer(DIAGRAM_PERIOD, DIAGRAM_TIMER);
 80023de:	2104      	movs	r1, #4
 80023e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e4:	f000 fc4c 	bl	8002c80 <setTimer>
		  lcd_Clear(WHITE);
 80023e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023ec:	f7ff fa06 	bl	80017fc <lcd_Clear>
		  for(int i = 18; i > 0; i--){
 80023f0:	2312      	movs	r3, #18
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	e019      	b.n	800242a <main+0x122>
			  Point[i][0] = Point[i - 1][0] + 10;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	4a23      	ldr	r2, [pc, #140]	; (8002488 <main+0x180>)
 80023fc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002400:	330a      	adds	r3, #10
 8002402:	b299      	uxth	r1, r3
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <main+0x180>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			  Point[i][1] = Point[i - 1][1];
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <main+0x180>)
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	8859      	ldrh	r1, [r3, #2]
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <main+0x180>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	460a      	mov	r2, r1
 8002422:	805a      	strh	r2, [r3, #2]
		  for(int i = 18; i > 0; i--){
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	dce2      	bgt.n	80023f6 <main+0xee>
		  }
		  Point[0][0] = 10;
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <main+0x180>)
 8002432:	220a      	movs	r2, #10
 8002434:	801a      	strh	r2, [r3, #0]
		  Point[0][1] = 300 - Power/2.0;
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <main+0x184>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f828 	bl	8000490 <__aeabi_f2d>
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002448:	f7fe f9a4 	bl	8000794 <__aeabi_ddiv>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	a107      	add	r1, pc, #28	; (adr r1, 8002470 <main+0x168>)
 8002452:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002456:	f7fd febb 	bl	80001d0 <__aeabi_dsub>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fa7f 	bl	8000964 <__aeabi_d2uiz>
 8002466:	4603      	mov	r3, r0
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <main+0x180>)
 800246c:	805a      	strh	r2, [r3, #2]
	  if(flag_timer[LED7SEG_TIMER] == 1){
 800246e:	e764      	b.n	800233a <main+0x32>
 8002470:	00000000 	.word	0x00000000
 8002474:	4072c000 	.word	0x4072c000
 8002478:	20000230 	.word	0x20000230
 800247c:	200001ca 	.word	0x200001ca
 8002480:	2000022e 	.word	0x2000022e
 8002484:	20000108 	.word	0x20000108
 8002488:	200001d0 	.word	0x200001d0
 800248c:	20000228 	.word	0x20000228

08002490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b094      	sub	sp, #80	; 0x50
 8002494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	2230      	movs	r2, #48	; 0x30
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f005 fb08 	bl	8007ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <SystemClock_Config+0xcc>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <SystemClock_Config+0xcc>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6413      	str	r3, [r2, #64]	; 0x40
 80024c4:	4b25      	ldr	r3, [pc, #148]	; (800255c <SystemClock_Config+0xcc>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <SystemClock_Config+0xd0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a21      	ldr	r2, [pc, #132]	; (8002560 <SystemClock_Config+0xd0>)
 80024da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <SystemClock_Config+0xd0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ec:	2302      	movs	r3, #2
 80024ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f0:	2301      	movs	r3, #1
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f4:	2310      	movs	r3, #16
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f8:	2302      	movs	r3, #2
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002500:	2308      	movs	r3, #8
 8002502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002504:	23a8      	movs	r3, #168	; 0xa8
 8002506:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002508:	2302      	movs	r3, #2
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800250c:	2304      	movs	r3, #4
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002510:	f107 0320 	add.w	r3, r7, #32
 8002514:	4618      	mov	r0, r3
 8002516:	f002 ff51 	bl	80053bc <HAL_RCC_OscConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002520:	f000 fab2 	bl	8002a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002524:	230f      	movs	r3, #15
 8002526:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002528:	2302      	movs	r3, #2
 800252a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002530:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002534:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002536:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800253a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	2105      	movs	r1, #5
 8002542:	4618      	mov	r0, r3
 8002544:	f003 f9b2 	bl	80058ac <HAL_RCC_ClockConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800254e:	f000 fa9b 	bl	8002a88 <Error_Handler>
  }
}
 8002552:	bf00      	nop
 8002554:	3750      	adds	r7, #80	; 0x50
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40007000 	.word	0x40007000

08002564 <point_init>:

/* USER CODE BEGIN 4 */
void point_init(){
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
	for(int i = 0; i < 19; i++){
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	e00e      	b.n	800258e <point_init+0x2a>
		Point[i][0] = 10;
 8002570:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <point_init+0x40>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	210a      	movs	r1, #10
 8002576:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		Point[i][1] = 300;
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <point_init+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002586:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 19; i++){
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b12      	cmp	r3, #18
 8002592:	dded      	ble.n	8002570 <point_init+0xc>
	}
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	200001d0 	.word	0x200001d0

080025a8 <system_init>:

void system_init(){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	timer_init();
 80025ac:	f000 fb5e 	bl	8002c6c <timer_init>
	ds3231_init();
 80025b0:	f7fe fdbe 	bl	8001130 <ds3231_init>
	button_init();
 80025b4:	f7fe fce2 	bl	8000f7c <button_init>
	lcd_init();
 80025b8:	f7ff fc04 	bl	8001dc4 <lcd_init>
	sensor_init();
 80025bc:	f000 fa6a 	bl	8002a94 <sensor_init>
	buzzer_init();
 80025c0:	f7fe fd74 	bl	80010ac <buzzer_init>
	led7_init();
 80025c4:	f7ff fdc2 	bl	800214c <led7_init>
	point_init();
 80025c8:	f7ff ffcc 	bl	8002564 <point_init>
	setTimer(LCD_PERIOD, LCD_TIMER);
 80025cc:	2100      	movs	r1, #0
 80025ce:	2005      	movs	r0, #5
 80025d0:	f000 fb56 	bl	8002c80 <setTimer>
	setTimer(LED7SEG_PERIOD, LED7SEG_TIMER);
 80025d4:	2101      	movs	r1, #1
 80025d6:	2005      	movs	r0, #5
 80025d8:	f000 fb52 	bl	8002c80 <setTimer>
	setTimer(UPDATE_PERIOD, UPDATE_TIMER);
 80025dc:	2102      	movs	r1, #2
 80025de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025e2:	f000 fb4d 	bl	8002c80 <setTimer>
	setTimer(BUZZER_PERIOD, BUZZER_TIMER);
 80025e6:	2103      	movs	r1, #3
 80025e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ec:	f000 fb48 	bl	8002c80 <setTimer>
	setTimer(DIAGRAM_PERIOD, DIAGRAM_TIMER);
 80025f0:	2104      	movs	r1, #4
 80025f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f6:	f000 fb43 	bl	8002c80 <setTimer>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <button_Update>:

void button_Update(){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	button_Scan();
 8002604:	f7fe fcc6 	bl	8000f94 <button_Scan>
	if(isButtonUp()){
 8002608:	f7fe fd30 	bl	800106c <isButtonUp>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00f      	beq.n	8002632 <button_Update+0x32>
		current_duty_cycle = (current_duty_cycle + 1)%100;
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <button_Update+0x68>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <button_Update+0x6c>)
 800261a:	fb82 1203 	smull	r1, r2, r2, r3
 800261e:	1151      	asrs	r1, r2, #5
 8002620:	17da      	asrs	r2, r3, #31
 8002622:	1a8a      	subs	r2, r1, r2
 8002624:	2164      	movs	r1, #100	; 0x64
 8002626:	fb01 f202 	mul.w	r2, r1, r2
 800262a:	1a9a      	subs	r2, r3, r2
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <button_Update+0x68>)
 8002630:	701a      	strb	r2, [r3, #0]
	}
	if(isButtonDown()){
 8002632:	f7fe fd2b 	bl	800108c <isButtonDown>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <button_Update+0x64>
		if(current_duty_cycle > 0){
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <button_Update+0x68>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00f      	beq.n	8002664 <button_Update+0x64>
			current_duty_cycle = (current_duty_cycle - 1)%100;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <button_Update+0x68>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	3b01      	subs	r3, #1
 800264a:	4a08      	ldr	r2, [pc, #32]	; (800266c <button_Update+0x6c>)
 800264c:	fb82 1203 	smull	r1, r2, r2, r3
 8002650:	1151      	asrs	r1, r2, #5
 8002652:	17da      	asrs	r2, r3, #31
 8002654:	1a8a      	subs	r2, r1, r2
 8002656:	2164      	movs	r1, #100	; 0x64
 8002658:	fb01 f202 	mul.w	r2, r1, r2
 800265c:	1a9a      	subs	r2, r3, r2
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4b01      	ldr	r3, [pc, #4]	; (8002668 <button_Update+0x68>)
 8002662:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000106 	.word	0x20000106
 800266c:	51eb851f 	.word	0x51eb851f

08002670 <adc_Display>:

void adc_Display(){
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af04      	add	r7, sp, #16
	lcd_ShowStr(10, 10, "Duty cycle:", RED, WHITE, 16, 0);
 8002676:	2300      	movs	r3, #0
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	2310      	movs	r3, #16
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002688:	4a64      	ldr	r2, [pc, #400]	; (800281c <adc_Display+0x1ac>)
 800268a:	210a      	movs	r1, #10
 800268c:	200a      	movs	r0, #10
 800268e:	f7ff fcf9 	bl	8002084 <lcd_ShowStr>
	lcd_ShowIntNum(130, 10, current_duty_cycle, 2, RED, WHITE, 16);
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <adc_Display+0x1b0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
 8002698:	2310      	movs	r3, #16
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2302      	movs	r3, #2
 80026aa:	210a      	movs	r1, #10
 80026ac:	2082      	movs	r0, #130	; 0x82
 80026ae:	f7ff fa5f 	bl	8001b70 <lcd_ShowIntNum>
	lcd_ShowStr(200, 10, "(%)", RED, WHITE, 16, 0);
 80026b2:	2300      	movs	r3, #0
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	2310      	movs	r3, #16
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026c4:	4a57      	ldr	r2, [pc, #348]	; (8002824 <adc_Display+0x1b4>)
 80026c6:	210a      	movs	r1, #10
 80026c8:	20c8      	movs	r0, #200	; 0xc8
 80026ca:	f7ff fcdb 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(10, 30, "Power:", RED, WHITE, 16, 0);
 80026ce:	2300      	movs	r3, #0
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2310      	movs	r3, #16
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026e0:	4a51      	ldr	r2, [pc, #324]	; (8002828 <adc_Display+0x1b8>)
 80026e2:	211e      	movs	r1, #30
 80026e4:	200a      	movs	r0, #10
 80026e6:	f7ff fccd 	bl	8002084 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 30, Power, 5, RED, WHITE, 16);
 80026ea:	4b50      	ldr	r3, [pc, #320]	; (800282c <adc_Display+0x1bc>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	2310      	movs	r3, #16
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026fe:	2205      	movs	r2, #5
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	211e      	movs	r1, #30
 8002706:	2082      	movs	r0, #130	; 0x82
 8002708:	f7ff fab0 	bl	8001c6c <lcd_ShowFloatNum>
	lcd_ShowStr(200, 30, "(mW)", RED, WHITE, 16, 0);
 800270c:	2300      	movs	r3, #0
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	2310      	movs	r3, #16
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800271e:	4a44      	ldr	r2, [pc, #272]	; (8002830 <adc_Display+0x1c0>)
 8002720:	211e      	movs	r1, #30
 8002722:	20c8      	movs	r0, #200	; 0xc8
 8002724:	f7ff fcae 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(10, 50, "Light:", RED, WHITE, 16, 0);
 8002728:	2300      	movs	r3, #0
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	2310      	movs	r3, #16
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800273a:	4a3e      	ldr	r2, [pc, #248]	; (8002834 <adc_Display+0x1c4>)
 800273c:	2132      	movs	r1, #50	; 0x32
 800273e:	200a      	movs	r0, #10
 8002740:	f7ff fca0 	bl	8002084 <lcd_ShowStr>
	lcd_ShowStr(130, 50, Light_intensity, RED, WHITE, 16, 0);
 8002744:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <adc_Display+0x1c8>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2300      	movs	r3, #0
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	2310      	movs	r3, #16
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800275a:	2132      	movs	r1, #50	; 0x32
 800275c:	2082      	movs	r0, #130	; 0x82
 800275e:	f7ff fc91 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(10, 70, "Temperature:", RED, WHITE, 16, 0);
 8002762:	2300      	movs	r3, #0
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	2310      	movs	r3, #16
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <adc_Display+0x1cc>)
 8002776:	2146      	movs	r1, #70	; 0x46
 8002778:	200a      	movs	r0, #10
 800277a:	f7ff fc83 	bl	8002084 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 70, sensor_GetTemperature(), 4, RED, WHITE, 16);
 800277e:	f000 fa57 	bl	8002c30 <sensor_GetTemperature>
 8002782:	eef0 7a40 	vmov.f32	s15, s0
 8002786:	2310      	movs	r3, #16
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002794:	2204      	movs	r2, #4
 8002796:	eeb0 0a67 	vmov.f32	s0, s15
 800279a:	2146      	movs	r1, #70	; 0x46
 800279c:	2082      	movs	r0, #130	; 0x82
 800279e:	f7ff fa65 	bl	8001c6c <lcd_ShowFloatNum>
	lcd_ShowStr(200, 70, "(oC)", RED, WHITE, 16, 0);
 80027a2:	2300      	movs	r3, #0
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2310      	movs	r3, #16
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027b4:	4a22      	ldr	r2, [pc, #136]	; (8002840 <adc_Display+0x1d0>)
 80027b6:	2146      	movs	r1, #70	; 0x46
 80027b8:	20c8      	movs	r0, #200	; 0xc8
 80027ba:	f7ff fc63 	bl	8002084 <lcd_ShowStr>

	lcd_ShowStr(10, 90, "Humidity:", RED, WHITE, 16, 0);
 80027be:	2300      	movs	r3, #0
 80027c0:	9302      	str	r3, [sp, #8]
 80027c2:	2310      	movs	r3, #16
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027d0:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <adc_Display+0x1d4>)
 80027d2:	215a      	movs	r1, #90	; 0x5a
 80027d4:	200a      	movs	r0, #10
 80027d6:	f7ff fc55 	bl	8002084 <lcd_ShowStr>
	lcd_ShowIntNum(130, 90, Humidity, 2, RED, WHITE, 16);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <adc_Display+0x1d8>)
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	2310      	movs	r3, #16
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2302      	movs	r3, #2
 80027f0:	215a      	movs	r1, #90	; 0x5a
 80027f2:	2082      	movs	r0, #130	; 0x82
 80027f4:	f7ff f9bc 	bl	8001b70 <lcd_ShowIntNum>
	lcd_ShowStr(200, 90, "(%)", RED, WHITE, 16, 0);
 80027f8:	2300      	movs	r3, #0
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	2310      	movs	r3, #16
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800280a:	4a06      	ldr	r2, [pc, #24]	; (8002824 <adc_Display+0x1b4>)
 800280c:	215a      	movs	r1, #90	; 0x5a
 800280e:	20c8      	movs	r0, #200	; 0xc8
 8002810:	f7ff fc38 	bl	8002084 <lcd_ShowStr>
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	08007b24 	.word	0x08007b24
 8002820:	20000106 	.word	0x20000106
 8002824:	08007b30 	.word	0x08007b30
 8002828:	08007b34 	.word	0x08007b34
 800282c:	20000228 	.word	0x20000228
 8002830:	08007b3c 	.word	0x08007b3c
 8002834:	08007b44 	.word	0x08007b44
 8002838:	20000010 	.word	0x20000010
 800283c:	08007b4c 	.word	0x08007b4c
 8002840:	08007b5c 	.word	0x08007b5c
 8002844:	08007b64 	.word	0x08007b64
 8002848:	2000022e 	.word	0x2000022e

0800284c <led7_Update>:

void led7_Update(){
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	ds3231_ReadTime();
 8002850:	f7fe fca6 	bl	80011a0 <ds3231_ReadTime>
	led7_SetDigit(ds3231_hours/10, 0, 0);
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <led7_Update+0x80>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <led7_Update+0x84>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	08db      	lsrs	r3, r3, #3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fd08 	bl	800227c <led7_SetDigit>
	led7_SetDigit(ds3231_hours%10, 1, 0);
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <led7_Update+0x80>)
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <led7_Update+0x84>)
 8002872:	fba3 1302 	umull	r1, r3, r3, r2
 8002876:	08d9      	lsrs	r1, r3, #3
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2200      	movs	r2, #0
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fcf7 	bl	800227c <led7_SetDigit>
	led7_SetDigit(ds3231_min/10, 2, 0);
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <led7_Update+0x88>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <led7_Update+0x84>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	08db      	lsrs	r3, r3, #3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2200      	movs	r2, #0
 800289e:	2102      	movs	r1, #2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fceb 	bl	800227c <led7_SetDigit>
	led7_SetDigit(ds3231_min%10, 3, 0);
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <led7_Update+0x88>)
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <led7_Update+0x84>)
 80028ac:	fba3 1302 	umull	r1, r3, r3, r2
 80028b0:	08d9      	lsrs	r1, r3, #3
 80028b2:	460b      	mov	r3, r1
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2200      	movs	r2, #0
 80028c0:	2103      	movs	r1, #3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fcda 	bl	800227c <led7_SetDigit>
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000113 	.word	0x20000113
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	20000114 	.word	0x20000114

080028d8 <adc_Update>:

void adc_Update(){
 80028d8:	b580      	push	{r7, lr}
 80028da:	ed2d 8b02 	vpush	{d8}
 80028de:	af00      	add	r7, sp, #0
	sensor_Read();
 80028e0:	f000 f8e6 	bl	8002ab0 <sensor_Read>
	Power = sensor_GetCurrent()*sensor_GetVoltage();
 80028e4:	f000 f948 	bl	8002b78 <sensor_GetCurrent>
 80028e8:	eeb0 8a40 	vmov.f32	s16, s0
 80028ec:	f000 f908 	bl	8002b00 <sensor_GetVoltage>
 80028f0:	eef0 7a40 	vmov.f32	s15, s0
 80028f4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80028f8:	4b21      	ldr	r3, [pc, #132]	; (8002980 <adc_Update+0xa8>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]
	Light = sensor_GetLight();
 80028fe:	f000 f8e5 	bl	8002acc <sensor_GetLight>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <adc_Update+0xac>)
 8002908:	801a      	strh	r2, [r3, #0]
	if(Light < 2048){
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <adc_Update+0xac>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002912:	d203      	bcs.n	800291c <adc_Update+0x44>
		Light_intensity = "Weak";
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <adc_Update+0xb0>)
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <adc_Update+0xb4>)
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e002      	b.n	8002922 <adc_Update+0x4a>
	}else{
		Light_intensity = "Strong";
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <adc_Update+0xb0>)
 800291e:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <adc_Update+0xb8>)
 8002920:	601a      	str	r2, [r3, #0]
	}
	Humidity = (((float)sensor_GetPotentiometer())/4095.0)*100.0;
 8002922:	f000 f8df 	bl	8002ae4 <sensor_GetPotentiometer>
 8002926:	4603      	mov	r3, r0
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	ee17 0a90 	vmov	r0, s15
 8002934:	f7fd fdac 	bl	8000490 <__aeabi_f2d>
 8002938:	a30f      	add	r3, pc, #60	; (adr r3, 8002978 <adc_Update+0xa0>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd ff29 	bl	8000794 <__aeabi_ddiv>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <adc_Update+0xbc>)
 8002950:	f7fd fdf6 	bl	8000540 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	f7fe f802 	bl	8000964 <__aeabi_d2uiz>
 8002960:	4603      	mov	r3, r0
 8002962:	b29a      	uxth	r2, r3
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <adc_Update+0xc0>)
 8002966:	801a      	strh	r2, [r3, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	ecbd 8b02 	vpop	{d8}
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	f3af 8000 	nop.w
 8002978:	00000000 	.word	0x00000000
 800297c:	40affe00 	.word	0x40affe00
 8002980:	20000228 	.word	0x20000228
 8002984:	2000022c 	.word	0x2000022c
 8002988:	20000010 	.word	0x20000010
 800298c:	08007b70 	.word	0x08007b70
 8002990:	08007b78 	.word	0x08007b78
 8002994:	40590000 	.word	0x40590000
 8002998:	2000022e 	.word	0x2000022e

0800299c <buzzer_Sound>:

void buzzer_Sound(uint8_t _buzzer_status){
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
	if(_buzzer_status == 0){
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <buzzer_Sound+0x18>
		buzzer_SetVolume(0);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe fb87 	bl	80010c0 <buzzer_SetVolume>
	}else{
		buzzer_SetVolume(current_duty_cycle);
	}
}
 80029b2:	e004      	b.n	80029be <buzzer_Sound+0x22>
		buzzer_SetVolume(current_duty_cycle);
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <buzzer_Sound+0x2c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fb81 	bl	80010c0 <buzzer_SetVolume>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000106 	.word	0x20000106

080029cc <diagram_display>:

void diagram_display(){
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af04      	add	r7, sp, #16
	lcd_ShowStr(10, 180, "Power", BLACK, WHITE, 16, 0);
 80029d2:	2300      	movs	r3, #0
 80029d4:	9302      	str	r3, [sp, #8]
 80029d6:	2310      	movs	r3, #16
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2300      	movs	r3, #0
 80029e2:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <diagram_display+0xb0>)
 80029e4:	21b4      	movs	r1, #180	; 0xb4
 80029e6:	200a      	movs	r0, #10
 80029e8:	f7ff fb4c 	bl	8002084 <lcd_ShowStr>
	lcd_DrawLine(10, 200, 10, 300, BLACK);
 80029ec:	2300      	movs	r3, #0
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80029f4:	220a      	movs	r2, #10
 80029f6:	21c8      	movs	r1, #200	; 0xc8
 80029f8:	200a      	movs	r0, #10
 80029fa:	f7fe ff48 	bl	800188e <lcd_DrawLine>
	lcd_ShowStr(200, 290, "Time", BLACK, WHITE, 16, 0);
 80029fe:	2300      	movs	r3, #0
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	2310      	movs	r3, #16
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <diagram_display+0xb4>)
 8002a10:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002a14:	20c8      	movs	r0, #200	; 0xc8
 8002a16:	f7ff fb35 	bl	8002084 <lcd_ShowStr>
	lcd_DrawLine(10, 300, 190, 300, BLACK);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a22:	22be      	movs	r2, #190	; 0xbe
 8002a24:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a28:	200a      	movs	r0, #10
 8002a2a:	f7fe ff30 	bl	800188e <lcd_DrawLine>
	for(int i = 0; i < 18; i++){
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	e01a      	b.n	8002a6a <diagram_display+0x9e>
		lcd_DrawLine(Point[i][0], Point[i][1], Point[i + 1][0], Point[i + 1][1], BLACK);
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <diagram_display+0xb8>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <diagram_display+0xb8>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	8859      	ldrh	r1, [r3, #2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <diagram_display+0xb8>)
 8002a4c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3301      	adds	r3, #1
 8002a54:	4c0b      	ldr	r4, [pc, #44]	; (8002a84 <diagram_display+0xb8>)
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4423      	add	r3, r4
 8002a5a:	885b      	ldrh	r3, [r3, #2]
 8002a5c:	2400      	movs	r4, #0
 8002a5e:	9400      	str	r4, [sp, #0]
 8002a60:	f7fe ff15 	bl	800188e <lcd_DrawLine>
	for(int i = 0; i < 18; i++){
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b11      	cmp	r3, #17
 8002a6e:	dde1      	ble.n	8002a34 <diagram_display+0x68>
	}
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	08007b80 	.word	0x08007b80
 8002a80:	08007b88 	.word	0x08007b88
 8002a84:	200001d0 	.word	0x200001d0

08002a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a8c:	b672      	cpsid	i
}
 8002a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <Error_Handler+0x8>
	...

08002a94 <sensor_init>:
float Power = 0.0;
uint16_t Light = 0;
char* Light_intensity = "";
uint16_t Humidity = 0;

void sensor_init(){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002a98:	2205      	movs	r2, #5
 8002a9a:	4903      	ldr	r1, [pc, #12]	; (8002aa8 <sensor_init+0x14>)
 8002a9c:	4803      	ldr	r0, [pc, #12]	; (8002aac <sensor_init+0x18>)
 8002a9e:	f000 fc99 	bl	80033d4 <HAL_ADC_Start_DMA>
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000021c 	.word	0x2000021c
 8002aac:	2000003c 	.word	0x2000003c

08002ab0 <sensor_Read>:

void sensor_Read(){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <sensor_Read+0x14>)
 8002ab8:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <sensor_Read+0x18>)
 8002aba:	f000 fc8b 	bl	80033d4 <HAL_ADC_Start_DMA>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000021c 	.word	0x2000021c
 8002ac8:	2000003c 	.word	0x2000003c

08002acc <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
	return adc_receive[LIGHT_INDEX];
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <sensor_GetLight+0x14>)
 8002ad2:	889b      	ldrh	r3, [r3, #4]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	2000021c 	.word	0x2000021c

08002ae4 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
	return adc_receive[POTENTIOMETER_INDEX];
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <sensor_GetPotentiometer+0x14>)
 8002aea:	88db      	ldrh	r3, [r3, #6]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	2000021c 	.word	0x2000021c
 8002afc:	00000000 	.word	0x00000000

08002b00 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	return ((float)adc_receive[VOLTAGE_INDEX]*3.3*12)/(4095*1.565);
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <sensor_GetVoltage+0x70>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b10:	ee17 0a90 	vmov	r0, s15
 8002b14:	f7fd fcbc 	bl	8000490 <__aeabi_f2d>
 8002b18:	a311      	add	r3, pc, #68	; (adr r3, 8002b60 <sensor_GetVoltage+0x60>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fd0f 	bl	8000540 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <sensor_GetVoltage+0x74>)
 8002b30:	f7fd fd06 	bl	8000540 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	a30a      	add	r3, pc, #40	; (adr r3, 8002b68 <sensor_GetVoltage+0x68>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fe27 	bl	8000794 <__aeabi_ddiv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fd ff29 	bl	80009a4 <__aeabi_d2f>
 8002b52:	4603      	mov	r3, r0
 8002b54:	ee07 3a90 	vmov	s15, r3
}
 8002b58:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	66666666 	.word	0x66666666
 8002b64:	400a6666 	.word	0x400a6666
 8002b68:	cccccccd 	.word	0xcccccccd
 8002b6c:	40b908ac 	.word	0x40b908ac
 8002b70:	2000021c 	.word	0x2000021c
 8002b74:	40280000 	.word	0x40280000

08002b78 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[CURRENT_INDEX]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <sensor_GetCurrent+0xa8>)
 8002b7e:	885b      	ldrh	r3, [r3, #2]
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b88:	ee17 0a90 	vmov	r0, s15
 8002b8c:	f7fd fc80 	bl	8000490 <__aeabi_f2d>
 8002b90:	a31f      	add	r3, pc, #124	; (adr r3, 8002c10 <sensor_GetCurrent+0x98>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd fcd3 	bl	8000540 <__aeabi_dmul>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <sensor_GetCurrent+0xac>)
 8002ba8:	f7fd fcca 	bl	8000540 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	a318      	add	r3, pc, #96	; (adr r3, 8002c18 <sensor_GetCurrent+0xa0>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fdeb 	bl	8000794 <__aeabi_ddiv>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <sensor_GetCurrent+0xb0>)
 8002bcc:	f7fd fb00 	bl	80001d0 <__aeabi_dsub>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <sensor_GetCurrent+0xb4>)
 8002bde:	f7fd fcaf 	bl	8000540 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <sensor_GetCurrent+0xb0>)
 8002bf0:	f7fd fdd0 	bl	8000794 <__aeabi_ddiv>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f7fd fed2 	bl	80009a4 <__aeabi_d2f>
 8002c00:	4603      	mov	r3, r0
 8002c02:	ee07 3a90 	vmov	s15, r3
}
 8002c06:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	f3af 8000 	nop.w
 8002c10:	66666666 	.word	0x66666666
 8002c14:	400a6666 	.word	0x400a6666
 8002c18:	147ae148 	.word	0x147ae148
 8002c1c:	40a4b2ee 	.word	0x40a4b2ee
 8002c20:	2000021c 	.word	0x2000021c
 8002c24:	408f4000 	.word	0x408f4000
 8002c28:	40040000 	.word	0x40040000
 8002c2c:	40140000 	.word	0x40140000

08002c30 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
	return ((float)adc_receive[TEMPERATURE_INDEX]*330)/(4095);
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <sensor_GetTemperature+0x30>)
 8002c36:	891b      	ldrh	r3, [r3, #8]
 8002c38:	ee07 3a90 	vmov	s15, r3
 8002c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c40:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002c64 <sensor_GetTemperature+0x34>
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c68 <sensor_GetTemperature+0x38>
 8002c4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c50:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c54:	eeb0 0a67 	vmov.f32	s0, s15
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	2000021c 	.word	0x2000021c
 8002c64:	43a50000 	.word	0x43a50000
 8002c68:	457ff000 	.word	0x457ff000

08002c6c <timer_init>:
#include "software_timer.h"

uint16_t flag_timer[N0_OF_TIMER] = {0, 0, 0, 0, 0};
uint16_t timer_counter[N0_OF_TIMER] = {0, 0, 0, 0, 0};

void timer_init(){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <timer_init+0x10>)
 8002c72:	f003 fe63 	bl	800693c <HAL_TIM_Base_Start_IT>
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200002a0 	.word	0x200002a0

08002c80 <setTimer>:

void setTimer(uint16_t duration, uint16_t timer_type){
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	460a      	mov	r2, r1
 8002c8a:	80fb      	strh	r3, [r7, #6]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	80bb      	strh	r3, [r7, #4]
	timer_counter[timer_type] = duration/TIMER_CYCLE;
 8002c90:	88bb      	ldrh	r3, [r7, #4]
 8002c92:	4907      	ldr	r1, [pc, #28]	; (8002cb0 <setTimer+0x30>)
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	flag_timer[timer_type] = 0;
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <setTimer+0x34>)
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	2000023c 	.word	0x2000023c
 8002cb4:	20000230 	.word	0x20000230

08002cb8 <timerRun>:

void timerRun(uint16_t timer_type){
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	80fb      	strh	r3, [r7, #6]
	if(timer_counter[timer_type] > 0){
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <timerRun+0x4c>)
 8002cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <timerRun+0x3e>
		timer_counter[timer_type]--;
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <timerRun+0x4c>)
 8002cd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cd6:	3a01      	subs	r2, #1
 8002cd8:	b291      	uxth	r1, r2
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <timerRun+0x4c>)
 8002cdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer_counter[timer_type] <= 0){
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <timerRun+0x4c>)
 8002ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <timerRun+0x3e>
			flag_timer[timer_type] = 1;
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <timerRun+0x50>)
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
	}
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	2000023c 	.word	0x2000023c
 8002d08:	20000230 	.word	0x20000230

08002d0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_PeriodElapsedCallback+0x30>
		timerRun(LCD_TIMER);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7ff ffca 	bl	8002cb8 <timerRun>
		timerRun(LED7SEG_TIMER);
 8002d24:	2001      	movs	r0, #1
 8002d26:	f7ff ffc7 	bl	8002cb8 <timerRun>
		timerRun(UPDATE_TIMER);
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f7ff ffc4 	bl	8002cb8 <timerRun>
		timerRun(BUZZER_TIMER);
 8002d30:	2003      	movs	r0, #3
 8002d32:	f7ff ffc1 	bl	8002cb8 <timerRun>
		timerRun(DIAGRAM_TIMER);
 8002d36:	2004      	movs	r0, #4
 8002d38:	f7ff ffbe 	bl	8002cb8 <timerRun>
	}
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d48:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <MX_SPI1_Init+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d90:	220a      	movs	r2, #10
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d94:	4804      	ldr	r0, [pc, #16]	; (8002da8 <MX_SPI1_Init+0x64>)
 8002d96:	f002 ff95 	bl	8005cc4 <HAL_SPI_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002da0:	f7ff fe72 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000248 	.word	0x20000248
 8002dac:	40013000 	.word	0x40013000

08002db0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_SPI_MspInit+0x84>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12b      	bne.n	8002e2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e0a:	2338      	movs	r3, #56	; 0x38
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <HAL_SPI_MspInit+0x8c>)
 8002e26:	f001 fb25 	bl	8004474 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40013000 	.word	0x40013000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020400 	.word	0x40020400

08002e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_MspInit+0x4c>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <HAL_MspInit+0x4c>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_MspInit+0x4c>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_MspInit+0x4c>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <HAL_MspInit+0x4c>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_MspInit+0x4c>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <NMI_Handler+0x4>

08002e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <HardFault_Handler+0x4>

08002e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <MemManage_Handler+0x4>

08002ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <BusFault_Handler+0x4>

08002ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <UsageFault_Handler+0x4>

08002eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002edc:	f000 f9f2 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <TIM2_IRQHandler+0x10>)
 8002eea:	f003 feb9 	bl	8006c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200002a0 	.word	0x200002a0

08002ef8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <DMA2_Stream0_IRQHandler+0x10>)
 8002efe:	f001 f84f 	bl	8003fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000084 	.word	0x20000084

08002f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <SystemInit+0x20>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <SystemInit+0x20>)
 8002f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	609a      	str	r2, [r3, #8]
 8002f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f44:	463b      	mov	r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f56:	f240 3247 	movw	r2, #839	; 0x347
 8002f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f64:	2263      	movs	r2, #99	; 0x63
 8002f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f74:	4813      	ldr	r0, [pc, #76]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f76:	f003 fc91 	bl	800689c <HAL_TIM_Base_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f80:	f7ff fd82 	bl	8002a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	4619      	mov	r1, r3
 8002f90:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002f92:	f004 f82f 	bl	8006ff4 <HAL_TIM_ConfigClockSource>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f9c:	f7ff fd74 	bl	8002a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fa8:	463b      	mov	r3, r7
 8002faa:	4619      	mov	r1, r3
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <MX_TIM2_Init+0x94>)
 8002fae:	f004 fc21 	bl	80077f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fb8:	f7ff fd66 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fbc:	bf00      	nop
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200002a0 	.word	0x200002a0

08002fc8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
 8002fdc:	615a      	str	r2, [r3, #20]
 8002fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	; (800305c <MX_TIM13_Init+0x94>)
 8002fe2:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <MX_TIM13_Init+0x98>)
 8002fe4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <MX_TIM13_Init+0x94>)
 8002fe8:	f240 3247 	movw	r2, #839	; 0x347
 8002fec:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <MX_TIM13_Init+0x94>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <MX_TIM13_Init+0x94>)
 8002ff6:	2263      	movs	r2, #99	; 0x63
 8002ff8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <MX_TIM13_Init+0x94>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <MX_TIM13_Init+0x94>)
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003006:	4815      	ldr	r0, [pc, #84]	; (800305c <MX_TIM13_Init+0x94>)
 8003008:	f003 fc48 	bl	800689c <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003012:	f7ff fd39 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003016:	4811      	ldr	r0, [pc, #68]	; (800305c <MX_TIM13_Init+0x94>)
 8003018:	f003 fd00 	bl	8006a1c <HAL_TIM_PWM_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003022:	f7ff fd31 	bl	8002a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003026:	2360      	movs	r3, #96	; 0x60
 8003028:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	4619      	mov	r1, r3
 800303c:	4807      	ldr	r0, [pc, #28]	; (800305c <MX_TIM13_Init+0x94>)
 800303e:	f003 ff17 	bl	8006e70 <HAL_TIM_PWM_ConfigChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003048:	f7ff fd1e 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800304c:	4803      	ldr	r0, [pc, #12]	; (800305c <MX_TIM13_Init+0x94>)
 800304e:	f000 f845 	bl	80030dc <HAL_TIM_MspPostInit>

}
 8003052:	bf00      	nop
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200002e8 	.word	0x200002e8
 8003060:	40001c00 	.word	0x40001c00

08003064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003074:	d116      	bne.n	80030a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_TIM_Base_MspInit+0x70>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <HAL_TIM_Base_MspInit+0x70>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_TIM_Base_MspInit+0x70>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	201c      	movs	r0, #28
 8003098:	f000 fe45 	bl	8003d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800309c:	201c      	movs	r0, #28
 800309e:	f000 fe5e 	bl	8003d5e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80030a2:	e012      	b.n	80030ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_TIM_Base_MspInit+0x74>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_TIM_Base_MspInit+0x70>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_TIM_Base_MspInit+0x70>)
 80030b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_TIM_Base_MspInit+0x70>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40001c00 	.word	0x40001c00

080030dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a12      	ldr	r2, [pc, #72]	; (8003144 <HAL_TIM_MspPostInit+0x68>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d11e      	bne.n	800313c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_TIM_MspPostInit+0x6c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <HAL_TIM_MspPostInit+0x6c>)
 8003108:	f043 0320 	orr.w	r3, r3, #32
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_TIM_MspPostInit+0x6c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800311a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800312c:	2309      	movs	r3, #9
 800312e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	4619      	mov	r1, r3
 8003136:	4805      	ldr	r0, [pc, #20]	; (800314c <HAL_TIM_MspPostInit+0x70>)
 8003138:	f001 f99c 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800313c:	bf00      	nop
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40001c00 	.word	0x40001c00
 8003148:	40023800 	.word	0x40023800
 800314c:	40021400 	.word	0x40021400

08003150 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4413      	add	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	b2db      	uxtb	r3, r3
 8003172:	4413      	add	r3, r2
 8003174:	b2db      	uxtb	r3, r3
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <DEC2BCD+0x44>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	b258      	sxtb	r0, r3
 800319e:	79fa      	ldrb	r2, [r7, #7]
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <DEC2BCD+0x44>)
 80031a2:	fba3 1302 	umull	r1, r3, r3, r2
 80031a6:	08d9      	lsrs	r1, r3, #3
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	4303      	orrs	r3, r0
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	cccccccd 	.word	0xcccccccd

080031cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e8:	4c0b      	ldr	r4, [pc, #44]	; (8003218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031f6:	f7ff fe89 	bl	8002f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f004 fc63 	bl	8007ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7ff f883 	bl	8002308 <main>
  bx  lr    
 8003202:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003210:	0800ab44 	.word	0x0800ab44
  ldr r2, =_sbss
 8003214:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003218:	20000334 	.word	0x20000334

0800321c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC_IRQHandler>
	...

08003220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0d      	ldr	r2, [pc, #52]	; (8003260 <HAL_Init+0x40>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_Init+0x40>)
 8003236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800323a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a07      	ldr	r2, [pc, #28]	; (8003260 <HAL_Init+0x40>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003248:	2003      	movs	r0, #3
 800324a:	f000 fd61 	bl	8003d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324e:	200f      	movs	r0, #15
 8003250:	f000 f808 	bl	8003264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003254:	f7ff fdf4 	bl	8002e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023c00 	.word	0x40023c00

08003264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_InitTick+0x54>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_InitTick+0x58>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4619      	mov	r1, r3
 8003276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327a:	fbb3 f3f1 	udiv	r3, r3, r1
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fd79 	bl	8003d7a <HAL_SYSTICK_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00e      	b.n	80032b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d80a      	bhi.n	80032ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003298:	2200      	movs	r2, #0
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	f000 fd41 	bl	8003d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a4:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_InitTick+0x5c>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000014 	.word	0x20000014
 80032bc:	2000001c 	.word	0x2000001c
 80032c0:	20000018 	.word	0x20000018

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000001c 	.word	0x2000001c
 80032e8:	20000330 	.word	0x20000330

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000330 	.word	0x20000330

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_Delay+0x44>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	2000001c 	.word	0x2000001c

0800334c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e033      	b.n	80033ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fd72 	bl	8000e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003392:	f023 0302 	bic.w	r3, r3, #2
 8003396:	f043 0202 	orr.w	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fa68 	bl	8003874 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ba:	e001      	b.n	80033c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_Start_DMA+0x1e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0e9      	b.n	80035c6 <HAL_ADC_Start_DMA+0x1f2>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d018      	beq.n	800343a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003418:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_ADC_Start_DMA+0x1fc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6d      	ldr	r2, [pc, #436]	; (80035d4 <HAL_ADC_Start_DMA+0x200>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0c9a      	lsrs	r2, r3, #18
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800342c:	e002      	b.n	8003434 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	3b01      	subs	r3, #1
 8003432:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d107      	bne.n	800345a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 80a1 	bne.w	80035ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003494:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d106      	bne.n	80034b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f023 0206 	bic.w	r2, r3, #6
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
 80034b6:	e002      	b.n	80034be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 80034c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4a43      	ldr	r2, [pc, #268]	; (80035dc <HAL_ADC_Start_DMA+0x208>)
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4a42      	ldr	r2, [pc, #264]	; (80035e0 <HAL_ADC_Start_DMA+0x20c>)
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <HAL_ADC_Start_DMA+0x210>)
 80034e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	334c      	adds	r3, #76	; 0x4c
 8003516:	4619      	mov	r1, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f000 fce8 	bl	8003ef0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2b00      	cmp	r3, #0
 800352a:	d12a      	bne.n	8003582 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <HAL_ADC_Start_DMA+0x214>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d015      	beq.n	8003562 <HAL_ADC_Start_DMA+0x18e>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_ADC_Start_DMA+0x218>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d105      	bne.n	800354c <HAL_ADC_Start_DMA+0x178>
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_ADC_Start_DMA+0x21c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d136      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d130      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d129      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	e020      	b.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_ADC_Start_DMA+0x214>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d11b      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d114      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	e00b      	b.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000014 	.word	0x20000014
 80035d4:	431bde83 	.word	0x431bde83
 80035d8:	40012300 	.word	0x40012300
 80035dc:	08003a6d 	.word	0x08003a6d
 80035e0:	08003b27 	.word	0x08003b27
 80035e4:	08003b43 	.word	0x08003b43
 80035e8:	40012000 	.word	0x40012000
 80035ec:	40012100 	.word	0x40012100
 80035f0:	40012200 	.word	0x40012200

080035f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1c>
 8003648:	2302      	movs	r3, #2
 800364a:	e105      	b.n	8003858 <HAL_ADC_ConfigChannel+0x228>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b09      	cmp	r3, #9
 800365a:	d925      	bls.n	80036a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68d9      	ldr	r1, [r3, #12]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	2207      	movs	r2, #7
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43da      	mvns	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	400a      	ands	r2, r1
 8003680:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68d9      	ldr	r1, [r3, #12]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	4603      	mov	r3, r0
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4403      	add	r3, r0
 800369a:	3b1e      	subs	r3, #30
 800369c:	409a      	lsls	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	e022      	b.n	80036ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6919      	ldr	r1, [r3, #16]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	2207      	movs	r2, #7
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6919      	ldr	r1, [r3, #16]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4403      	add	r3, r0
 80036e4:	409a      	lsls	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d824      	bhi.n	8003740 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	3b05      	subs	r3, #5
 8003708:	221f      	movs	r2, #31
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	400a      	ands	r2, r1
 8003716:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	4618      	mov	r0, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	3b05      	subs	r3, #5
 8003732:	fa00 f203 	lsl.w	r2, r0, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	635a      	str	r2, [r3, #52]	; 0x34
 800373e:	e04c      	b.n	80037da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d824      	bhi.n	8003792 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	3b23      	subs	r3, #35	; 0x23
 800375a:	221f      	movs	r2, #31
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43da      	mvns	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	400a      	ands	r2, r1
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	4618      	mov	r0, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	3b23      	subs	r3, #35	; 0x23
 8003784:	fa00 f203 	lsl.w	r2, r0, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
 8003790:	e023      	b.n	80037da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	3b41      	subs	r3, #65	; 0x41
 80037a4:	221f      	movs	r2, #31
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	400a      	ands	r2, r1
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	3b41      	subs	r3, #65	; 0x41
 80037ce:	fa00 f203 	lsl.w	r2, r0, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_ADC_ConfigChannel+0x234>)
 80037dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_ADC_ConfigChannel+0x238>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d109      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x1cc>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b12      	cmp	r3, #18
 80037ee:	d105      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_ADC_ConfigChannel+0x238>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d123      	bne.n	800384e <HAL_ADC_ConfigChannel+0x21e>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b10      	cmp	r3, #16
 800380c:	d003      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x1e6>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b11      	cmp	r3, #17
 8003814:	d11b      	bne.n	800384e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b10      	cmp	r3, #16
 8003828:	d111      	bne.n	800384e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_ADC_ConfigChannel+0x23c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <HAL_ADC_ConfigChannel+0x240>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	0c9a      	lsrs	r2, r3, #18
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003840:	e002      	b.n	8003848 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3b01      	subs	r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f9      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40012300 	.word	0x40012300
 8003868:	40012000 	.word	0x40012000
 800386c:	20000014 	.word	0x20000014
 8003870:	431bde83 	.word	0x431bde83

08003874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800387c:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <ADC_Init+0x1f0>)
 800387e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6899      	ldr	r1, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <ADC_Init+0x1f4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800391a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6899      	ldr	r1, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800393c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	e00f      	b.n	8003972 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003970:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0202 	bic.w	r2, r2, #2
 8003980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7e1b      	ldrb	r3, [r3, #24]
 800398c:	005a      	lsls	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	3b01      	subs	r3, #1
 80039cc:	035a      	lsls	r2, r3, #13
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e007      	b.n	80039e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	051a      	lsls	r2, r3, #20
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a2a:	025a      	lsls	r2, r3, #9
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	029a      	lsls	r2, r3, #10
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40012300 	.word	0x40012300
 8003a68:	0f000001 	.word	0x0f000001

08003a6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d13c      	bne.n	8003b00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d12b      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d127      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d119      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0220 	bic.w	r2, r2, #32
 8003ad2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fd7b 	bl	80035f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003afe:	e00e      	b.n	8003b1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff fd85 	bl	800361c <HAL_ADC_ErrorCallback>
}
 8003b12:	e004      	b.n	8003b1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fd67 	bl	8003608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff fd5a 	bl	800361c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	60d3      	str	r3, [r2, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 0307 	and.w	r3, r3, #7
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	db0b      	blt.n	8003bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	4907      	ldr	r1, [pc, #28]	; (8003c0c <__NVIC_EnableIRQ+0x38>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000e100 	.word	0xe000e100

08003c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db0a      	blt.n	8003c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	490c      	ldr	r1, [pc, #48]	; (8003c5c <__NVIC_SetPriority+0x4c>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	440b      	add	r3, r1
 8003c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c38:	e00a      	b.n	8003c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <__NVIC_SetPriority+0x50>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3b04      	subs	r3, #4
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	761a      	strb	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f1c3 0307 	rsb	r3, r3, #7
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf28      	it	cs
 8003c82:	2304      	movcs	r3, #4
 8003c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d902      	bls.n	8003c94 <NVIC_EncodePriority+0x30>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3b03      	subs	r3, #3
 8003c92:	e000      	b.n	8003c96 <NVIC_EncodePriority+0x32>
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	43d9      	mvns	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	4313      	orrs	r3, r2
         );
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cdc:	d301      	bcc.n	8003ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00f      	b.n	8003d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <SysTick_Config+0x40>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cea:	210f      	movs	r1, #15
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	f7ff ff8e 	bl	8003c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <SysTick_Config+0x40>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <SysTick_Config+0x40>)
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	e000e010 	.word	0xe000e010

08003d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff29 	bl	8003b70 <__NVIC_SetPriorityGrouping>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d38:	f7ff ff3e 	bl	8003bb8 <__NVIC_GetPriorityGrouping>
 8003d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7ff ff8e 	bl	8003c64 <NVIC_EncodePriority>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff5d 	bl	8003c10 <__NVIC_SetPriority>
}
 8003d56:	bf00      	nop
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4603      	mov	r3, r0
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff31 	bl	8003bd4 <__NVIC_EnableIRQ>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ffa2 	bl	8003ccc <SysTick_Config>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da0:	f7ff faa4 	bl	80032ec <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e099      	b.n	8003ee4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd0:	e00f      	b.n	8003df2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd2:	f7ff fa8b 	bl	80032ec <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d908      	bls.n	8003df2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2203      	movs	r2, #3
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e078      	b.n	8003ee4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e8      	bne.n	8003dd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4b38      	ldr	r3, [pc, #224]	; (8003eec <HAL_DMA_Init+0x158>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d107      	bne.n	8003e5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4313      	orrs	r3, r2
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0307 	bic.w	r3, r3, #7
 8003e72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d117      	bne.n	8003eb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fa6f 	bl	800437c <DMA_CheckFifoParam>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e016      	b.n	8003ee4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa26 	bl	8004310 <DMA_CalcBaseAndBitshift>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	223f      	movs	r2, #63	; 0x3f
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	f010803f 	.word	0xf010803f

08003ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_DMA_Start_IT+0x26>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e040      	b.n	8003f98 <HAL_DMA_Start_IT+0xa8>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d12f      	bne.n	8003f8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f9b8 	bl	80042b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	223f      	movs	r2, #63	; 0x3f
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0216 	orr.w	r2, r2, #22
 8003f5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0208 	orr.w	r2, r2, #8
 8003f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e005      	b.n	8003f96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
 8003f94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fac:	4b8e      	ldr	r3, [pc, #568]	; (80041e8 <HAL_DMA_IRQHandler+0x248>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a8e      	ldr	r2, [pc, #568]	; (80041ec <HAL_DMA_IRQHandler+0x24c>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0a9b      	lsrs	r3, r3, #10
 8003fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	2208      	movs	r2, #8
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01a      	beq.n	800400c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d012      	beq.n	8004042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	2201      	movs	r2, #1
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f043 0202 	orr.w	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2204      	movs	r2, #4
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	2204      	movs	r2, #4
 8004066:	409a      	lsls	r2, r3
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f043 0204 	orr.w	r2, r3, #4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	2210      	movs	r2, #16
 800407e:	409a      	lsls	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d043      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03c      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	2210      	movs	r2, #16
 800409c:	409a      	lsls	r2, r3
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d018      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d024      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
 80040ce:	e01f      	b.n	8004110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01b      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
 80040e0:	e016      	b.n	8004110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0208 	bic.w	r2, r2, #8
 80040fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	2220      	movs	r2, #32
 8004116:	409a      	lsls	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 808f 	beq.w	8004240 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8087 	beq.w	8004240 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	2220      	movs	r2, #32
 8004138:	409a      	lsls	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b05      	cmp	r3, #5
 8004148:	d136      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0216 	bic.w	r2, r2, #22
 8004158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_DMA_IRQHandler+0x1da>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0208 	bic.w	r2, r2, #8
 8004188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	223f      	movs	r2, #63	; 0x3f
 8004190:	409a      	lsls	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d07e      	beq.n	80042ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
        }
        return;
 80041b6:	e079      	b.n	80042ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01d      	beq.n	8004202 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10d      	bne.n	80041f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d031      	beq.n	8004240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
 80041e4:	e02c      	b.n	8004240 <HAL_DMA_IRQHandler+0x2a0>
 80041e6:	bf00      	nop
 80041e8:	20000014 	.word	0x20000014
 80041ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d023      	beq.n	8004240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
 8004200:	e01e      	b.n	8004240 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10f      	bne.n	8004230 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0210 	bic.w	r2, r2, #16
 800421e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	2b00      	cmp	r3, #0
 8004246:	d032      	beq.n	80042ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d022      	beq.n	800429a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2205      	movs	r2, #5
 8004258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	3301      	adds	r3, #1
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	d307      	bcc.n	8004288 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f2      	bne.n	800426c <HAL_DMA_IRQHandler+0x2cc>
 8004286:	e000      	b.n	800428a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004288:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
 80042aa:	e000      	b.n	80042ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80042ac:	bf00      	nop
    }
  }
}
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d108      	bne.n	80042f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042f2:	e007      	b.n	8004304 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	3b10      	subs	r3, #16
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <DMA_CalcBaseAndBitshift+0x64>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <DMA_CalcBaseAndBitshift+0x68>)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d909      	bls.n	8004352 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	; 0x58
 8004350:	e007      	b.n	8004362 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	aaaaaaab 	.word	0xaaaaaaab
 8004378:	0800ab2c 	.word	0x0800ab2c

0800437c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11f      	bne.n	80043d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d856      	bhi.n	800444a <DMA_CheckFifoParam+0xce>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <DMA_CheckFifoParam+0x28>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043c7 	.word	0x080043c7
 80043ac:	080043b5 	.word	0x080043b5
 80043b0:	0800444b 	.word	0x0800444b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d046      	beq.n	800444e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c4:	e043      	b.n	800444e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ce:	d140      	bne.n	8004452 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e03d      	b.n	8004452 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043de:	d121      	bne.n	8004424 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d837      	bhi.n	8004456 <DMA_CheckFifoParam+0xda>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <DMA_CheckFifoParam+0x70>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	08004403 	.word	0x08004403
 80043f4:	080043fd 	.word	0x080043fd
 80043f8:	08004415 	.word	0x08004415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e030      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d025      	beq.n	800445a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004412:	e022      	b.n	800445a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800441c:	d11f      	bne.n	800445e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004422:	e01c      	b.n	800445e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d903      	bls.n	8004432 <DMA_CheckFifoParam+0xb6>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d003      	beq.n	8004438 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004430:	e018      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      break;
 8004436:	e015      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e00b      	b.n	8004462 <DMA_CheckFifoParam+0xe6>
      break;
 800444a:	bf00      	nop
 800444c:	e00a      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 800444e:	bf00      	nop
 8004450:	e008      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 8004452:	bf00      	nop
 8004454:	e006      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 8004456:	bf00      	nop
 8004458:	e004      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 800445a:	bf00      	nop
 800445c:	e002      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;   
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <DMA_CheckFifoParam+0xe8>
      break;
 8004462:	bf00      	nop
    }
  } 
  
  return status; 
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e16b      	b.n	8004768 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004490:	2201      	movs	r2, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f040 815a 	bne.w	8004762 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d005      	beq.n	80044c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d130      	bne.n	8004528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	2203      	movs	r2, #3
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044fc:	2201      	movs	r2, #1
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 0201 	and.w	r2, r3, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b03      	cmp	r3, #3
 8004532:	d017      	beq.n	8004564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d123      	bne.n	80045b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	08da      	lsrs	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3208      	adds	r2, #8
 8004578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	220f      	movs	r2, #15
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	08da      	lsrs	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3208      	adds	r2, #8
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0203 	and.w	r2, r3, #3
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80b4 	beq.w	8004762 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	4b60      	ldr	r3, [pc, #384]	; (8004780 <HAL_GPIO_Init+0x30c>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	4a5f      	ldr	r2, [pc, #380]	; (8004780 <HAL_GPIO_Init+0x30c>)
 8004604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004608:	6453      	str	r3, [r2, #68]	; 0x44
 800460a:	4b5d      	ldr	r3, [pc, #372]	; (8004780 <HAL_GPIO_Init+0x30c>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004616:	4a5b      	ldr	r2, [pc, #364]	; (8004784 <HAL_GPIO_Init+0x310>)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	3302      	adds	r3, #2
 800461e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	220f      	movs	r2, #15
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_GPIO_Init+0x314>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02b      	beq.n	800469a <HAL_GPIO_Init+0x226>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a51      	ldr	r2, [pc, #324]	; (800478c <HAL_GPIO_Init+0x318>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d025      	beq.n	8004696 <HAL_GPIO_Init+0x222>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a50      	ldr	r2, [pc, #320]	; (8004790 <HAL_GPIO_Init+0x31c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01f      	beq.n	8004692 <HAL_GPIO_Init+0x21e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4f      	ldr	r2, [pc, #316]	; (8004794 <HAL_GPIO_Init+0x320>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d019      	beq.n	800468e <HAL_GPIO_Init+0x21a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4e      	ldr	r2, [pc, #312]	; (8004798 <HAL_GPIO_Init+0x324>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_GPIO_Init+0x216>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4d      	ldr	r2, [pc, #308]	; (800479c <HAL_GPIO_Init+0x328>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00d      	beq.n	8004686 <HAL_GPIO_Init+0x212>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4c      	ldr	r2, [pc, #304]	; (80047a0 <HAL_GPIO_Init+0x32c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <HAL_GPIO_Init+0x20e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4b      	ldr	r2, [pc, #300]	; (80047a4 <HAL_GPIO_Init+0x330>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_GPIO_Init+0x20a>
 800467a:	2307      	movs	r3, #7
 800467c:	e00e      	b.n	800469c <HAL_GPIO_Init+0x228>
 800467e:	2308      	movs	r3, #8
 8004680:	e00c      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004682:	2306      	movs	r3, #6
 8004684:	e00a      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004686:	2305      	movs	r3, #5
 8004688:	e008      	b.n	800469c <HAL_GPIO_Init+0x228>
 800468a:	2304      	movs	r3, #4
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x228>
 800468e:	2303      	movs	r3, #3
 8004690:	e004      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004692:	2302      	movs	r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_GPIO_Init+0x228>
 800469a:	2300      	movs	r3, #0
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f002 0203 	and.w	r2, r2, #3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4093      	lsls	r3, r2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ac:	4935      	ldr	r1, [pc, #212]	; (8004784 <HAL_GPIO_Init+0x310>)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ba:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <HAL_GPIO_Init+0x334>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046de:	4a32      	ldr	r2, [pc, #200]	; (80047a8 <HAL_GPIO_Init+0x334>)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046e4:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <HAL_GPIO_Init+0x334>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_GPIO_Init+0x334>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <HAL_GPIO_Init+0x334>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_GPIO_Init+0x334>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_GPIO_Init+0x334>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_GPIO_Init+0x334>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	f67f ae90 	bls.w	8004490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
 8004784:	40013800 	.word	0x40013800
 8004788:	40020000 	.word	0x40020000
 800478c:	40020400 	.word	0x40020400
 8004790:	40020800 	.word	0x40020800
 8004794:	40020c00 	.word	0x40020c00
 8004798:	40021000 	.word	0x40021000
 800479c:	40021400 	.word	0x40021400
 80047a0:	40021800 	.word	0x40021800
 80047a4:	40021c00 	.word	0x40021c00
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e12b      	b.n	8004a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc ff32 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2224      	movs	r2, #36	; 0x24
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004844:	f001 fa2a 	bl	8005c9c <HAL_RCC_GetPCLK1Freq>
 8004848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4a81      	ldr	r2, [pc, #516]	; (8004a54 <HAL_I2C_Init+0x274>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d807      	bhi.n	8004864 <HAL_I2C_Init+0x84>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a80      	ldr	r2, [pc, #512]	; (8004a58 <HAL_I2C_Init+0x278>)
 8004858:	4293      	cmp	r3, r2
 800485a:	bf94      	ite	ls
 800485c:	2301      	movls	r3, #1
 800485e:	2300      	movhi	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e006      	b.n	8004872 <HAL_I2C_Init+0x92>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a7d      	ldr	r2, [pc, #500]	; (8004a5c <HAL_I2C_Init+0x27c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	bf94      	ite	ls
 800486c:	2301      	movls	r3, #1
 800486e:	2300      	movhi	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0e7      	b.n	8004a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a78      	ldr	r2, [pc, #480]	; (8004a60 <HAL_I2C_Init+0x280>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	0c9b      	lsrs	r3, r3, #18
 8004884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a6a      	ldr	r2, [pc, #424]	; (8004a54 <HAL_I2C_Init+0x274>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d802      	bhi.n	80048b4 <HAL_I2C_Init+0xd4>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	3301      	adds	r3, #1
 80048b2:	e009      	b.n	80048c8 <HAL_I2C_Init+0xe8>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	4a69      	ldr	r2, [pc, #420]	; (8004a64 <HAL_I2C_Init+0x284>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	099b      	lsrs	r3, r3, #6
 80048c6:	3301      	adds	r3, #1
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	495c      	ldr	r1, [pc, #368]	; (8004a54 <HAL_I2C_Init+0x274>)
 80048e4:	428b      	cmp	r3, r1
 80048e6:	d819      	bhi.n	800491c <HAL_I2C_Init+0x13c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1e59      	subs	r1, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f6:	1c59      	adds	r1, r3, #1
 80048f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048fc:	400b      	ands	r3, r1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_I2C_Init+0x138>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1e59      	subs	r1, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004910:	3301      	adds	r3, #1
 8004912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004916:	e051      	b.n	80049bc <HAL_I2C_Init+0x1dc>
 8004918:	2304      	movs	r3, #4
 800491a:	e04f      	b.n	80049bc <HAL_I2C_Init+0x1dc>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d111      	bne.n	8004948 <HAL_I2C_Init+0x168>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1e58      	subs	r0, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	440b      	add	r3, r1
 8004932:	fbb0 f3f3 	udiv	r3, r0, r3
 8004936:	3301      	adds	r3, #1
 8004938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e012      	b.n	800496e <HAL_I2C_Init+0x18e>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e58      	subs	r0, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	0099      	lsls	r1, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	fbb0 f3f3 	udiv	r3, r0, r3
 800495e:	3301      	adds	r3, #1
 8004960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_Init+0x196>
 8004972:	2301      	movs	r3, #1
 8004974:	e022      	b.n	80049bc <HAL_I2C_Init+0x1dc>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10e      	bne.n	800499c <HAL_I2C_Init+0x1bc>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1e58      	subs	r0, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	440b      	add	r3, r1
 800498c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004990:	3301      	adds	r3, #1
 8004992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499a:	e00f      	b.n	80049bc <HAL_I2C_Init+0x1dc>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e58      	subs	r0, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	0099      	lsls	r1, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	6809      	ldr	r1, [r1, #0]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6911      	ldr	r1, [r2, #16]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68d2      	ldr	r2, [r2, #12]
 80049f6:	4311      	orrs	r1, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	000186a0 	.word	0x000186a0
 8004a58:	001e847f 	.word	0x001e847f
 8004a5c:	003d08ff 	.word	0x003d08ff
 8004a60:	431bde83 	.word	0x431bde83
 8004a64:	10624dd3 	.word	0x10624dd3

08004a68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	; 0x30
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	461a      	mov	r2, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	813b      	strh	r3, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a82:	f7fe fc33 	bl	80032ec <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	f040 8208 	bne.w	8004ea6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2319      	movs	r3, #25
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	497b      	ldr	r1, [pc, #492]	; (8004c8c <HAL_I2C_Mem_Read+0x224>)
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 faef 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
 8004aae:	e1fb      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_I2C_Mem_Read+0x56>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e1f4      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d007      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2222      	movs	r2, #34	; 0x22
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2240      	movs	r2, #64	; 0x40
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a5b      	ldr	r2, [pc, #364]	; (8004c90 <HAL_I2C_Mem_Read+0x228>)
 8004b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b26:	88f8      	ldrh	r0, [r7, #6]
 8004b28:	893a      	ldrh	r2, [r7, #8]
 8004b2a:	8979      	ldrh	r1, [r7, #10]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	4603      	mov	r3, r0
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f9bc 	bl	8004eb4 <I2C_RequestMemoryRead>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e1b0      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d113      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e184      	b.n	8004e80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d11b      	bne.n	8004bb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e164      	b.n	8004e80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	e144      	b.n	8004e80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c0c:	e138      	b.n	8004e80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	f200 80f1 	bhi.w	8004dfa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d123      	bne.n	8004c68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fb44 	bl	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e139      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c66:	e10b      	b.n	8004e80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d14e      	bne.n	8004d0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	2200      	movs	r2, #0
 8004c78:	4906      	ldr	r1, [pc, #24]	; (8004c94 <HAL_I2C_Mem_Read+0x22c>)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fa02 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e10e      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
 8004c8a:	bf00      	nop
 8004c8c:	00100002 	.word	0x00100002
 8004c90:	ffff0000 	.word	0xffff0000
 8004c94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d0c:	e0b8      	b.n	8004e80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2200      	movs	r2, #0
 8004d16:	4966      	ldr	r1, [pc, #408]	; (8004eb0 <HAL_I2C_Mem_Read+0x448>)
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f9b3 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0bf      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	2200      	movs	r2, #0
 8004d72:	494f      	ldr	r1, [pc, #316]	; (8004eb0 <HAL_I2C_Mem_Read+0x448>)
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f985 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e091      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004df8:	e042      	b.n	8004e80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fa57 	bl	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e04c      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d118      	bne.n	8004e80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f47f aec2 	bne.w	8004c0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	00010004 	.word	0x00010004

08004eb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	817b      	strh	r3, [r7, #10]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	813b      	strh	r3, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004edc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f8c2 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f14:	d103      	bne.n	8004f1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0aa      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f22:	897b      	ldrh	r3, [r7, #10]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	4952      	ldr	r1, [pc, #328]	; (8005080 <I2C_RequestMemoryRead+0x1cc>)
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f8fa 	bl	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e097      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	6a39      	ldr	r1, [r7, #32]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f964 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d107      	bne.n	8004f86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e076      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f90:	893b      	ldrh	r3, [r7, #8]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]
 8004f9a:	e021      	b.n	8004fe0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f9c:	893b      	ldrh	r3, [r7, #8]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f93e 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d107      	bne.n	8004fd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e050      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd6:	893b      	ldrh	r3, [r7, #8]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	6a39      	ldr	r1, [r7, #32]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f923 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00d      	beq.n	800500c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d107      	bne.n	8005008 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005006:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e035      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2200      	movs	r2, #0
 8005024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f82b 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005042:	d103      	bne.n	800504c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e013      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005050:	897b      	ldrh	r3, [r7, #10]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	4906      	ldr	r1, [pc, #24]	; (8005080 <I2C_RequestMemoryRead+0x1cc>)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f863 	bl	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	00010002 	.word	0x00010002

08005084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005094:	e025      	b.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d021      	beq.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fe f925 	bl	80032ec <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d116      	bne.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e023      	b.n	800512a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10d      	bne.n	8005108 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	43da      	mvns	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	e00c      	b.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	43da      	mvns	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	429a      	cmp	r2, r3
 8005126:	d0b6      	beq.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005140:	e051      	b.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005150:	d123      	bne.n	800519a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005160:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800516a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e046      	b.n	8005228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d021      	beq.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fe f8a3 	bl	80032ec <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f043 0220 	orr.w	r2, r3, #32
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e020      	b.n	8005228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10c      	bne.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	43da      	mvns	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e00b      	b.n	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	43da      	mvns	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d18d      	bne.n	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800523c:	e02d      	b.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f88d 	bl	800535e <I2C_IsAcknowledgeFailed>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e02d      	b.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d021      	beq.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005256:	f7fe f849 	bl	80032ec <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	d302      	bcc.n	800526c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d116      	bne.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e007      	b.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d1ca      	bne.n	800523e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052be:	e042      	b.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d119      	bne.n	8005302 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0210 	mvn.w	r2, #16
 80052d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e029      	b.n	8005356 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fd fff3 	bl	80032ec <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d116      	bne.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e007      	b.n	8005356 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d1b5      	bne.n	80052c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005374:	d11b      	bne.n	80053ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800537e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e267      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d075      	beq.n	80054c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053da:	4b88      	ldr	r3, [pc, #544]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d00c      	beq.n	8005400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4b85      	ldr	r3, [pc, #532]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d112      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f2:	4b82      	ldr	r3, [pc, #520]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fe:	d10b      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	4b7e      	ldr	r3, [pc, #504]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d05b      	beq.n	80054c4 <HAL_RCC_OscConfig+0x108>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d157      	bne.n	80054c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e242      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0x74>
 8005422:	4b76      	ldr	r3, [pc, #472]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a75      	ldr	r2, [pc, #468]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e01d      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x98>
 800543a:	4b70      	ldr	r3, [pc, #448]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6f      	ldr	r2, [pc, #444]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b6d      	ldr	r3, [pc, #436]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6c      	ldr	r2, [pc, #432]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005454:	4b69      	ldr	r3, [pc, #420]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a68      	ldr	r2, [pc, #416]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a65      	ldr	r2, [pc, #404]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fd ff3a 	bl	80032ec <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547c:	f7fd ff36 	bl	80032ec <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e207      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b5b      	ldr	r3, [pc, #364]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0xc0>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd ff26 	bl	80032ec <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fd ff22 	bl	80032ec <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1f3      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b6:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0xe8>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d063      	beq.n	800559a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054d2:	4b4a      	ldr	r3, [pc, #296]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054de:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d11c      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ea:	4b44      	ldr	r3, [pc, #272]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d116      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f6:	4b41      	ldr	r3, [pc, #260]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e1c7      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4937      	ldr	r1, [pc, #220]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005522:	e03a      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCC_OscConfig+0x244>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fd fedb 	bl	80032ec <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553a:	f7fd fed7 	bl	80032ec <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e1a8      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554c:	4b2b      	ldr	r3, [pc, #172]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4925      	ldr	r1, [pc, #148]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]
 800556c:	e015      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <HAL_RCC_OscConfig+0x244>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fd feba 	bl	80032ec <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557c:	f7fd feb6 	bl	80032ec <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e187      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558e:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d036      	beq.n	8005614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_RCC_OscConfig+0x248>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fd fe9a 	bl	80032ec <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055bc:	f7fd fe96 	bl	80032ec <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e167      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80055d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x200>
 80055da:	e01b      	b.n	8005614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_RCC_OscConfig+0x248>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e2:	f7fd fe83 	bl	80032ec <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	e00e      	b.n	8005608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ea:	f7fd fe7f 	bl	80032ec <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d907      	bls.n	8005608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e150      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
 80055fc:	40023800 	.word	0x40023800
 8005600:	42470000 	.word	0x42470000
 8005604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800560a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ea      	bne.n	80055ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8097 	beq.w	8005750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005626:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10f      	bne.n	8005652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	4b7d      	ldr	r3, [pc, #500]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	4a7c      	ldr	r2, [pc, #496]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	; 0x40
 8005642:	4b7a      	ldr	r3, [pc, #488]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b77      	ldr	r3, [pc, #476]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d118      	bne.n	8005690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565e:	4b74      	ldr	r3, [pc, #464]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a73      	ldr	r2, [pc, #460]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566a:	f7fd fe3f 	bl	80032ec <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fd fe3b 	bl	80032ec <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e10c      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	4b6a      	ldr	r3, [pc, #424]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d106      	bne.n	80056a6 <HAL_RCC_OscConfig+0x2ea>
 8005698:	4b64      	ldr	r3, [pc, #400]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a63      	ldr	r2, [pc, #396]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	e01c      	b.n	80056e0 <HAL_RCC_OscConfig+0x324>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x30c>
 80056ae:	4b5f      	ldr	r3, [pc, #380]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a5e      	ldr	r2, [pc, #376]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a5b      	ldr	r2, [pc, #364]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
 80056c6:	e00b      	b.n	80056e0 <HAL_RCC_OscConfig+0x324>
 80056c8:	4b58      	ldr	r3, [pc, #352]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056cc:	4a57      	ldr	r2, [pc, #348]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	6713      	str	r3, [r2, #112]	; 0x70
 80056d4:	4b55      	ldr	r3, [pc, #340]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4a54      	ldr	r2, [pc, #336]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056da:	f023 0304 	bic.w	r3, r3, #4
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fd fe00 	bl	80032ec <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fd fdfc 	bl	80032ec <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0cb      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	4b49      	ldr	r3, [pc, #292]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ee      	beq.n	80056f0 <HAL_RCC_OscConfig+0x334>
 8005712:	e014      	b.n	800573e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005714:	f7fd fdea 	bl	80032ec <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fd fde6 	bl	80032ec <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0b5      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005732:	4b3e      	ldr	r3, [pc, #248]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1ee      	bne.n	800571c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005744:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	4a38      	ldr	r2, [pc, #224]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800574a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80a1 	beq.w	800589c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800575a:	4b34      	ldr	r3, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b08      	cmp	r3, #8
 8005764:	d05c      	beq.n	8005820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d141      	bne.n	80057f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576e:	4b31      	ldr	r3, [pc, #196]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fd fdba 	bl	80032ec <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577c:	f7fd fdb6 	bl	80032ec <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e087      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578e:	4b27      	ldr	r3, [pc, #156]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	3b01      	subs	r3, #1
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	491b      	ldr	r1, [pc, #108]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ca:	f7fd fd8f 	bl	80032ec <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d2:	f7fd fd8b 	bl	80032ec <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e05c      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x416>
 80057f0:	e054      	b.n	800589c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f2:	4b10      	ldr	r3, [pc, #64]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fd fd78 	bl	80032ec <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005800:	f7fd fd74 	bl	80032ec <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e045      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x444>
 800581e:	e03d      	b.n	800589c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d107      	bne.n	8005838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e038      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
 800582c:	40023800 	.word	0x40023800
 8005830:	40007000 	.word	0x40007000
 8005834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005838:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <HAL_RCC_OscConfig+0x4ec>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d028      	beq.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d121      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d11a      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800586e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005870:	4293      	cmp	r3, r2
 8005872:	d111      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	3b01      	subs	r3, #1
 8005882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d107      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800

080058ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0cc      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d90c      	bls.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d6:	4b63      	ldr	r3, [pc, #396]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0b8      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005900:	4b59      	ldr	r3, [pc, #356]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a58      	ldr	r2, [pc, #352]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800590a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005918:	4b53      	ldr	r3, [pc, #332]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4a52      	ldr	r2, [pc, #328]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	494d      	ldr	r1, [pc, #308]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d044      	beq.n	80059cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594a:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d119      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e07f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d003      	beq.n	800596a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005966:	2b03      	cmp	r3, #3
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e06f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e067      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598a:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4934      	ldr	r1, [pc, #208]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800599c:	f7fd fca6 	bl	80032ec <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	e00a      	b.n	80059ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fd fca2 	bl	80032ec <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e04f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ba:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 020c 	and.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d1eb      	bne.n	80059a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d20c      	bcs.n	80059f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e032      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4916      	ldr	r1, [pc, #88]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	490e      	ldr	r1, [pc, #56]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a32:	f000 f821 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005a36:	4602      	mov	r2, r0
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	490a      	ldr	r1, [pc, #40]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	5ccb      	ldrb	r3, [r1, r3]
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd fc06 	bl	8003264 <HAL_InitTick>

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40023c00 	.word	0x40023c00
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	0800ab14 	.word	0x0800ab14
 8005a70:	20000014 	.word	0x20000014
 8005a74:	20000018 	.word	0x20000018

08005a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a7c:	b094      	sub	sp, #80	; 0x50
 8005a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	647b      	str	r3, [r7, #68]	; 0x44
 8005a84:	2300      	movs	r3, #0
 8005a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a88:	2300      	movs	r3, #0
 8005a8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a90:	4b79      	ldr	r3, [pc, #484]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	f200 80e1 	bhi.w	8005c64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x34>
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aaa:	e0db      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ab0:	e0db      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ab2:	4b73      	ldr	r3, [pc, #460]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab6:	e0d8      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ab8:	4b6f      	ldr	r3, [pc, #444]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac2:	4b6d      	ldr	r3, [pc, #436]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d063      	beq.n	8005b96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ace:	4b6a      	ldr	r3, [pc, #424]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aea:	4622      	mov	r2, r4
 8005aec:	462b      	mov	r3, r5
 8005aee:	f04f 0000 	mov.w	r0, #0
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	0159      	lsls	r1, r3, #5
 8005af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005afc:	0150      	lsls	r0, r2, #5
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4621      	mov	r1, r4
 8005b04:	1a51      	subs	r1, r2, r1
 8005b06:	6139      	str	r1, [r7, #16]
 8005b08:	4629      	mov	r1, r5
 8005b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	018b      	lsls	r3, r1, #6
 8005b20:	4651      	mov	r1, sl
 8005b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b26:	4651      	mov	r1, sl
 8005b28:	018a      	lsls	r2, r1, #6
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b30:	4659      	mov	r1, fp
 8005b32:	eb63 0901 	sbc.w	r9, r3, r1
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b4a:	4690      	mov	r8, r2
 8005b4c:	4699      	mov	r9, r3
 8005b4e:	4623      	mov	r3, r4
 8005b50:	eb18 0303 	adds.w	r3, r8, r3
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	462b      	mov	r3, r5
 8005b58:	eb49 0303 	adc.w	r3, r9, r3
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	024b      	lsls	r3, r1, #9
 8005b6e:	4621      	mov	r1, r4
 8005b70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b74:	4621      	mov	r1, r4
 8005b76:	024a      	lsls	r2, r1, #9
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7e:	2200      	movs	r2, #0
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b88:	f7fa ff5c 	bl	8000a44 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b94:	e058      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b96:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	099b      	lsrs	r3, r3, #6
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	f04f 0100 	mov.w	r1, #0
 8005bbc:	0159      	lsls	r1, r3, #5
 8005bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bc2:	0150      	lsls	r0, r2, #5
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4641      	mov	r1, r8
 8005bca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bce:	4649      	mov	r1, r9
 8005bd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005be0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005be4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005be8:	ebb2 040a 	subs.w	r4, r2, sl
 8005bec:	eb63 050b 	sbc.w	r5, r3, fp
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	00eb      	lsls	r3, r5, #3
 8005bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bfe:	00e2      	lsls	r2, r4, #3
 8005c00:	4614      	mov	r4, r2
 8005c02:	461d      	mov	r5, r3
 8005c04:	4643      	mov	r3, r8
 8005c06:	18e3      	adds	r3, r4, r3
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	eb45 0303 	adc.w	r3, r5, r3
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c1e:	4629      	mov	r1, r5
 8005c20:	028b      	lsls	r3, r1, #10
 8005c22:	4621      	mov	r1, r4
 8005c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c28:	4621      	mov	r1, r4
 8005c2a:	028a      	lsls	r2, r1, #10
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c32:	2200      	movs	r2, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	61fa      	str	r2, [r7, #28]
 8005c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c3c:	f7fa ff02 	bl	8000a44 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4613      	mov	r3, r2
 8005c46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	3301      	adds	r3, #1
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3750      	adds	r7, #80	; 0x50
 8005c70:	46bd      	mov	sp, r7
 8005c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c76:	bf00      	nop
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	007a1200 	.word	0x007a1200

08005c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000014 	.word	0x20000014

08005c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ca0:	f7ff fff0 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0a9b      	lsrs	r3, r3, #10
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800ab24 	.word	0x0800ab24

08005cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e07b      	b.n	8005dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d108      	bne.n	8005cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce6:	d009      	beq.n	8005cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	61da      	str	r2, [r3, #28]
 8005cee:	e005      	b.n	8005cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fd f84a 	bl	8002db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d80:	ea42 0103 	orr.w	r1, r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	f003 0104 	and.w	r1, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f003 0210 	and.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b088      	sub	sp, #32
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_SPI_Transmit+0x22>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e126      	b.n	8006046 <HAL_SPI_Transmit+0x270>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e00:	f7fd fa74 	bl	80032ec <HAL_GetTick>
 8005e04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d002      	beq.n	8005e1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e16:	2302      	movs	r3, #2
 8005e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e1a:	e10b      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_SPI_Transmit+0x52>
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e2c:	e102      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2203      	movs	r2, #3
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	88fa      	ldrh	r2, [r7, #6]
 8005e46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e74:	d10f      	bne.n	8005e96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d007      	beq.n	8005eb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ebc:	d14b      	bne.n	8005f56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_SPI_Transmit+0xf6>
 8005ec6:	8afb      	ldrh	r3, [r7, #22]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d13e      	bne.n	8005f4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	881a      	ldrh	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ef0:	e02b      	b.n	8005f4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d112      	bne.n	8005f26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f24:	e011      	b.n	8005f4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f26:	f7fd f9e1 	bl	80032ec <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d803      	bhi.n	8005f3e <HAL_SPI_Transmit+0x168>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d102      	bne.n	8005f44 <HAL_SPI_Transmit+0x16e>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d102      	bne.n	8005f4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f48:	e074      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ce      	bne.n	8005ef2 <HAL_SPI_Transmit+0x11c>
 8005f54:	e04c      	b.n	8005ff0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SPI_Transmit+0x18e>
 8005f5e:	8afb      	ldrh	r3, [r7, #22]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d140      	bne.n	8005fe6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f8a:	e02c      	b.n	8005fe6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d113      	bne.n	8005fc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fc0:	e011      	b.n	8005fe6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc2:	f7fd f993 	bl	80032ec <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d803      	bhi.n	8005fda <HAL_SPI_Transmit+0x204>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d102      	bne.n	8005fe0 <HAL_SPI_Transmit+0x20a>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fe4:	e026      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1cd      	bne.n	8005f8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fbcb 	bl	8006790 <SPI_EndRxTxTransaction>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e000      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006044:	7ffb      	ldrb	r3, [r7, #31]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b088      	sub	sp, #32
 8006052:	af02      	add	r7, sp, #8
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606a:	d112      	bne.n	8006092 <HAL_SPI_Receive+0x44>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10e      	bne.n	8006092 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2204      	movs	r2, #4
 8006078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4613      	mov	r3, r2
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f8f1 	bl	8006270 <HAL_SPI_TransmitReceive>
 800608e:	4603      	mov	r3, r0
 8006090:	e0ea      	b.n	8006268 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_SPI_Receive+0x52>
 800609c:	2302      	movs	r3, #2
 800609e:	e0e3      	b.n	8006268 <HAL_SPI_Receive+0x21a>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a8:	f7fd f920 	bl	80032ec <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
 80060bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060be:	e0ca      	b.n	8006256 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Receive+0x7e>
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d0:	e0c1      	b.n	8006256 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2204      	movs	r2, #4
 80060d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006118:	d10f      	bne.n	800613a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006138:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d007      	beq.n	8006158 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006156:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d162      	bne.n	8006226 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006160:	e02e      	b.n	80061c0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	d115      	bne.n	800619c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f103 020c 	add.w	r2, r3, #12
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800619a:	e011      	b.n	80061c0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800619c:	f7fd f8a6 	bl	80032ec <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d803      	bhi.n	80061b4 <HAL_SPI_Receive+0x166>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d102      	bne.n	80061ba <HAL_SPI_Receive+0x16c>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061be:	e04a      	b.n	8006256 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1cb      	bne.n	8006162 <HAL_SPI_Receive+0x114>
 80061ca:	e031      	b.n	8006230 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d113      	bne.n	8006202 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	b292      	uxth	r2, r2
 80061e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006200:	e011      	b.n	8006226 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006202:	f7fd f873 	bl	80032ec <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d803      	bhi.n	800621a <HAL_SPI_Receive+0x1cc>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d102      	bne.n	8006220 <HAL_SPI_Receive+0x1d2>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006224:	e017      	b.n	8006256 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1cd      	bne.n	80061cc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fa45 	bl	80066c4 <SPI_EndRxTransaction>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
 8006252:	e000      	b.n	8006256 <HAL_SPI_Receive+0x208>
  }

error :
 8006254:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08c      	sub	sp, #48	; 0x30
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800627e:	2301      	movs	r3, #1
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x26>
 8006292:	2302      	movs	r3, #2
 8006294:	e18a      	b.n	80065ac <HAL_SPI_TransmitReceive+0x33c>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800629e:	f7fd f825 	bl	80032ec <HAL_GetTick>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d00f      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x70>
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c6:	d107      	bne.n	80062d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d103      	bne.n	80062d8 <HAL_SPI_TransmitReceive+0x68>
 80062d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d003      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062de:	e15b      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x82>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x82>
 80062ec:	887b      	ldrh	r3, [r7, #2]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062f8:	e14e      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b04      	cmp	r3, #4
 8006304:	d003      	beq.n	800630e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2205      	movs	r2, #5
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	887a      	ldrh	r2, [r7, #2]
 800631e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	887a      	ldrh	r2, [r7, #2]
 8006324:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	887a      	ldrh	r2, [r7, #2]
 8006330:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	887a      	ldrh	r2, [r7, #2]
 8006336:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d007      	beq.n	8006362 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636a:	d178      	bne.n	800645e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_SPI_TransmitReceive+0x10a>
 8006374:	8b7b      	ldrh	r3, [r7, #26]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d166      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	881a      	ldrh	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639e:	e053      	b.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d11b      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x176>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d016      	beq.n	80063e6 <HAL_SPI_TransmitReceive+0x176>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d113      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	881a      	ldrh	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	1c9a      	adds	r2, r3, #2
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d119      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x1b8>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	b292      	uxth	r2, r2
 800640a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	1c9a      	adds	r2, r3, #2
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006424:	2301      	movs	r3, #1
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006428:	f7fc ff60 	bl	80032ec <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006434:	429a      	cmp	r2, r3
 8006436:	d807      	bhi.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d003      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006446:	e0a7      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1a6      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x130>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1a1      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x130>
 800645c:	e07c      	b.n	8006558 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_SPI_TransmitReceive+0x1fc>
 8006466:	8b7b      	ldrh	r3, [r7, #26]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d16b      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006492:	e057      	b.n	8006544 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d11c      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x26c>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d017      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x26c>
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d114      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	7812      	ldrb	r2, [r2, #0]
 80064be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d119      	bne.n	800651e <HAL_SPI_TransmitReceive+0x2ae>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d014      	beq.n	800651e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800651a:	2301      	movs	r3, #1
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800651e:	f7fc fee5 	bl	80032ec <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800652a:	429a      	cmp	r2, r3
 800652c:	d803      	bhi.n	8006536 <HAL_SPI_TransmitReceive+0x2c6>
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d102      	bne.n	800653c <HAL_SPI_TransmitReceive+0x2cc>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006542:	e029      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1a2      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x224>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d19d      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f917 	bl	8006790 <SPI_EndRxTxTransaction>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d006      	beq.n	8006576 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006574:	e010      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	e000      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3730      	adds	r7, #48	; 0x30
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	4613      	mov	r3, r2
 80065c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065c4:	f7fc fe92 	bl	80032ec <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	4413      	add	r3, r2
 80065d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065d4:	f7fc fe8a 	bl	80032ec <HAL_GetTick>
 80065d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065da:	4b39      	ldr	r3, [pc, #228]	; (80066c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	015b      	lsls	r3, r3, #5
 80065e0:	0d1b      	lsrs	r3, r3, #20
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
 80065e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ea:	e054      	b.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d050      	beq.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065f4:	f7fc fe7a 	bl	80032ec <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	429a      	cmp	r2, r3
 8006602:	d902      	bls.n	800660a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d13d      	bne.n	8006686 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006622:	d111      	bne.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662c:	d004      	beq.n	8006638 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006636:	d107      	bne.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006650:	d10f      	bne.n	8006672 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e017      	b.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	3b01      	subs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d19b      	bne.n	80065ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000014 	.word	0x20000014

080066c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d111      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d004      	beq.n	80066ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ec:	d107      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006706:	d12a      	bne.n	800675e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d012      	beq.n	8006738 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff ff49 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02d      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e026      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	2101      	movs	r1, #1
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff ff36 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01a      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f043 0220 	orr.w	r2, r3, #32
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e013      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	2101      	movs	r1, #1
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff ff23 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e000      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <SPI_EndRxTxTransaction+0x7c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <SPI_EndRxTxTransaction+0x80>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	0d5b      	lsrs	r3, r3, #21
 80067a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ba:	d112      	bne.n	80067e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff fef4 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e00f      	b.n	8006802 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d0f2      	beq.n	80067e2 <SPI_EndRxTxTransaction+0x52>
 80067fc:	e000      	b.n	8006800 <SPI_EndRxTxTransaction+0x70>
        break;
 80067fe:	bf00      	nop
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000014 	.word	0x20000014
 8006810:	165e9f81 	.word	0x165e9f81

08006814 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e034      	b.n	8006894 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7fa fdd8 	bl	80013f4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3308      	adds	r3, #8
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f001 f860 	bl	8007914 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	461a      	mov	r2, r3
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	f001 f8aa 	bl	80079b8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6858      	ldr	r0, [r3, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	f001 f8df 	bl	8007a34 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	6892      	ldr	r2, [r2, #8]
 800687e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	6892      	ldr	r2, [r2, #8]
 800688a:	f041 0101 	orr.w	r1, r1, #1
 800688e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e041      	b.n	8006932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fc fbce 	bl	8003064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3304      	adds	r3, #4
 80068d8:	4619      	mov	r1, r3
 80068da:	4610      	mov	r0, r2
 80068dc:	f000 fc7a 	bl	80071d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	d001      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e04e      	b.n	80069f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a23      	ldr	r2, [pc, #140]	; (8006a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d022      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x80>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697e:	d01d      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x80>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d018      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x80>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x80>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00e      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x80>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d009      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x80>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x80>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d111      	bne.n	80069e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b06      	cmp	r3, #6
 80069cc:	d010      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	e007      	b.n	80069f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40010400 	.word	0x40010400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40001800 	.word	0x40001800

08006a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e041      	b.n	8006ab2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f839 	bl	8006aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fbba 	bl	80071d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_TIM_PWM_Start+0x24>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	e022      	b.n	8006b3a <HAL_TIM_PWM_Start+0x6a>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d109      	bne.n	8006b0e <HAL_TIM_PWM_Start+0x3e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	bf14      	ite	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	2300      	moveq	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	e015      	b.n	8006b3a <HAL_TIM_PWM_Start+0x6a>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d109      	bne.n	8006b28 <HAL_TIM_PWM_Start+0x58>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	e008      	b.n	8006b3a <HAL_TIM_PWM_Start+0x6a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e07c      	b.n	8006c3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_PWM_Start+0x82>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b50:	e013      	b.n	8006b7a <HAL_TIM_PWM_Start+0xaa>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d104      	bne.n	8006b62 <HAL_TIM_PWM_Start+0x92>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b60:	e00b      	b.n	8006b7a <HAL_TIM_PWM_Start+0xaa>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d104      	bne.n	8006b72 <HAL_TIM_PWM_Start+0xa2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b70:	e003      	b.n	8006b7a <HAL_TIM_PWM_Start+0xaa>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fe10 	bl	80077a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a2d      	ldr	r2, [pc, #180]	; (8006c44 <HAL_TIM_PWM_Start+0x174>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_TIM_PWM_Start+0xcc>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a2c      	ldr	r2, [pc, #176]	; (8006c48 <HAL_TIM_PWM_Start+0x178>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIM_PWM_Start+0xd0>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xd2>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a22      	ldr	r2, [pc, #136]	; (8006c44 <HAL_TIM_PWM_Start+0x174>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc8:	d01d      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <HAL_TIM_PWM_Start+0x17c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	; (8006c50 <HAL_TIM_PWM_Start+0x180>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <HAL_TIM_PWM_Start+0x184>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a16      	ldr	r2, [pc, #88]	; (8006c48 <HAL_TIM_PWM_Start+0x178>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_TIM_PWM_Start+0x188>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x136>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <HAL_TIM_PWM_Start+0x18c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d111      	bne.n	8006c2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b06      	cmp	r3, #6
 8006c16:	d010      	beq.n	8006c3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c28:	e007      	b.n	8006c3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40010000 	.word	0x40010000
 8006c48:	40010400 	.word	0x40010400
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40001800 	.word	0x40001800

08006c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d122      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d11b      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0202 	mvn.w	r2, #2
 8006c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa77 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8006ca8:	e005      	b.n	8006cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa69 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fa7a 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d122      	bne.n	8006d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d11b      	bne.n	8006d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0204 	mvn.w	r2, #4
 8006ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa4d 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa3f 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa50 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d122      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d11b      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0208 	mvn.w	r2, #8
 8006d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa23 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8006d50:	e005      	b.n	8006d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa15 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fa26 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b10      	cmp	r3, #16
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0210 	mvn.w	r2, #16
 8006d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9f9 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9eb 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f9fc 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10e      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d107      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0201 	mvn.w	r2, #1
 8006ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fb ff94 	bl	8002d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dee:	2b80      	cmp	r3, #128	; 0x80
 8006df0:	d10e      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b80      	cmp	r3, #128	; 0x80
 8006dfe:	d107      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fd78 	bl	8007900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d10e      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d107      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f9c1 	bl	80071be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d10e      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d107      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0220 	mvn.w	r2, #32
 8006e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fd42 	bl	80078ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e0ae      	b.n	8006fec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b0c      	cmp	r3, #12
 8006e9a:	f200 809f 	bhi.w	8006fdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006fdd 	.word	0x08006fdd
 8006eac:	08006fdd 	.word	0x08006fdd
 8006eb0:	08006fdd 	.word	0x08006fdd
 8006eb4:	08006f19 	.word	0x08006f19
 8006eb8:	08006fdd 	.word	0x08006fdd
 8006ebc:	08006fdd 	.word	0x08006fdd
 8006ec0:	08006fdd 	.word	0x08006fdd
 8006ec4:	08006f5b 	.word	0x08006f5b
 8006ec8:	08006fdd 	.word	0x08006fdd
 8006ecc:	08006fdd 	.word	0x08006fdd
 8006ed0:	08006fdd 	.word	0x08006fdd
 8006ed4:	08006f9b 	.word	0x08006f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fa18 	bl	8007314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0208 	orr.w	r2, r2, #8
 8006ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0204 	bic.w	r2, r2, #4
 8006f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6999      	ldr	r1, [r3, #24]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	619a      	str	r2, [r3, #24]
      break;
 8006f16:	e064      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fa68 	bl	80073f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6999      	ldr	r1, [r3, #24]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	021a      	lsls	r2, r3, #8
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	619a      	str	r2, [r3, #24]
      break;
 8006f58:	e043      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fabd 	bl	80074e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0208 	orr.w	r2, r2, #8
 8006f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0204 	bic.w	r2, r2, #4
 8006f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	61da      	str	r2, [r3, #28]
      break;
 8006f98:	e023      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fb11 	bl	80075c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69d9      	ldr	r1, [r3, #28]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	021a      	lsls	r2, r3, #8
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	61da      	str	r2, [r3, #28]
      break;
 8006fda:	e002      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_TIM_ConfigClockSource+0x1c>
 800700c:	2302      	movs	r3, #2
 800700e:	e0b4      	b.n	800717a <HAL_TIM_ConfigClockSource+0x186>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800702e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007048:	d03e      	beq.n	80070c8 <HAL_TIM_ConfigClockSource+0xd4>
 800704a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704e:	f200 8087 	bhi.w	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007056:	f000 8086 	beq.w	8007166 <HAL_TIM_ConfigClockSource+0x172>
 800705a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705e:	d87f      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007060:	2b70      	cmp	r3, #112	; 0x70
 8007062:	d01a      	beq.n	800709a <HAL_TIM_ConfigClockSource+0xa6>
 8007064:	2b70      	cmp	r3, #112	; 0x70
 8007066:	d87b      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007068:	2b60      	cmp	r3, #96	; 0x60
 800706a:	d050      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x11a>
 800706c:	2b60      	cmp	r3, #96	; 0x60
 800706e:	d877      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007070:	2b50      	cmp	r3, #80	; 0x50
 8007072:	d03c      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0xfa>
 8007074:	2b50      	cmp	r3, #80	; 0x50
 8007076:	d873      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d058      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x13a>
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d86f      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007080:	2b30      	cmp	r3, #48	; 0x30
 8007082:	d064      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 8007084:	2b30      	cmp	r3, #48	; 0x30
 8007086:	d86b      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007088:	2b20      	cmp	r3, #32
 800708a:	d060      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 800708c:	2b20      	cmp	r3, #32
 800708e:	d867      	bhi.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d05c      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 8007094:	2b10      	cmp	r3, #16
 8007096:	d05a      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x15a>
 8007098:	e062      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6899      	ldr	r1, [r3, #8]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f000 fb5d 	bl	8007768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	609a      	str	r2, [r3, #8]
      break;
 80070c6:	e04f      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	6899      	ldr	r1, [r3, #8]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f000 fb46 	bl	8007768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070ea:	609a      	str	r2, [r3, #8]
      break;
 80070ec:	e03c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 faba 	bl	8007674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2150      	movs	r1, #80	; 0x50
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fb13 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 800710c:	e02c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	461a      	mov	r2, r3
 800711c:	f000 fad9 	bl	80076d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2160      	movs	r1, #96	; 0x60
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fb03 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 800712c:	e01c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6859      	ldr	r1, [r3, #4]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	461a      	mov	r2, r3
 800713c:	f000 fa9a 	bl	8007674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2140      	movs	r1, #64	; 0x40
 8007146:	4618      	mov	r0, r3
 8007148:	f000 faf3 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 800714c:	e00c      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f000 faea 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 800715e:	e003      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
      break;
 8007164:	e000      	b.n	8007168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a40      	ldr	r2, [pc, #256]	; (80072e8 <TIM_Base_SetConfig+0x114>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d013      	beq.n	8007214 <TIM_Base_SetConfig+0x40>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f2:	d00f      	beq.n	8007214 <TIM_Base_SetConfig+0x40>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a3d      	ldr	r2, [pc, #244]	; (80072ec <TIM_Base_SetConfig+0x118>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00b      	beq.n	8007214 <TIM_Base_SetConfig+0x40>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a3c      	ldr	r2, [pc, #240]	; (80072f0 <TIM_Base_SetConfig+0x11c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d007      	beq.n	8007214 <TIM_Base_SetConfig+0x40>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a3b      	ldr	r2, [pc, #236]	; (80072f4 <TIM_Base_SetConfig+0x120>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_Base_SetConfig+0x40>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a3a      	ldr	r2, [pc, #232]	; (80072f8 <TIM_Base_SetConfig+0x124>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d108      	bne.n	8007226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a2f      	ldr	r2, [pc, #188]	; (80072e8 <TIM_Base_SetConfig+0x114>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d02b      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007234:	d027      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <TIM_Base_SetConfig+0x118>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d023      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a2b      	ldr	r2, [pc, #172]	; (80072f0 <TIM_Base_SetConfig+0x11c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d01f      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <TIM_Base_SetConfig+0x120>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d01b      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <TIM_Base_SetConfig+0x124>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d017      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a28      	ldr	r2, [pc, #160]	; (80072fc <TIM_Base_SetConfig+0x128>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a27      	ldr	r2, [pc, #156]	; (8007300 <TIM_Base_SetConfig+0x12c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00f      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a26      	ldr	r2, [pc, #152]	; (8007304 <TIM_Base_SetConfig+0x130>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00b      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a25      	ldr	r2, [pc, #148]	; (8007308 <TIM_Base_SetConfig+0x134>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d007      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a24      	ldr	r2, [pc, #144]	; (800730c <TIM_Base_SetConfig+0x138>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_Base_SetConfig+0xb2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a23      	ldr	r2, [pc, #140]	; (8007310 <TIM_Base_SetConfig+0x13c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d108      	bne.n	8007298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a0a      	ldr	r2, [pc, #40]	; (80072e8 <TIM_Base_SetConfig+0x114>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d003      	beq.n	80072cc <TIM_Base_SetConfig+0xf8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <TIM_Base_SetConfig+0x124>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d103      	bne.n	80072d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	615a      	str	r2, [r3, #20]
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40000c00 	.word	0x40000c00
 80072f8:	40010400 	.word	0x40010400
 80072fc:	40014000 	.word	0x40014000
 8007300:	40014400 	.word	0x40014400
 8007304:	40014800 	.word	0x40014800
 8007308:	40001800 	.word	0x40001800
 800730c:	40001c00 	.word	0x40001c00
 8007310:	40002000 	.word	0x40002000

08007314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f023 0201 	bic.w	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f023 0302 	bic.w	r3, r3, #2
 800735c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a20      	ldr	r2, [pc, #128]	; (80073ec <TIM_OC1_SetConfig+0xd8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_OC1_SetConfig+0x64>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <TIM_OC1_SetConfig+0xdc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d10c      	bne.n	8007392 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f023 0308 	bic.w	r3, r3, #8
 800737e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f023 0304 	bic.w	r3, r3, #4
 8007390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a15      	ldr	r2, [pc, #84]	; (80073ec <TIM_OC1_SetConfig+0xd8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_OC1_SetConfig+0x8e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <TIM_OC1_SetConfig+0xdc>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d111      	bne.n	80073c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	621a      	str	r2, [r3, #32]
}
 80073e0:	bf00      	nop
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40010400 	.word	0x40010400

080073f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f023 0210 	bic.w	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	021b      	lsls	r3, r3, #8
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f023 0320 	bic.w	r3, r3, #32
 800743e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a22      	ldr	r2, [pc, #136]	; (80074d8 <TIM_OC2_SetConfig+0xe4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_OC2_SetConfig+0x68>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a21      	ldr	r2, [pc, #132]	; (80074dc <TIM_OC2_SetConfig+0xe8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d10d      	bne.n	8007478 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <TIM_OC2_SetConfig+0xe4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d003      	beq.n	8007488 <TIM_OC2_SetConfig+0x94>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a16      	ldr	r2, [pc, #88]	; (80074dc <TIM_OC2_SetConfig+0xe8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d113      	bne.n	80074b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800748e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40010400 	.word	0x40010400

080074e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a21      	ldr	r2, [pc, #132]	; (80075c0 <TIM_OC3_SetConfig+0xe0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_OC3_SetConfig+0x66>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a20      	ldr	r2, [pc, #128]	; (80075c4 <TIM_OC3_SetConfig+0xe4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d10d      	bne.n	8007562 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800754c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <TIM_OC3_SetConfig+0xe0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_OC3_SetConfig+0x92>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a15      	ldr	r2, [pc, #84]	; (80075c4 <TIM_OC3_SetConfig+0xe4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d113      	bne.n	800759a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	621a      	str	r2, [r3, #32]
}
 80075b4:	bf00      	nop
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40010400 	.word	0x40010400

080075c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	021b      	lsls	r3, r3, #8
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	031b      	lsls	r3, r3, #12
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a12      	ldr	r2, [pc, #72]	; (800766c <TIM_OC4_SetConfig+0xa4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_OC4_SetConfig+0x68>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a11      	ldr	r2, [pc, #68]	; (8007670 <TIM_OC4_SetConfig+0xa8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d109      	bne.n	8007644 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	019b      	lsls	r3, r3, #6
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	621a      	str	r2, [r3, #32]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40010000 	.word	0x40010000
 8007670:	40010400 	.word	0x40010400

08007674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 030a 	bic.w	r3, r3, #10
 80076b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f023 0210 	bic.w	r2, r3, #16
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	031b      	lsls	r3, r3, #12
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800770e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	f043 0307 	orr.w	r3, r3, #7
 8007754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	609a      	str	r2, [r3, #8]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	431a      	orrs	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	609a      	str	r2, [r3, #8]
}
 800779c:	bf00      	nop
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2201      	movs	r2, #1
 80077bc:	fa02 f303 	lsl.w	r3, r2, r3
 80077c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1a      	ldr	r2, [r3, #32]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	401a      	ands	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	fa01 f303 	lsl.w	r3, r1, r3
 80077e0:	431a      	orrs	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	621a      	str	r2, [r3, #32]
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007808:	2302      	movs	r3, #2
 800780a:	e05a      	b.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a21      	ldr	r2, [pc, #132]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d022      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007858:	d01d      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d018      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1a      	ldr	r2, [pc, #104]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a17      	ldr	r2, [pc, #92]	; (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d10c      	bne.n	80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800
 80078dc:	40000c00 	.word	0x40000c00
 80078e0:	40010400 	.word	0x40010400
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40001800 	.word	0x40001800

080078ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <FSMC_NORSRAM_Init+0xa0>)
 8007932:	4013      	ands	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800793e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007944:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800794a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007950:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007956:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800795c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007962:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007968:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800796e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007974:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800797a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007980:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d103      	bne.n	8007998 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007996:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	fff00080 	.word	0xfff00080

080079b8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80079da:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079e6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079ee:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80079f6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a00:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	3b02      	subs	r3, #2
 8007a08:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007a0a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a10:	4313      	orrs	r3, r2
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6979      	ldr	r1, [r7, #20]
 8007a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a4c:	d122      	bne.n	8007a94 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4b15      	ldr	r3, [pc, #84]	; (8007ab0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a6a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a72:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a7a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a80:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6979      	ldr	r1, [r7, #20]
 8007a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a92:	e005      	b.n	8007aa0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	cff00000 	.word	0xcff00000

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <__libc_init_array>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	4d0d      	ldr	r5, [pc, #52]	; (8007afc <__libc_init_array+0x38>)
 8007ac8:	4c0d      	ldr	r4, [pc, #52]	; (8007b00 <__libc_init_array+0x3c>)
 8007aca:	1b64      	subs	r4, r4, r5
 8007acc:	10a4      	asrs	r4, r4, #2
 8007ace:	2600      	movs	r6, #0
 8007ad0:	42a6      	cmp	r6, r4
 8007ad2:	d109      	bne.n	8007ae8 <__libc_init_array+0x24>
 8007ad4:	4d0b      	ldr	r5, [pc, #44]	; (8007b04 <__libc_init_array+0x40>)
 8007ad6:	4c0c      	ldr	r4, [pc, #48]	; (8007b08 <__libc_init_array+0x44>)
 8007ad8:	f000 f818 	bl	8007b0c <_init>
 8007adc:	1b64      	subs	r4, r4, r5
 8007ade:	10a4      	asrs	r4, r4, #2
 8007ae0:	2600      	movs	r6, #0
 8007ae2:	42a6      	cmp	r6, r4
 8007ae4:	d105      	bne.n	8007af2 <__libc_init_array+0x2e>
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aec:	4798      	blx	r3
 8007aee:	3601      	adds	r6, #1
 8007af0:	e7ee      	b.n	8007ad0 <__libc_init_array+0xc>
 8007af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af6:	4798      	blx	r3
 8007af8:	3601      	adds	r6, #1
 8007afa:	e7f2      	b.n	8007ae2 <__libc_init_array+0x1e>
 8007afc:	0800ab3c 	.word	0x0800ab3c
 8007b00:	0800ab3c 	.word	0x0800ab3c
 8007b04:	0800ab3c 	.word	0x0800ab3c
 8007b08:	0800ab40 	.word	0x0800ab40

08007b0c <_init>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr

08007b18 <_fini>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr
