
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ffc  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a724  0800a724  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800a724  0800a724  0001a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a72c  0800a72c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800a734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          000002bc  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002dc  200002dc  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   000157fa  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d75  00000000  00000000  0003588d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001440  00000000  00000000  00039608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f95  00000000  00000000  0003aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254ca  00000000  00000000  0003b9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c59f  00000000  00000000  00060ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc643  00000000  00000000  0007d446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005354  00000000  00000000  00159a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0015ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007710 	.word	0x08007710

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08007710 	.word	0x08007710

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d14:	4a3d      	ldr	r2, [pc, #244]	; (8000e0c <MX_ADC1_Init+0x10c>)
 8000d16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d18:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d2a:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d38:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3e:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d40:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <MX_ADC1_Init+0x110>)
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5e:	482a      	ldr	r0, [pc, #168]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d60:	f002 f8f6 	bl	8002f50 <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f001 fc97 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4822      	ldr	r0, [pc, #136]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d80:	f002 fa58 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d8a:	f001 fc87 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d8e:	2309      	movs	r3, #9
 8000d90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481b      	ldr	r0, [pc, #108]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000d9c:	f002 fa4a 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000da6:	f001 fc79 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000daa:	230a      	movs	r3, #10
 8000dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000dae:	2303      	movs	r3, #3
 8000db0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	4619      	mov	r1, r3
 8000db6:	4814      	ldr	r0, [pc, #80]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000db8:	f002 fa3c 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000dc2:	f001 fc6b 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000dd4:	f002 fa2e 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000dde:	f001 fc5d 	bl	800269c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000de2:	230c      	movs	r3, #12
 8000de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000de6:	2305      	movs	r3, #5
 8000de8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_ADC1_Init+0x108>)
 8000df0:	f002 fa20 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000dfa:	f001 fc4f 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000003c 	.word	0x2000003c
 8000e0c:	40012000 	.word	0x40012000
 8000e10:	0f000001 	.word	0x0f000001

08000e14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a3c      	ldr	r2, [pc, #240]	; (8000f24 <HAL_ADC_MspInit+0x110>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d171      	bne.n	8000f1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a3a      	ldr	r2, [pc, #232]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a2c      	ldr	r2, [pc, #176]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4823      	ldr	r0, [pc, #140]	; (8000f2c <HAL_ADC_MspInit+0x118>)
 8000e9e:	f003 f8eb 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481e      	ldr	r0, [pc, #120]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000eb6:	f003 f8df 	bl	8004078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <HAL_ADC_MspInit+0x124>)
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000f00:	f002 fd4a 	bl	8003998 <HAL_DMA_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f0a:	f001 fbc7 	bl	800269c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40012000 	.word	0x40012000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020400 	.word	0x40020400
 8000f34:	20000084 	.word	0x20000084
 8000f38:	40026410 	.word	0x40026410

08000f3c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2108      	movs	r1, #8
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <button_init+0x14>)
 8000f46:	f003 fa33 	bl	80043b0 <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <button_Scan>:

void button_Scan(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	482f      	ldr	r0, [pc, #188]	; (800101c <button_Scan+0xc8>)
 8000f60:	f003 fa26 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2108      	movs	r1, #8
 8000f68:	482c      	ldr	r0, [pc, #176]	; (800101c <button_Scan+0xc8>)
 8000f6a:	f003 fa21 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000f6e:	230a      	movs	r3, #10
 8000f70:	2202      	movs	r2, #2
 8000f72:	492b      	ldr	r1, [pc, #172]	; (8001020 <button_Scan+0xcc>)
 8000f74:	482b      	ldr	r0, [pc, #172]	; (8001024 <button_Scan+0xd0>)
 8000f76:	f004 fe6c 	bl	8005c52 <HAL_SPI_Receive>
	int button_index = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000; // 1000 0000 0000 0000
 8000f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f82:	817b      	strh	r3, [r7, #10]
	for(int i = 0; i < 16; i++){
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	e03f      	b.n	800100a <button_Scan+0xb6>
		if(i >= 0 && i <= 3){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db06      	blt.n	8000f9e <button_Scan+0x4a>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	dc03      	bgt.n	8000f9e <button_Scan+0x4a>
			button_index = i + 4; // Do theo schematic thì spi gửi ko giống như button trên mạch
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e018      	b.n	8000fd0 <button_Scan+0x7c>
		}else if(i >= 4 && i <= 7){ // -> Cần convert lại cho nó đúng với thứ tự mình muốn
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	dd07      	ble.n	8000fb4 <button_Scan+0x60>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	dc04      	bgt.n	8000fb4 <button_Scan+0x60>
			button_index = 7 - i;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f1c3 0307 	rsb	r3, r3, #7
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e00d      	b.n	8000fd0 <button_Scan+0x7c>
		}else if(i >= 8 && i <= 11){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dd06      	ble.n	8000fc8 <button_Scan+0x74>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0b      	cmp	r3, #11
 8000fbe:	dc03      	bgt.n	8000fc8 <button_Scan+0x74>
			button_index = i + 4;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e003      	b.n	8000fd0 <button_Scan+0x7c>
		} else {
			button_index = 23 - i;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f1c3 0317 	rsb	r3, r3, #23
 8000fce:	60fb      	str	r3, [r7, #12]
		}
		if(spi_button & mask){
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <button_Scan+0xcc>)
 8000fd2:	881a      	ldrh	r2, [r3, #0]
 8000fd4:	897b      	ldrh	r3, [r7, #10]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <button_Scan+0x96>
			button_count[button_index] = 0;
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <button_Scan+0xd4>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fe8:	e009      	b.n	8000ffe <button_Scan+0xaa>
		}else{
			button_count[button_index]++;
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <button_Scan+0xd4>)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <button_Scan+0xd4>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		if(spi_button & mask){
//			button_count[i] = 0;
//		}else{
//			button_count[i]++;
//		}
		mask = mask >> 1;
 8000ffe:	897b      	ldrh	r3, [r7, #10]
 8001000:	085b      	lsrs	r3, r3, #1
 8001002:	817b      	strh	r3, [r7, #10]
	for(int i = 0; i < 16; i++){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3301      	adds	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	ddbc      	ble.n	8000f8a <button_Scan+0x36>
	}
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020c00 	.word	0x40020c00
 8001020:	20000104 	.word	0x20000104
 8001024:	200001f0 	.word	0x200001f0
 8001028:	200000e4 	.word	0x200000e4

0800102c <isButtonUp>:

uint8_t isButtonUp(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	if(button_count[BTN_UP] == 1){
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <isButtonUp+0x1c>)
 8001032:	88db      	ldrh	r3, [r3, #6]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <isButtonUp+0x10>
        return 1;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <isButtonUp+0x12>
	}else{
        return 0;
 800103c:	2300      	movs	r3, #0
	}
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	200000e4 	.word	0x200000e4

0800104c <isButtonDown>:

uint8_t isButtonDown(){
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    if(button_count[BTN_DOWN] == 1){
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <isButtonDown+0x1c>)
 8001052:	89db      	ldrh	r3, [r3, #14]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <isButtonDown+0x10>
        return 1;
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <isButtonDown+0x12>
    }else{
        return 0;
 800105c:	2300      	movs	r3, #0
    }
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	200000e4 	.word	0x200000e4

0800106c <buzzer_init>:
#include "buzzer.h"

uint8_t current_duty_cycle = 0;
uint8_t duty_cycle = 0;

void buzzer_init(){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001070:	2100      	movs	r1, #0
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <buzzer_init+0x10>)
 8001074:	f005 fb2e 	bl	80066d4 <HAL_TIM_PWM_Start>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000290 	.word	0x20000290

08001080 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <buzzer_SetVolume+0x28>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, duty_cycle);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <buzzer_SetVolume+0x28>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <buzzer_SetVolume+0x2c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000107 	.word	0x20000107
 80010ac:	20000290 	.word	0x20000290

080010b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_DMA_Init+0x3c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <MX_DMA_Init+0x3c>)
 80010c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_DMA_Init+0x3c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2038      	movs	r0, #56	; 0x38
 80010d8:	f002 fc27 	bl	800392a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010dc:	2038      	movs	r0, #56	; 0x38
 80010de:	f002 fc40 	bl	8003962 <HAL_NVIC_EnableIRQ>

}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80010f4:	201e      	movs	r0, #30
 80010f6:	f001 fe47 	bl	8002d88 <DEC2BCD>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <ds3231_init+0x6c>)
 8001100:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001102:	2016      	movs	r0, #22
 8001104:	f001 fe40 	bl	8002d88 <DEC2BCD>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <ds3231_init+0x6c>)
 800110e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001110:	2015      	movs	r0, #21
 8001112:	f001 fe39 	bl	8002d88 <DEC2BCD>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <ds3231_init+0x6c>)
 800111c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800111e:	2006      	movs	r0, #6
 8001120:	f001 fe32 	bl	8002d88 <DEC2BCD>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <ds3231_init+0x6c>)
 800112a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800112c:	200f      	movs	r0, #15
 800112e:	f001 fe2b 	bl	8002d88 <DEC2BCD>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <ds3231_init+0x6c>)
 8001138:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800113a:	2009      	movs	r0, #9
 800113c:	f001 fe24 	bl	8002d88 <DEC2BCD>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <ds3231_init+0x6c>)
 8001146:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8001148:	2017      	movs	r0, #23
 800114a:	f001 fe1d 	bl	8002d88 <DEC2BCD>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b02      	ldr	r3, [pc, #8]	; (800115c <ds3231_init+0x6c>)
 8001154:	719a      	strb	r2, [r3, #6]
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000108 	.word	0x20000108

08001160 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
}

void ds3231_ReadTime(){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2307      	movs	r3, #7
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <ds3231_ReadTime+0xa4>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2200      	movs	r2, #0
 8001176:	21d0      	movs	r1, #208	; 0xd0
 8001178:	4823      	ldr	r0, [pc, #140]	; (8001208 <ds3231_ReadTime+0xa8>)
 800117a:	f003 fa77 	bl	800466c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <ds3231_ReadTime+0xa4>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fde6 	bl	8002d54 <BCD2DEC>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <ds3231_ReadTime+0xac>)
 800118e:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <ds3231_ReadTime+0xa4>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fddd 	bl	8002d54 <BCD2DEC>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <ds3231_ReadTime+0xb0>)
 80011a0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <ds3231_ReadTime+0xa4>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fdd4 	bl	8002d54 <BCD2DEC>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <ds3231_ReadTime+0xb4>)
 80011b2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <ds3231_ReadTime+0xa4>)
 80011b6:	78db      	ldrb	r3, [r3, #3]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fdcb 	bl	8002d54 <BCD2DEC>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <ds3231_ReadTime+0xb8>)
 80011c4:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <ds3231_ReadTime+0xa4>)
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fdc2 	bl	8002d54 <BCD2DEC>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <ds3231_ReadTime+0xbc>)
 80011d6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <ds3231_ReadTime+0xa4>)
 80011da:	795b      	ldrb	r3, [r3, #5]
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fdb9 	bl	8002d54 <BCD2DEC>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <ds3231_ReadTime+0xc0>)
 80011e8:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <ds3231_ReadTime+0xa4>)
 80011ec:	799b      	ldrb	r3, [r3, #6]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fdb0 	bl	8002d54 <BCD2DEC>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <ds3231_ReadTime+0xc4>)
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000108 	.word	0x20000108
 8001208:	2000016c 	.word	0x2000016c
 800120c:	20000111 	.word	0x20000111
 8001210:	20000110 	.word	0x20000110
 8001214:	2000010f 	.word	0x2000010f
 8001218:	20000113 	.word	0x20000113
 800121c:	20000112 	.word	0x20000112
 8001220:	20000114 	.word	0x20000114
 8001224:	20000115 	.word	0x20000115

08001228 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <MX_FSMC_Init+0xec>)
 8001256:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800125a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_FSMC_Init+0xec>)
 800125e:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <MX_FSMC_Init+0xf0>)
 8001260:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <MX_FSMC_Init+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <MX_FSMC_Init+0xec>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <MX_FSMC_Init+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001274:	4b27      	ldr	r3, [pc, #156]	; (8001314 <MX_FSMC_Init+0xec>)
 8001276:	2210      	movs	r2, #16
 8001278:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_FSMC_Init+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <MX_FSMC_Init+0xec>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <MX_FSMC_Init+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_FSMC_Init+0xec>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_FSMC_Init+0xec>)
 8001294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_FSMC_Init+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_FSMC_Init+0xec>)
 80012a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_FSMC_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_FSMC_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_FSMC_Init+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012ba:	230f      	movs	r3, #15
 80012bc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012be:	230f      	movs	r3, #15
 80012c0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012c2:	233c      	movs	r3, #60	; 0x3c
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012ca:	2310      	movs	r3, #16
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012ce:	2311      	movs	r3, #17
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012d6:	2308      	movs	r3, #8
 80012d8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012da:	230f      	movs	r3, #15
 80012dc:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80012de:	2309      	movs	r3, #9
 80012e0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012e6:	2310      	movs	r3, #16
 80012e8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012ea:	2311      	movs	r3, #17
 80012ec:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012f2:	463a      	mov	r2, r7
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_FSMC_Init+0xec>)
 80012fc:	f005 f88c 	bl	8006418 <HAL_SRAM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001306:	f001 f9c9 	bl	800269c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	; 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000118 	.word	0x20000118
 8001318:	a0000104 	.word	0xa0000104

0800131c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_FSMC_MspInit+0x88>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d131      	bne.n	800139c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_FSMC_MspInit+0x88>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_FSMC_MspInit+0x8c>)
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <HAL_FSMC_MspInit+0x8c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6393      	str	r3, [r2, #56]	; 0x38
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_FSMC_MspInit+0x8c>)
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800135a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800135e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800136c:	230c      	movs	r3, #12
 800136e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <HAL_FSMC_MspInit+0x90>)
 8001376:	f002 fe7f 	bl	8004078 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800137a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800137e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800138c:	230c      	movs	r3, #12
 800138e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <HAL_FSMC_MspInit+0x94>)
 8001396:	f002 fe6f 	bl	8004078 <HAL_GPIO_Init>
 800139a:	e000      	b.n	800139e <HAL_FSMC_MspInit+0x82>
    return;
 800139c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000168 	.word	0x20000168
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013bc:	f7ff ffae 	bl	800131c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <MX_GPIO_Init+0x1f4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a75      	ldr	r2, [pc, #468]	; (80015bc <MX_GPIO_Init+0x1f4>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <MX_GPIO_Init+0x1f4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	623b      	str	r3, [r7, #32]
 80013f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <MX_GPIO_Init+0x1f4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	4b68      	ldr	r3, [pc, #416]	; (80015bc <MX_GPIO_Init+0x1f4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a67      	ldr	r2, [pc, #412]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b65      	ldr	r3, [pc, #404]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a60      	ldr	r2, [pc, #384]	; (80015bc <MX_GPIO_Init+0x1f4>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a59      	ldr	r2, [pc, #356]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a52      	ldr	r2, [pc, #328]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b50      	ldr	r3, [pc, #320]	; (80015bc <MX_GPIO_Init+0x1f4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <MX_GPIO_Init+0x1f4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <MX_GPIO_Init+0x1f4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b45      	ldr	r3, [pc, #276]	; (80015bc <MX_GPIO_Init+0x1f4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a44      	ldr	r2, [pc, #272]	; (80015bc <MX_GPIO_Init+0x1f4>)
 80014ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <MX_GPIO_Init+0x1f4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2170      	movs	r1, #112	; 0x70
 80014c2:	483f      	ldr	r0, [pc, #252]	; (80015c0 <MX_GPIO_Init+0x1f8>)
 80014c4:	f002 ff74 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ce:	483d      	ldr	r0, [pc, #244]	; (80015c4 <MX_GPIO_Init+0x1fc>)
 80014d0:	f002 ff6e 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	483b      	ldr	r0, [pc, #236]	; (80015c8 <MX_GPIO_Init+0x200>)
 80014da:	f002 ff69 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e4:	4839      	ldr	r0, [pc, #228]	; (80015cc <MX_GPIO_Init+0x204>)
 80014e6:	f002 ff63 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2108      	movs	r1, #8
 80014ee:	4838      	ldr	r0, [pc, #224]	; (80015d0 <MX_GPIO_Init+0x208>)
 80014f0:	f002 ff5e 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014f4:	2370      	movs	r3, #112	; 0x70
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	482d      	ldr	r0, [pc, #180]	; (80015c0 <MX_GPIO_Init+0x1f8>)
 800150c:	f002 fdb4 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <MX_GPIO_Init+0x1fc>)
 800152a:	f002 fda5 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <MX_GPIO_Init+0x204>)
 8001542:	f002 fd99 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001546:	2330      	movs	r3, #48	; 0x30
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <MX_GPIO_Init+0x1fc>)
 800155a:	f002 fd8d 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800155e:	2340      	movs	r3, #64	; 0x40
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4814      	ldr	r0, [pc, #80]	; (80015c8 <MX_GPIO_Init+0x200>)
 8001576:	f002 fd7f 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <MX_GPIO_Init+0x204>)
 8001594:	f002 fd70 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001598:	2308      	movs	r3, #8
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <MX_GPIO_Init+0x208>)
 80015b0:	f002 fd62 	bl	8004078 <HAL_GPIO_Init>

}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C1_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C1_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C1_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C1_Init+0x50>)
 8001612:	f002 fee7 	bl	80043e4 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800161c:	f001 f83e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000016c 	.word	0x2000016c
 8001628:	40005400 	.word	0x40005400
 800162c:	000186a0 	.word	0x000186a0

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_I2C_MspInit+0x84>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12b      	bne.n	80016aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001672:	2312      	movs	r3, #18
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167e:	2304      	movs	r3, #4
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <HAL_I2C_MspInit+0x8c>)
 800168a:	f002 fcf5 	bl	8004078 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40005400 	.word	0x40005400
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020400 	.word	0x40020400

080016c0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <LCD_WR_REG+0x1c>)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	8013      	strh	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	600ffffe 	.word	0x600ffffe

080016e0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <LCD_WR_DATA+0x1c>)
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	8053      	strh	r3, [r2, #2]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	600ffffe 	.word	0x600ffffe

08001700 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <LCD_RD_DATA+0x20>)
 8001708:	885b      	ldrh	r3, [r3, #2]
 800170a:	b29b      	uxth	r3, r3
 800170c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	b29b      	uxth	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	600ffffe 	.word	0x600ffffe

08001724 <lcd_AddressSet>:

void lcd_AddressSet(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001742:	202a      	movs	r0, #42	; 0x2a
 8001744:	f7ff ffbc 	bl	80016c0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	b29b      	uxth	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ffc6 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ffc0 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffba 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ffb4 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001778:	202b      	movs	r0, #43	; 0x2b
 800177a:	f7ff ffa1 	bl	80016c0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ffab 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	b29b      	uxth	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ffa5 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001796:	883b      	ldrh	r3, [r7, #0]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	b29b      	uxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff9f 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017a2:	883b      	ldrh	r3, [r7, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff99 	bl	80016e0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017ae:	202c      	movs	r0, #44	; 0x2c
 80017b0:	f7ff ff86 	bl	80016c0 <LCD_WR_REG>
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}

080017bc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <lcd_Clear+0x60>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <lcd_Clear+0x60>)
 80017d0:	885b      	ldrh	r3, [r3, #2]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2100      	movs	r1, #0
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff ffa3 	bl	8001724 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	81fb      	strh	r3, [r7, #14]
 80017e2:	e011      	b.n	8001808 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	81bb      	strh	r3, [r7, #12]
 80017e8:	e006      	b.n	80017f8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff77 	bl	80016e0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017f2:	89bb      	ldrh	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	81bb      	strh	r3, [r7, #12]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <lcd_Clear+0x60>)
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	89ba      	ldrh	r2, [r7, #12]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3f3      	bcc.n	80017ea <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	3301      	adds	r3, #1
 8001806:	81fb      	strh	r3, [r7, #14]
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <lcd_Clear+0x60>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	89fa      	ldrh	r2, [r7, #14]
 800180e:	429a      	cmp	r2, r3
 8001810:	d3e8      	bcc.n	80017e4 <lcd_Clear+0x28>
		}
	}
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200001c0 	.word	0x200001c0

08001820 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x, uint16_t y, uint16_t color) // 1 điểm ảnh
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
 800182a:	460b      	mov	r3, r1
 800182c:	80bb      	strh	r3, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x, y, x, y);
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	88b9      	ldrh	r1, [r7, #4]
 8001838:	88f8      	ldrh	r0, [r7, #6]
 800183a:	f7ff ff73 	bl	8001724 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff4d 	bl	80016e0 <LCD_WR_DATA>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x, uint16_t y, uint8_t character, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode) // 1 ky tu size = 12 16 24 32, fc: mau chu, bc: mau nen, mode: hien nen
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	4604      	mov	r4, r0
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4623      	mov	r3, r4
 8001860:	80fb      	strh	r3, [r7, #6]
 8001862:	4603      	mov	r3, r0
 8001864:	80bb      	strh	r3, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	70fb      	strb	r3, [r7, #3]
 800186a:	4613      	mov	r3, r2
 800186c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800186e:	2300      	movs	r3, #0
 8001870:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001876:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29a      	uxth	r2, r3
 800189c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	fb12 f303 	smulbb	r3, r2, r3
 80018a6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	3b20      	subs	r3, #32
 80018ac:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	4413      	add	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29c      	uxth	r4, r3
 80018bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	88b9      	ldrh	r1, [r7, #4]
 80018ce:	88f8      	ldrh	r0, [r7, #6]
 80018d0:	4622      	mov	r2, r4
 80018d2:	f7ff ff27 	bl	8001724 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	827b      	strh	r3, [r7, #18]
 80018da:	e07a      	b.n	80019d2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80018dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d028      	beq.n	8001936 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80018e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e8:	2b10      	cmp	r3, #16
 80018ea:	d108      	bne.n	80018fe <lcd_ShowChar+0xae>
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	8a7b      	ldrh	r3, [r7, #18]
 80018f0:	493c      	ldr	r1, [pc, #240]	; (80019e4 <lcd_ShowChar+0x194>)
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	440a      	add	r2, r1
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	75fb      	strb	r3, [r7, #23]
 80018fc:	e01b      	b.n	8001936 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80018fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001902:	2b18      	cmp	r3, #24
 8001904:	d10b      	bne.n	800191e <lcd_ShowChar+0xce>
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	8a79      	ldrh	r1, [r7, #18]
 800190a:	4837      	ldr	r0, [pc, #220]	; (80019e8 <lcd_ShowChar+0x198>)
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4403      	add	r3, r0
 8001916:	440b      	add	r3, r1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	75fb      	strb	r3, [r7, #23]
 800191c:	e00b      	b.n	8001936 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800191e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001922:	2b20      	cmp	r3, #32
 8001924:	d15a      	bne.n	80019dc <lcd_ShowChar+0x18c>
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	8a7b      	ldrh	r3, [r7, #18]
 800192a:	4930      	ldr	r1, [pc, #192]	; (80019ec <lcd_ShowChar+0x19c>)
 800192c:	0192      	lsls	r2, r2, #6
 800192e:	440a      	add	r2, r1
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001936:	2300      	movs	r3, #0
 8001938:	75bb      	strb	r3, [r7, #22]
 800193a:	e044      	b.n	80019c6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800193c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001940:	2b00      	cmp	r3, #0
 8001942:	d120      	bne.n	8001986 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001944:	7dfa      	ldrb	r2, [r7, #23]
 8001946:	7dbb      	ldrb	r3, [r7, #22]
 8001948:	fa42 f303 	asr.w	r3, r2, r3
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <lcd_ShowChar+0x10e>
 8001954:	883b      	ldrh	r3, [r7, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fec2 	bl	80016e0 <LCD_WR_DATA>
 800195c:	e003      	b.n	8001966 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800195e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff febd 	bl	80016e0 <LCD_WR_DATA>
				m++;
 8001966:	7d7b      	ldrb	r3, [r7, #21]
 8001968:	3301      	adds	r3, #1
 800196a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800196c:	7d7b      	ldrb	r3, [r7, #21]
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	fbb3 f1f2 	udiv	r1, r3, r2
 8001974:	fb01 f202 	mul.w	r2, r1, r2
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d11f      	bne.n	80019c0 <lcd_ShowChar+0x170>
				{
					m=0;
 8001980:	2300      	movs	r3, #0
 8001982:	757b      	strb	r3, [r7, #21]
					break;
 8001984:	e022      	b.n	80019cc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001986:	7dfa      	ldrb	r2, [r7, #23]
 8001988:	7dbb      	ldrb	r3, [r7, #22]
 800198a:	fa42 f303 	asr.w	r3, r2, r3
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <lcd_ShowChar+0x152>
 8001996:	883a      	ldrh	r2, [r7, #0]
 8001998:	88b9      	ldrh	r1, [r7, #4]
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff3f 	bl	8001820 <lcd_DrawPoint>
				x++;
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	3301      	adds	r3, #1
 80019a6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	8a3b      	ldrh	r3, [r7, #16]
 80019ac:	1ad2      	subs	r2, r2, r3
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d105      	bne.n	80019c0 <lcd_ShowChar+0x170>
				{
					x=x0;
 80019b4:	8a3b      	ldrh	r3, [r7, #16]
 80019b6:	80fb      	strh	r3, [r7, #6]
					y++;
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	80bb      	strh	r3, [r7, #4]
					break;
 80019be:	e005      	b.n	80019cc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80019c0:	7dbb      	ldrb	r3, [r7, #22]
 80019c2:	3301      	adds	r3, #1
 80019c4:	75bb      	strb	r3, [r7, #22]
 80019c6:	7dbb      	ldrb	r3, [r7, #22]
 80019c8:	2b07      	cmp	r3, #7
 80019ca:	d9b7      	bls.n	800193c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80019cc:	8a7b      	ldrh	r3, [r7, #18]
 80019ce:	3301      	adds	r3, #1
 80019d0:	827b      	strh	r3, [r7, #18]
 80019d2:	8a7a      	ldrh	r2, [r7, #18]
 80019d4:	89bb      	ldrh	r3, [r7, #12]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d380      	bcc.n	80018dc <lcd_ShowChar+0x8c>
 80019da:	e000      	b.n	80019de <lcd_ShowChar+0x18e>
		else return;
 80019dc:	bf00      	nop
				}
			}
		}
	}
}
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	08007784 	.word	0x08007784
 80019e8:	08007d74 	.word	0x08007d74
 80019ec:	08008f44 	.word	0x08008f44

080019f0 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	4613      	mov	r3, r2
 80019fe:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a04:	e004      	b.n	8001a10 <mypow+0x20>
 8001a06:	79fa      	ldrb	r2, [r7, #7]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	71ba      	strb	r2, [r7, #6]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f5      	bne.n	8001a06 <mypow+0x16>
	return result;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x, uint16_t y, uint16_t num, uint8_t len, uint16_t fc, uint16_t bc, uint8_t sizey) //len: do dai cua so
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	4604      	mov	r4, r0
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	80fb      	strh	r3, [r7, #6]
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80bb      	strh	r3, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	807b      	strh	r3, [r7, #2]
 8001a42:	4613      	mov	r3, r2
 8001a44:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e059      	b.n	8001b0c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001a58:	887c      	ldrh	r4, [r7, #2]
 8001a5a:	787a      	ldrb	r2, [r7, #1]
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	200a      	movs	r0, #10
 8001a6a:	f7ff ffc1 	bl	80019f0 <mypow>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	fbb4 f1f3 	udiv	r1, r4, r3
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <lcd_ShowIntNum+0xf8>)
 8001a76:	fba3 2301 	umull	r2, r3, r3, r1
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	1aca      	subs	r2, r1, r3
 8001a86:	4613      	mov	r3, r2
 8001a88:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d121      	bne.n	8001ad4 <lcd_ShowIntNum+0xac>
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	787b      	ldrb	r3, [r7, #1]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	429a      	cmp	r2, r3
 8001a98:	da1c      	bge.n	8001ad4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001a9a:	7b3b      	ldrb	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d117      	bne.n	8001ad0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7b7b      	ldrb	r3, [r7, #13]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	fb12 f303 	smulbb	r3, r2, r3
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	8c3a      	ldrh	r2, [r7, #32]
 8001ab6:	88b9      	ldrh	r1, [r7, #4]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f7ff fec1 	bl	8001850 <lcd_ShowChar>
				continue;
 8001ace:	e01a      	b.n	8001b06 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	7b7b      	ldrb	r3, [r7, #13]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	fb12 f303 	smulbb	r3, r2, r3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	7b3b      	ldrb	r3, [r7, #12]
 8001aea:	3330      	adds	r3, #48	; 0x30
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	8c3c      	ldrh	r4, [r7, #32]
 8001af0:	88b9      	ldrh	r1, [r7, #4]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4623      	mov	r3, r4
 8001b02:	f7ff fea5 	bl	8001850 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	787b      	ldrb	r3, [r7, #1]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3a1      	bcc.n	8001a58 <lcd_ShowIntNum+0x30>
	}
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	cccccccd 	.word	0xcccccccd

08001b24 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x, uint16_t y, float num, uint8_t len, uint16_t fc, uint16_t bc, uint8_t sizey)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	81fb      	strh	r3, [r7, #14]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	81bb      	strh	r3, [r7, #12]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001b46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001b4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b52:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c2c <lcd_ShowFloatNum+0x108>
 8001b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5e:	ee17 3a90 	vmov	r3, s15
 8001b62:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
 8001b68:	e057      	b.n	8001c1a <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001b6a:	8abc      	ldrh	r4, [r7, #20]
 8001b6c:	79fa      	ldrb	r2, [r7, #7]
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	200a      	movs	r0, #10
 8001b7c:	f7ff ff38 	bl	80019f0 <mypow>
 8001b80:	4603      	mov	r3, r0
 8001b82:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <lcd_ShowFloatNum+0x10c>)
 8001b88:	fba3 2301 	umull	r2, r3, r3, r1
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	1aca      	subs	r2, r1, r3
 8001b98:	4613      	mov	r3, r2
 8001b9a:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001b9c:	7dfa      	ldrb	r2, [r7, #23]
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	3b02      	subs	r3, #2
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d11d      	bne.n	8001be2 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	3b02      	subs	r3, #2
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	7dbb      	ldrb	r3, [r7, #22]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	fb12 f303 	smulbb	r3, r2, r3
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b298      	uxth	r0, r3
 8001bbc:	88ba      	ldrh	r2, [r7, #4]
 8001bbe:	89b9      	ldrh	r1, [r7, #12]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	222e      	movs	r2, #46	; 0x2e
 8001bd2:	f7ff fe3d 	bl	8001850 <lcd_ShowChar>
			t++;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	3301      	adds	r3, #1
 8001be0:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	7dbb      	ldrb	r3, [r7, #22]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	fb12 f303 	smulbb	r3, r2, r3
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b298      	uxth	r0, r3
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	3330      	adds	r3, #48	; 0x30
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	88bc      	ldrh	r4, [r7, #4]
 8001bfe:	89b9      	ldrh	r1, [r7, #12]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4623      	mov	r3, r4
 8001c10:	f7ff fe1e 	bl	8001850 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	3301      	adds	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	7dfa      	ldrb	r2, [r7, #23]
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3a3      	bcc.n	8001b6a <lcd_ShowFloatNum+0x46>
	}
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	42c80000 	.word	0x42c80000
 8001c30:	cccccccd 	.word	0xcccccccd

08001c34 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) // Chinh huong man hinh
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <lcd_SetDir+0x44>)
 8001c50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c54:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <lcd_SetDir+0x44>)
 8001c58:	22f0      	movs	r2, #240	; 0xf0
 8001c5a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c5c:	e006      	b.n	8001c6c <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <lcd_SetDir+0x44>)
 8001c60:	22f0      	movs	r2, #240	; 0xf0
 8001c62:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <lcd_SetDir+0x44>)
 8001c66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c6a:	805a      	strh	r2, [r3, #2]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	200001c0 	.word	0x200001c0

08001c7c <lcd_init>:


void lcd_init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	48aa      	ldr	r0, [pc, #680]	; (8001f30 <lcd_init+0x2b4>)
 8001c88:	f002 fb92 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c90:	f001 f93a 	bl	8002f08 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9a:	48a5      	ldr	r0, [pc, #660]	; (8001f30 <lcd_init+0x2b4>)
 8001c9c:	f002 fb88 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca4:	f001 f930 	bl	8002f08 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff ffc3 	bl	8001c34 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001cae:	20d3      	movs	r0, #211	; 0xd3
 8001cb0:	f7ff fd06 	bl	80016c0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cb4:	f7ff fd24 	bl	8001700 <LCD_RD_DATA>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b9d      	ldr	r3, [pc, #628]	; (8001f34 <lcd_init+0x2b8>)
 8001cbe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cc0:	f7ff fd1e 	bl	8001700 <LCD_RD_DATA>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b9a      	ldr	r3, [pc, #616]	; (8001f34 <lcd_init+0x2b8>)
 8001cca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001ccc:	f7ff fd18 	bl	8001700 <LCD_RD_DATA>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <lcd_init+0x2b8>)
 8001cd6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cd8:	4b96      	ldr	r3, [pc, #600]	; (8001f34 <lcd_init+0x2b8>)
 8001cda:	889b      	ldrh	r3, [r3, #4]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b94      	ldr	r3, [pc, #592]	; (8001f34 <lcd_init+0x2b8>)
 8001ce2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001ce4:	f7ff fd0c 	bl	8001700 <LCD_RD_DATA>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <lcd_init+0x2b8>)
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <lcd_init+0x2b8>)
 8001cf6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001cf8:	20cf      	movs	r0, #207	; 0xcf
 8001cfa:	f7ff fce1 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fcee 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d04:	20c1      	movs	r0, #193	; 0xc1
 8001d06:	f7ff fceb 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d0a:	2030      	movs	r0, #48	; 0x30
 8001d0c:	f7ff fce8 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d10:	20ed      	movs	r0, #237	; 0xed
 8001d12:	f7ff fcd5 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d16:	2064      	movs	r0, #100	; 0x64
 8001d18:	f7ff fce2 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f7ff fcdf 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d22:	2012      	movs	r0, #18
 8001d24:	f7ff fcdc 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d28:	2081      	movs	r0, #129	; 0x81
 8001d2a:	f7ff fcd9 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d2e:	20e8      	movs	r0, #232	; 0xe8
 8001d30:	f7ff fcc6 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d34:	2085      	movs	r0, #133	; 0x85
 8001d36:	f7ff fcd3 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d3a:	2010      	movs	r0, #16
 8001d3c:	f7ff fcd0 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d40:	207a      	movs	r0, #122	; 0x7a
 8001d42:	f7ff fccd 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d46:	20cb      	movs	r0, #203	; 0xcb
 8001d48:	f7ff fcba 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d4c:	2039      	movs	r0, #57	; 0x39
 8001d4e:	f7ff fcc7 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d52:	202c      	movs	r0, #44	; 0x2c
 8001d54:	f7ff fcc4 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff fcc1 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d5e:	2034      	movs	r0, #52	; 0x34
 8001d60:	f7ff fcbe 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff fcbb 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d6a:	20f7      	movs	r0, #247	; 0xf7
 8001d6c:	f7ff fca8 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d70:	2020      	movs	r0, #32
 8001d72:	f7ff fcb5 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d76:	20ea      	movs	r0, #234	; 0xea
 8001d78:	f7ff fca2 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fcaf 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff fcac 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d88:	20c0      	movs	r0, #192	; 0xc0
 8001d8a:	f7ff fc99 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d8e:	201b      	movs	r0, #27
 8001d90:	f7ff fca6 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d94:	20c1      	movs	r0, #193	; 0xc1
 8001d96:	f7ff fc93 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fca0 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001da0:	20c5      	movs	r0, #197	; 0xc5
 8001da2:	f7ff fc8d 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001da6:	2030      	movs	r0, #48	; 0x30
 8001da8:	f7ff fc9a 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001dac:	2030      	movs	r0, #48	; 0x30
 8001dae:	f7ff fc97 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001db2:	20c7      	movs	r0, #199	; 0xc7
 8001db4:	f7ff fc84 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001db8:	20b7      	movs	r0, #183	; 0xb7
 8001dba:	f7ff fc91 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001dbe:	2036      	movs	r0, #54	; 0x36
 8001dc0:	f7ff fc7e 	bl	80016c0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001dc4:	2008      	movs	r0, #8
 8001dc6:	f7ff fc8b 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001dca:	203a      	movs	r0, #58	; 0x3a
 8001dcc:	f7ff fc78 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001dd0:	2055      	movs	r0, #85	; 0x55
 8001dd2:	f7ff fc85 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dd6:	20b1      	movs	r0, #177	; 0xb1
 8001dd8:	f7ff fc72 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fc7f 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001de2:	201a      	movs	r0, #26
 8001de4:	f7ff fc7c 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001de8:	20b6      	movs	r0, #182	; 0xb6
 8001dea:	f7ff fc69 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f7ff fc76 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001df4:	20a2      	movs	r0, #162	; 0xa2
 8001df6:	f7ff fc73 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001dfa:	20f2      	movs	r0, #242	; 0xf2
 8001dfc:	f7ff fc60 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fc6d 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e06:	2026      	movs	r0, #38	; 0x26
 8001e08:	f7ff fc5a 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff fc67 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e12:	20e0      	movs	r0, #224	; 0xe0
 8001e14:	f7ff fc54 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e18:	200f      	movs	r0, #15
 8001e1a:	f7ff fc61 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e1e:	202a      	movs	r0, #42	; 0x2a
 8001e20:	f7ff fc5e 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e24:	2028      	movs	r0, #40	; 0x28
 8001e26:	f7ff fc5b 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e2a:	2008      	movs	r0, #8
 8001e2c:	f7ff fc58 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e30:	200e      	movs	r0, #14
 8001e32:	f7ff fc55 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e36:	2008      	movs	r0, #8
 8001e38:	f7ff fc52 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e3c:	2054      	movs	r0, #84	; 0x54
 8001e3e:	f7ff fc4f 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e42:	20a9      	movs	r0, #169	; 0xa9
 8001e44:	f7ff fc4c 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e48:	2043      	movs	r0, #67	; 0x43
 8001e4a:	f7ff fc49 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f7ff fc46 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e54:	200f      	movs	r0, #15
 8001e56:	f7ff fc43 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff fc40 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fc3d 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff fc3a 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fc37 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e72:	20e1      	movs	r0, #225	; 0xe1
 8001e74:	f7ff fc24 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fc31 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e7e:	2015      	movs	r0, #21
 8001e80:	f7ff fc2e 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e84:	2017      	movs	r0, #23
 8001e86:	f7ff fc2b 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e8a:	2007      	movs	r0, #7
 8001e8c:	f7ff fc28 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e90:	2011      	movs	r0, #17
 8001e92:	f7ff fc25 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e96:	2006      	movs	r0, #6
 8001e98:	f7ff fc22 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e9c:	202b      	movs	r0, #43	; 0x2b
 8001e9e:	f7ff fc1f 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001ea2:	2056      	movs	r0, #86	; 0x56
 8001ea4:	f7ff fc1c 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ea8:	203c      	movs	r0, #60	; 0x3c
 8001eaa:	f7ff fc19 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001eae:	2005      	movs	r0, #5
 8001eb0:	f7ff fc16 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001eb4:	2010      	movs	r0, #16
 8001eb6:	f7ff fc13 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eba:	200f      	movs	r0, #15
 8001ebc:	f7ff fc10 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ec0:	203f      	movs	r0, #63	; 0x3f
 8001ec2:	f7ff fc0d 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ec6:	203f      	movs	r0, #63	; 0x3f
 8001ec8:	f7ff fc0a 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ecc:	200f      	movs	r0, #15
 8001ece:	f7ff fc07 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ed2:	202b      	movs	r0, #43	; 0x2b
 8001ed4:	f7ff fbf4 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff fc01 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fbfe 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff fbfb 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001eea:	203f      	movs	r0, #63	; 0x3f
 8001eec:	f7ff fbf8 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ef0:	202a      	movs	r0, #42	; 0x2a
 8001ef2:	f7ff fbe5 	bl	80016c0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fbf2 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff fbef 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fbec 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f08:	20ef      	movs	r0, #239	; 0xef
 8001f0a:	f7ff fbe9 	bl	80016e0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f0e:	2011      	movs	r0, #17
 8001f10:	f7ff fbd6 	bl	80016c0 <LCD_WR_REG>
	HAL_Delay(120);
 8001f14:	2078      	movs	r0, #120	; 0x78
 8001f16:	f000 fff7 	bl	8002f08 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f1a:	2029      	movs	r0, #41	; 0x29
 8001f1c:	f7ff fbd0 	bl	80016c0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f26:	4804      	ldr	r0, [pc, #16]	; (8001f38 <lcd_init+0x2bc>)
 8001f28:	f002 fa42 	bl	80043b0 <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020800 	.word	0x40020800
 8001f34:	200001c0 	.word	0x200001c0
 8001f38:	40020000 	.word	0x40020000

08001f3c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b08b      	sub	sp, #44	; 0x2c
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	60ba      	str	r2, [r7, #8]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	81fb      	strh	r3, [r7, #14]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	81bb      	strh	r3, [r7, #12]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f5a:	e048      	b.n	8001fee <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d145      	bne.n	8001fee <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f62:	89fa      	ldrh	r2, [r7, #14]
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <lcd_ShowStr+0xc4>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dc3f      	bgt.n	8001ff8 <lcd_ShowStr+0xbc>
 8001f78:	89ba      	ldrh	r2, [r7, #12]
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <lcd_ShowStr+0xc4>)
 8001f7c:	885b      	ldrh	r3, [r3, #2]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f84:	1acb      	subs	r3, r1, r3
 8001f86:	429a      	cmp	r2, r3
 8001f88:	dc36      	bgt.n	8001ff8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b80      	cmp	r3, #128	; 0x80
 8001f90:	d902      	bls.n	8001f98 <lcd_ShowStr+0x5c>
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
 8001f96:	e02a      	b.n	8001fee <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b0d      	cmp	r3, #13
 8001f9e:	d10b      	bne.n	8001fb8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001fa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	89bb      	ldrh	r3, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001fac:	8abb      	ldrh	r3, [r7, #20]
 8001fae:	81fb      	strh	r3, [r7, #14]
					str++;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	e017      	b.n	8001fe8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	88fc      	ldrh	r4, [r7, #6]
 8001fbe:	89b9      	ldrh	r1, [r7, #12]
 8001fc0:	89f8      	ldrh	r0, [r7, #14]
 8001fc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4623      	mov	r3, r4
 8001fd4:	f7ff fc3c 	bl	8001850 <lcd_ShowChar>
					x+=sizey/2;
 8001fd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	3301      	adds	r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1b2      	bne.n	8001f5c <lcd_ShowStr+0x20>
 8001ff6:	e000      	b.n	8001ffa <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ff8:	bf00      	nop
			}
		}
	}
}
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	200001c0 	.word	0x200001c0

08002004 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09}; // 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002008:	2201      	movs	r2, #1
 800200a:	2140      	movs	r1, #64	; 0x40
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <led7_init+0x14>)
 800200e:	f002 f9cf 	bl	80043b0 <HAL_GPIO_WritePin>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021800 	.word	0x40021800

0800201c <led7_Scan>:

void led7_Scan(){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002020:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <led7_Scan+0x104>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <led7_Scan+0x104>)
 800202a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <led7_Scan+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <led7_Scan+0x10c>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	b21a      	sxth	r2, r3
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <led7_Scan+0x104>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b21b      	sxth	r3, r3
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <led7_Scan+0x104>)
 8002046:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <led7_Scan+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d847      	bhi.n	80020e0 <led7_Scan+0xc4>
 8002050:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <led7_Scan+0x3c>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	08002069 	.word	0x08002069
 800205c:	08002087 	.word	0x08002087
 8002060:	080020a5 	.word	0x080020a5
 8002064:	080020c3 	.word	0x080020c3
	case 0:
		spi_buffer |= 0x00b0;
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <led7_Scan+0x104>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <led7_Scan+0x104>)
 8002074:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf; //1011
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <led7_Scan+0x104>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <led7_Scan+0x104>)
 8002082:	801a      	strh	r2, [r3, #0]
		break;
 8002084:	e02d      	b.n	80020e2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <led7_Scan+0x104>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <led7_Scan+0x104>)
 8002092:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf; //1101
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <led7_Scan+0x104>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	f023 0320 	bic.w	r3, r3, #32
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <led7_Scan+0x104>)
 80020a0:	801a      	strh	r2, [r3, #0]
		break;
 80020a2:	e01e      	b.n	80020e2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <led7_Scan+0x104>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <led7_Scan+0x104>)
 80020b0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef; //1110
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <led7_Scan+0x104>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	f023 0310 	bic.w	r3, r3, #16
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <led7_Scan+0x104>)
 80020be:	801a      	strh	r2, [r3, #0]
		break;
 80020c0:	e00f      	b.n	80020e2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <led7_Scan+0x104>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <led7_Scan+0x104>)
 80020ce:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f; //0111
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <led7_Scan+0x104>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <led7_Scan+0x104>)
 80020dc:	801a      	strh	r2, [r3, #0]
		break;
 80020de:	e000      	b.n	80020e2 <led7_Scan+0xc6>
	default:
		break;
 80020e0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <led7_Scan+0x108>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	425a      	negs	r2, r3
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	f002 0203 	and.w	r2, r2, #3
 80020f2:	bf58      	it	pl
 80020f4:	4253      	negpl	r3, r2
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <led7_Scan+0x108>)
 80020f8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2140      	movs	r1, #64	; 0x40
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <led7_Scan+0x110>)
 8002100:	f002 f956 	bl	80043b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002104:	2301      	movs	r3, #1
 8002106:	2202      	movs	r2, #2
 8002108:	4905      	ldr	r1, [pc, #20]	; (8002120 <led7_Scan+0x104>)
 800210a:	4809      	ldr	r0, [pc, #36]	; (8002130 <led7_Scan+0x114>)
 800210c:	f003 fc65 	bl	80059da <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002110:	2201      	movs	r2, #1
 8002112:	2140      	movs	r1, #64	; 0x40
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <led7_Scan+0x110>)
 8002116:	f002 f94b 	bl	80043b0 <HAL_GPIO_WritePin>
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000000e 	.word	0x2000000e
 8002124:	200001c8 	.word	0x200001c8
 8002128:	20000000 	.word	0x20000000
 800212c:	40021800 	.word	0x40021800
 8002130:	200001f0 	.word	0x200001f0

08002134 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0e      	blt.n	8002166 <led7_SetDigit+0x32>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b09      	cmp	r3, #9
 800214c:	dc0b      	bgt.n	8002166 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <led7_SetDigit+0x40>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	b2d9      	uxtb	r1, r3
 800215c:	4a06      	ldr	r2, [pc, #24]	; (8002178 <led7_SetDigit+0x44>)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	460a      	mov	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
	}
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000004 	.word	0x20000004
 8002178:	20000000 	.word	0x20000000

0800217c <led7_SetColon>:

void led7_SetColon(uint8_t status){
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <led7_SetColon+0x20>
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <led7_SetColon+0x3c>)
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	f023 0308 	bic.w	r3, r3, #8
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <led7_SetColon+0x3c>)
 8002198:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800219a:	e006      	b.n	80021aa <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <led7_SetColon+0x3c>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <led7_SetColon+0x3c>)
 80021a8:	801a      	strh	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	2000000e 	.word	0x2000000e

080021bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c0:	f000 fe30 	bl	8002e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c4:	f000 f852 	bl	800226c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c8:	f7ff f8fe 	bl	80013c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80021cc:	f7fe ff70 	bl	80010b0 <MX_DMA_Init>
  MX_SPI1_Init();
 80021d0:	f000 fbba 	bl	8002948 <MX_SPI1_Init>
  MX_FSMC_Init();
 80021d4:	f7ff f828 	bl	8001228 <MX_FSMC_Init>
  MX_I2C1_Init();
 80021d8:	f7ff f9fc 	bl	80015d4 <MX_I2C1_Init>
  MX_TIM13_Init();
 80021dc:	f000 fcf6 	bl	8002bcc <MX_TIM13_Init>
  MX_TIM2_Init();
 80021e0:	f000 fca8 	bl	8002b34 <MX_TIM2_Init>
  MX_ADC1_Init();
 80021e4:	f7fe fd8c 	bl	8000d00 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80021e8:	f000 f8aa 	bl	8002340 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(WHITE);
 80021ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021f0:	f7ff fae4 	bl	80017bc <lcd_Clear>
  while (1)
  {
	  if(flag_timer[LED7SEG_TIMER] == 1){
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <main+0xa4>)
 80021f6:	885b      	ldrh	r3, [r3, #2]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d114      	bne.n	8002226 <main+0x6a>
		  setTimer(LED7SEG_PERIOD, LED7SEG_TIMER);
 80021fc:	2101      	movs	r1, #1
 80021fe:	2005      	movs	r0, #5
 8002200:	f000 fb46 	bl	8002890 <setTimer>
		  led7_Scan();
 8002204:	f7ff ff0a 	bl	800201c <led7_Scan>
		  led7_SetColon(colon_status = !colon_status);
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <main+0xa8>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <main+0xa8>)
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <main+0xa8>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ffab 	bl	800217c <led7_SetColon>
	  }
	  if(flag_timer[LCD_TIMER] == 1){
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <main+0xa4>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <main+0x84>
		  setTimer(LCD_PERIOD, LCD_TIMER);
 800222e:	2100      	movs	r1, #0
 8002230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002234:	f000 fb2c 	bl	8002890 <setTimer>
		  led7_Update();
 8002238:	f000 f8a2 	bl	8002380 <led7_Update>
		  adc_Display();
 800223c:	f000 f96e 	bl	800251c <adc_Display>
	  }
	  if((flag_timer[BUZZER_TIMER] == 1) && (Humidity > 70)){
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <main+0xa4>)
 8002242:	889b      	ldrh	r3, [r3, #4]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d1d5      	bne.n	80021f4 <main+0x38>
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <main+0xac>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b46      	cmp	r3, #70	; 0x46
 800224e:	d9d1      	bls.n	80021f4 <main+0x38>
		  setTimer(BUZZER_PERIOD, BUZZER_TIMER);
 8002250:	2102      	movs	r1, #2
 8002252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002256:	f000 fb1b 	bl	8002890 <setTimer>
		  buzzer_On();
 800225a:	f000 fa13 	bl	8002684 <buzzer_On>
	  if(flag_timer[LED7SEG_TIMER] == 1){
 800225e:	e7c9      	b.n	80021f4 <main+0x38>
 8002260:	200001e0 	.word	0x200001e0
 8002264:	200001c6 	.word	0x200001c6
 8002268:	200001de 	.word	0x200001de

0800226c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b094      	sub	sp, #80	; 0x50
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	2230      	movs	r2, #48	; 0x30
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fa1c 	bl	80076b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <SystemClock_Config+0xcc>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <SystemClock_Config+0xcc>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <SystemClock_Config+0xcc>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	4b22      	ldr	r3, [pc, #136]	; (800233c <SystemClock_Config+0xd0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a21      	ldr	r2, [pc, #132]	; (800233c <SystemClock_Config+0xd0>)
 80022b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <SystemClock_Config+0xd0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	2302      	movs	r3, #2
 80022ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d0:	2310      	movs	r3, #16
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d4:	2302      	movs	r3, #2
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022dc:	2308      	movs	r3, #8
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022e0:	23a8      	movs	r3, #168	; 0xa8
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022e8:	2304      	movs	r3, #4
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ec:	f107 0320 	add.w	r3, r7, #32
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fe65 	bl	8004fc0 <HAL_RCC_OscConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022fc:	f000 f9ce 	bl	800269c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002300:	230f      	movs	r3, #15
 8002302:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800230c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002312:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002316:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2105      	movs	r1, #5
 800231e:	4618      	mov	r0, r3
 8002320:	f003 f8c6 	bl	80054b0 <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800232a:	f000 f9b7 	bl	800269c <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3750      	adds	r7, #80	; 0x50
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000

08002340 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	timer_init();
 8002344:	f000 fa9a 	bl	800287c <timer_init>
	ds3231_init();
 8002348:	f7fe fed2 	bl	80010f0 <ds3231_init>
	button_init();
 800234c:	f7fe fdf6 	bl	8000f3c <button_init>
	lcd_init();
 8002350:	f7ff fc94 	bl	8001c7c <lcd_init>
	sensor_init();
 8002354:	f000 f9a8 	bl	80026a8 <sensor_init>
	buzzer_init();
 8002358:	f7fe fe88 	bl	800106c <buzzer_init>
	led7_init();
 800235c:	f7ff fe52 	bl	8002004 <led7_init>
	setTimer(LCD_PERIOD, LCD_TIMER);
 8002360:	2100      	movs	r1, #0
 8002362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002366:	f000 fa93 	bl	8002890 <setTimer>
	setTimer(LED7SEG_PERIOD, LED7SEG_TIMER);
 800236a:	2101      	movs	r1, #1
 800236c:	2005      	movs	r0, #5
 800236e:	f000 fa8f 	bl	8002890 <setTimer>
	setTimer(BUZZER_PERIOD, BUZZER_TIMER);
 8002372:	2102      	movs	r1, #2
 8002374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002378:	f000 fa8a 	bl	8002890 <setTimer>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}

08002380 <led7_Update>:

void led7_Update(){
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	ds3231_ReadTime();
 8002384:	f7fe feec 	bl	8001160 <ds3231_ReadTime>
	led7_SetDigit(ds3231_hours/10, 0, 0);
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <led7_Update+0x80>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <led7_Update+0x84>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	08db      	lsrs	r3, r3, #3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff feca 	bl	8002134 <led7_SetDigit>
	led7_SetDigit(ds3231_hours%10, 1, 0);
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <led7_Update+0x80>)
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <led7_Update+0x84>)
 80023a6:	fba3 1302 	umull	r1, r3, r3, r2
 80023aa:	08d9      	lsrs	r1, r3, #3
 80023ac:	460b      	mov	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2200      	movs	r2, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff feb9 	bl	8002134 <led7_SetDigit>
	led7_SetDigit(ds3231_min/10, 2, 0);
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <led7_Update+0x88>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <led7_Update+0x84>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	2102      	movs	r1, #2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fead 	bl	8002134 <led7_SetDigit>
	led7_SetDigit(ds3231_min%10, 3, 0);
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <led7_Update+0x88>)
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <led7_Update+0x84>)
 80023e0:	fba3 1302 	umull	r1, r3, r3, r2
 80023e4:	08d9      	lsrs	r1, r3, #3
 80023e6:	460b      	mov	r3, r1
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2200      	movs	r2, #0
 80023f4:	2103      	movs	r1, #3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fe9c 	bl	8002134 <led7_SetDigit>
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	2000010f 	.word	0x2000010f
 8002404:	cccccccd 	.word	0xcccccccd
 8002408:	20000110 	.word	0x20000110

0800240c <button_Update>:

void button_Update(){
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	button_Scan();
 8002410:	f7fe fda0 	bl	8000f54 <button_Scan>
	if(isButtonUp()){
 8002414:	f7fe fe0a 	bl	800102c <isButtonUp>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00f      	beq.n	800243e <button_Update+0x32>
		current_duty_cycle = (current_duty_cycle + 1)%100;
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <button_Update+0x68>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <button_Update+0x6c>)
 8002426:	fb82 1203 	smull	r1, r2, r2, r3
 800242a:	1151      	asrs	r1, r2, #5
 800242c:	17da      	asrs	r2, r3, #31
 800242e:	1a8a      	subs	r2, r1, r2
 8002430:	2164      	movs	r1, #100	; 0x64
 8002432:	fb01 f202 	mul.w	r2, r1, r2
 8002436:	1a9a      	subs	r2, r3, r2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <button_Update+0x68>)
 800243c:	701a      	strb	r2, [r3, #0]
	}
	if(isButtonDown()){
 800243e:	f7fe fe05 	bl	800104c <isButtonDown>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <button_Update+0x64>
		if(current_duty_cycle > 0){
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <button_Update+0x68>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00f      	beq.n	8002470 <button_Update+0x64>
			current_duty_cycle = (current_duty_cycle - 1)%100;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <button_Update+0x68>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	3b01      	subs	r3, #1
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <button_Update+0x6c>)
 8002458:	fb82 1203 	smull	r1, r2, r2, r3
 800245c:	1151      	asrs	r1, r2, #5
 800245e:	17da      	asrs	r2, r3, #31
 8002460:	1a8a      	subs	r2, r1, r2
 8002462:	2164      	movs	r1, #100	; 0x64
 8002464:	fb01 f202 	mul.w	r2, r1, r2
 8002468:	1a9a      	subs	r2, r3, r2
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	4b01      	ldr	r3, [pc, #4]	; (8002474 <button_Update+0x68>)
 800246e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000106 	.word	0x20000106
 8002478:	51eb851f 	.word	0x51eb851f

0800247c <adc_Update>:

void adc_Update(){
 800247c:	b580      	push	{r7, lr}
 800247e:	ed2d 8b02 	vpush	{d8}
 8002482:	af00      	add	r7, sp, #0
	sensor_Read();
 8002484:	f000 f91e 	bl	80026c4 <sensor_Read>
	Power = sensor_GetCurrent()*sensor_GetVoltage();
 8002488:	f000 f97e 	bl	8002788 <sensor_GetCurrent>
 800248c:	eeb0 8a40 	vmov.f32	s16, s0
 8002490:	f000 f93e 	bl	8002710 <sensor_GetVoltage>
 8002494:	eef0 7a40 	vmov.f32	s15, s0
 8002498:	ee68 7a27 	vmul.f32	s15, s16, s15
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <adc_Update+0x84>)
 800249e:	edc3 7a00 	vstr	s15, [r3]
	Light = sensor_GetLight();
 80024a2:	f000 f91d 	bl	80026e0 <sensor_GetLight>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <adc_Update+0x88>)
 80024ac:	801a      	strh	r2, [r3, #0]
	if(Light < 2048){
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <adc_Update+0x88>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b6:	d203      	bcs.n	80024c0 <adc_Update+0x44>
		Light_intensity = "Weak";
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <adc_Update+0x8c>)
 80024ba:	4a14      	ldr	r2, [pc, #80]	; (800250c <adc_Update+0x90>)
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e002      	b.n	80024c6 <adc_Update+0x4a>
	}else{
		Light_intensity = "Strong";
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <adc_Update+0x8c>)
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <adc_Update+0x94>)
 80024c4:	601a      	str	r2, [r3, #0]
	}
	Humidity = (sensor_GetPotentiometer()/4095)*100;
 80024c6:	f000 f917 	bl	80026f8 <sensor_GetPotentiometer>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <adc_Update+0x98>)
 80024d0:	fba3 1302 	umull	r1, r3, r3, r2
 80024d4:	1ad2      	subs	r2, r2, r3
 80024d6:	0852      	lsrs	r2, r2, #1
 80024d8:	4413      	add	r3, r2
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	b29b      	uxth	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	0092      	lsls	r2, r2, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	0091      	lsls	r1, r2, #2
 80024e8:	461a      	mov	r2, r3
 80024ea:	460b      	mov	r3, r1
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <adc_Update+0x9c>)
 80024f4:	801a      	strh	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	ecbd 8b02 	vpop	{d8}
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200001d8 	.word	0x200001d8
 8002504:	200001dc 	.word	0x200001dc
 8002508:	20000010 	.word	0x20000010
 800250c:	08007728 	.word	0x08007728
 8002510:	08007730 	.word	0x08007730
 8002514:	00100101 	.word	0x00100101
 8002518:	200001de 	.word	0x200001de

0800251c <adc_Display>:

void adc_Display(){
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af04      	add	r7, sp, #16
	button_Update();
 8002522:	f7ff ff73 	bl	800240c <button_Update>
	adc_Update();
 8002526:	f7ff ffa9 	bl	800247c <adc_Update>
	lcd_ShowStr(10, 10, "Duty cycle (%):", RED, WHITE, 16, 0);
 800252a:	2300      	movs	r3, #0
 800252c:	9302      	str	r3, [sp, #8]
 800252e:	2310      	movs	r3, #16
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <adc_Display+0x144>)
 800253e:	210a      	movs	r1, #10
 8002540:	200a      	movs	r0, #10
 8002542:	f7ff fcfb 	bl	8001f3c <lcd_ShowStr>
	lcd_ShowIntNum(130, 10, current_duty_cycle, 2, RED, WHITE, 16);
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <adc_Display+0x148>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b29a      	uxth	r2, r3
 800254c:	2310      	movs	r3, #16
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2302      	movs	r3, #2
 800255e:	210a      	movs	r1, #10
 8002560:	2082      	movs	r0, #130	; 0x82
 8002562:	f7ff fa61 	bl	8001a28 <lcd_ShowIntNum>
	lcd_ShowStr(10, 30, "Power (mW):", RED, WHITE, 16, 0);
 8002566:	2300      	movs	r3, #0
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	2310      	movs	r3, #16
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002578:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <adc_Display+0x14c>)
 800257a:	211e      	movs	r1, #30
 800257c:	200a      	movs	r0, #10
 800257e:	f7ff fcdd 	bl	8001f3c <lcd_ShowStr>
	lcd_ShowFloatNum(130, 30, Power, 4, RED, WHITE, 16);
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <adc_Display+0x150>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	2310      	movs	r3, #16
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002596:	2204      	movs	r2, #4
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	211e      	movs	r1, #30
 800259e:	2082      	movs	r0, #130	; 0x82
 80025a0:	f7ff fac0 	bl	8001b24 <lcd_ShowFloatNum>
	lcd_ShowStr(10, 50, "Light:", RED, WHITE, 16, 0);
 80025a4:	2300      	movs	r3, #0
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	2310      	movs	r3, #16
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b6:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <adc_Display+0x154>)
 80025b8:	2132      	movs	r1, #50	; 0x32
 80025ba:	200a      	movs	r0, #10
 80025bc:	f7ff fcbe 	bl	8001f3c <lcd_ShowStr>
	lcd_ShowStr(130, 50, Light_intensity, RED, WHITE, 16, 0);
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <adc_Display+0x158>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	2310      	movs	r3, #16
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d6:	2132      	movs	r1, #50	; 0x32
 80025d8:	2082      	movs	r0, #130	; 0x82
 80025da:	f7ff fcaf 	bl	8001f3c <lcd_ShowStr>
	lcd_ShowStr(10, 70, "Temperature (oC):", RED, WHITE, 16, 0);
 80025de:	2300      	movs	r3, #0
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	2310      	movs	r3, #16
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <adc_Display+0x15c>)
 80025f2:	2146      	movs	r1, #70	; 0x46
 80025f4:	200a      	movs	r0, #10
 80025f6:	f7ff fca1 	bl	8001f3c <lcd_ShowStr>
	lcd_ShowFloatNum(130, 70, sensor_GetTemperature(), 4, RED, WHITE, 16);
 80025fa:	f000 f921 	bl	8002840 <sensor_GetTemperature>
 80025fe:	eef0 7a40 	vmov.f32	s15, s0
 8002602:	2310      	movs	r3, #16
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002610:	2204      	movs	r2, #4
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	2146      	movs	r1, #70	; 0x46
 8002618:	2082      	movs	r0, #130	; 0x82
 800261a:	f7ff fa83 	bl	8001b24 <lcd_ShowFloatNum>
	lcd_ShowStr(10, 90, "Humidity (%):", RED, WHITE, 16, 0);
 800261e:	2300      	movs	r3, #0
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	2310      	movs	r3, #16
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <adc_Display+0x160>)
 8002632:	215a      	movs	r1, #90	; 0x5a
 8002634:	200a      	movs	r0, #10
 8002636:	f7ff fc81 	bl	8001f3c <lcd_ShowStr>
	lcd_ShowIntNum(130, 90, Humidity, 2, RED, WHITE, 16);
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <adc_Display+0x164>)
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	2310      	movs	r3, #16
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2302      	movs	r3, #2
 8002650:	215a      	movs	r1, #90	; 0x5a
 8002652:	2082      	movs	r0, #130	; 0x82
 8002654:	f7ff f9e8 	bl	8001a28 <lcd_ShowIntNum>
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	08007738 	.word	0x08007738
 8002664:	20000106 	.word	0x20000106
 8002668:	08007748 	.word	0x08007748
 800266c:	200001d8 	.word	0x200001d8
 8002670:	08007754 	.word	0x08007754
 8002674:	20000010 	.word	0x20000010
 8002678:	0800775c 	.word	0x0800775c
 800267c:	08007770 	.word	0x08007770
 8002680:	200001de 	.word	0x200001de

08002684 <buzzer_On>:

void buzzer_On(){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	buzzer_SetVolume(current_duty_cycle);
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <buzzer_On+0x14>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fcf7 	bl	8001080 <buzzer_SetVolume>
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000106 	.word	0x20000106

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <Error_Handler+0x8>
	...

080026a8 <sensor_init>:
float Power = 0.0;
uint16_t Light = 0;
char* Light_intensity = "";
uint16_t Humidity = 0;

void sensor_init(){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80026ac:	2205      	movs	r2, #5
 80026ae:	4903      	ldr	r1, [pc, #12]	; (80026bc <sensor_init+0x14>)
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <sensor_init+0x18>)
 80026b2:	f000 fc91 	bl	8002fd8 <HAL_ADC_Start_DMA>
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200001cc 	.word	0x200001cc
 80026c0:	2000003c 	.word	0x2000003c

080026c4 <sensor_Read>:

void sensor_Read(){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80026c8:	2205      	movs	r2, #5
 80026ca:	4903      	ldr	r1, [pc, #12]	; (80026d8 <sensor_Read+0x14>)
 80026cc:	4803      	ldr	r0, [pc, #12]	; (80026dc <sensor_Read+0x18>)
 80026ce:	f000 fc83 	bl	8002fd8 <HAL_ADC_Start_DMA>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200001cc 	.word	0x200001cc
 80026dc:	2000003c 	.word	0x2000003c

080026e0 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
	return adc_receive[LIGHT_INDEX];
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <sensor_GetLight+0x14>)
 80026e6:	889b      	ldrh	r3, [r3, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200001cc 	.word	0x200001cc

080026f8 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
	return adc_receive[POTENTIOMETER_INDEX];
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <sensor_GetPotentiometer+0x14>)
 80026fe:	88db      	ldrh	r3, [r3, #6]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	200001cc 	.word	0x200001cc

08002710 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	return ((float)adc_receive[VOLTAGE_INDEX]*3.3*12)/(4095*1.565);
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <sensor_GetVoltage+0x70>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002720:	ee17 0a90 	vmov	r0, s15
 8002724:	f7fd feb4 	bl	8000490 <__aeabi_f2d>
 8002728:	a311      	add	r3, pc, #68	; (adr r3, 8002770 <sensor_GetVoltage+0x60>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fd ff07 	bl	8000540 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <sensor_GetVoltage+0x74>)
 8002740:	f7fd fefe 	bl	8000540 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	a30a      	add	r3, pc, #40	; (adr r3, 8002778 <sensor_GetVoltage+0x68>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fe f81f 	bl	8000794 <__aeabi_ddiv>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f7fe f901 	bl	8000964 <__aeabi_d2f>
 8002762:	4603      	mov	r3, r0
 8002764:	ee07 3a90 	vmov	s15, r3
}
 8002768:	eeb0 0a67 	vmov.f32	s0, s15
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	66666666 	.word	0x66666666
 8002774:	400a6666 	.word	0x400a6666
 8002778:	cccccccd 	.word	0xcccccccd
 800277c:	40b908ac 	.word	0x40b908ac
 8002780:	200001cc 	.word	0x200001cc
 8002784:	40280000 	.word	0x40280000

08002788 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[CURRENT_INDEX]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <sensor_GetCurrent+0xa8>)
 800278e:	885b      	ldrh	r3, [r3, #2]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002798:	ee17 0a90 	vmov	r0, s15
 800279c:	f7fd fe78 	bl	8000490 <__aeabi_f2d>
 80027a0:	a31f      	add	r3, pc, #124	; (adr r3, 8002820 <sensor_GetCurrent+0x98>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd fecb 	bl	8000540 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <sensor_GetCurrent+0xac>)
 80027b8:	f7fd fec2 	bl	8000540 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	a318      	add	r3, pc, #96	; (adr r3, 8002828 <sensor_GetCurrent+0xa0>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd ffe3 	bl	8000794 <__aeabi_ddiv>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <sensor_GetCurrent+0xb0>)
 80027dc:	f7fd fcf8 	bl	80001d0 <__aeabi_dsub>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <sensor_GetCurrent+0xb4>)
 80027ee:	f7fd fea7 	bl	8000540 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <sensor_GetCurrent+0xb0>)
 8002800:	f7fd ffc8 	bl	8000794 <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f8aa 	bl	8000964 <__aeabi_d2f>
 8002810:	4603      	mov	r3, r0
 8002812:	ee07 3a90 	vmov	s15, r3
}
 8002816:	eeb0 0a67 	vmov.f32	s0, s15
 800281a:	bd80      	pop	{r7, pc}
 800281c:	f3af 8000 	nop.w
 8002820:	66666666 	.word	0x66666666
 8002824:	400a6666 	.word	0x400a6666
 8002828:	147ae148 	.word	0x147ae148
 800282c:	40a4b2ee 	.word	0x40a4b2ee
 8002830:	200001cc 	.word	0x200001cc
 8002834:	408f4000 	.word	0x408f4000
 8002838:	40040000 	.word	0x40040000
 800283c:	40140000 	.word	0x40140000

08002840 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
	return ((float)adc_receive[TEMPERATURE_INDEX]*330)/(4095);
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <sensor_GetTemperature+0x30>)
 8002846:	891b      	ldrh	r3, [r3, #8]
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002850:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002874 <sensor_GetTemperature+0x34>
 8002854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002858:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002878 <sensor_GetTemperature+0x38>
 800285c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002860:	eef0 7a66 	vmov.f32	s15, s13
}
 8002864:	eeb0 0a67 	vmov.f32	s0, s15
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	200001cc 	.word	0x200001cc
 8002874:	43a50000 	.word	0x43a50000
 8002878:	457ff000 	.word	0x457ff000

0800287c <timer_init>:
#include "software_timer.h"

uint16_t flag_timer[N0_OF_TIMER] = {0, 0, 0, 0};
uint16_t timer_counter[N0_OF_TIMER] = {0, 0, 0, 0};

void timer_init(){
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <timer_init+0x10>)
 8002882:	f003 fe5d 	bl	8006540 <HAL_TIM_Base_Start_IT>
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000248 	.word	0x20000248

08002890 <setTimer>:

void setTimer(uint16_t duration, uint16_t timer_type){
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	460a      	mov	r2, r1
 800289a:	80fb      	strh	r3, [r7, #6]
 800289c:	4613      	mov	r3, r2
 800289e:	80bb      	strh	r3, [r7, #4]
	timer_counter[timer_type] = duration/TIMER_CYCLE;
 80028a0:	88bb      	ldrh	r3, [r7, #4]
 80028a2:	4907      	ldr	r1, [pc, #28]	; (80028c0 <setTimer+0x30>)
 80028a4:	88fa      	ldrh	r2, [r7, #6]
 80028a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	flag_timer[timer_type] = 0;
 80028aa:	88bb      	ldrh	r3, [r7, #4]
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <setTimer+0x34>)
 80028ae:	2100      	movs	r1, #0
 80028b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	200001e8 	.word	0x200001e8
 80028c4:	200001e0 	.word	0x200001e0

080028c8 <timerRun>:

void timerRun(uint16_t timer_type){
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
	if(timer_counter[timer_type] > 0){
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <timerRun+0x4c>)
 80028d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d013      	beq.n	8002906 <timerRun+0x3e>
		timer_counter[timer_type]--;
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <timerRun+0x4c>)
 80028e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028e6:	3a01      	subs	r2, #1
 80028e8:	b291      	uxth	r1, r2
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <timerRun+0x4c>)
 80028ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer_counter[timer_type] <= 0){
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <timerRun+0x4c>)
 80028f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d104      	bne.n	8002906 <timerRun+0x3e>
			flag_timer[timer_type] = 1;
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	4a06      	ldr	r2, [pc, #24]	; (8002918 <timerRun+0x50>)
 8002900:	2101      	movs	r1, #1
 8002902:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
	}
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200001e8 	.word	0x200001e8
 8002918:	200001e0 	.word	0x200001e0

0800291c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d108      	bne.n	8002940 <HAL_TIM_PeriodElapsedCallback+0x24>
		timerRun(LCD_TIMER);
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff ffca 	bl	80028c8 <timerRun>
		timerRun(LED7SEG_TIMER);
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff ffc7 	bl	80028c8 <timerRun>
		timerRun(BUZZER_TIMER);
 800293a:	2002      	movs	r0, #2
 800293c:	f7ff ffc4 	bl	80028c8 <timerRun>
	}
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <MX_SPI1_Init+0x64>)
 800294e:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <MX_SPI1_Init+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_SPI1_Init+0x64>)
 8002954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_SPI1_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <MX_SPI1_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_SPI1_Init+0x64>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <MX_SPI1_Init+0x64>)
 800296e:	2200      	movs	r2, #0
 8002970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_SPI1_Init+0x64>)
 8002974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_SPI1_Init+0x64>)
 800297c:	2200      	movs	r2, #0
 800297e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <MX_SPI1_Init+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_SPI1_Init+0x64>)
 8002988:	2200      	movs	r2, #0
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <MX_SPI1_Init+0x64>)
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_SPI1_Init+0x64>)
 8002994:	220a      	movs	r2, #10
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_SPI1_Init+0x64>)
 800299a:	f002 ff95 	bl	80058c8 <HAL_SPI_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029a4:	f7ff fe7a 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200001f0 	.word	0x200001f0
 80029b0:	40013000 	.word	0x40013000

080029b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <HAL_SPI_MspInit+0x84>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d12b      	bne.n	8002a2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_SPI_MspInit+0x88>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_SPI_MspInit+0x88>)
 80029e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_SPI_MspInit+0x88>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_SPI_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_SPI_MspInit+0x88>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_SPI_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a0e:	2338      	movs	r3, #56	; 0x38
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a1e:	2305      	movs	r3, #5
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4805      	ldr	r0, [pc, #20]	; (8002a40 <HAL_SPI_MspInit+0x8c>)
 8002a2a:	f001 fb25 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40013000 	.word	0x40013000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020400 	.word	0x40020400

08002a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <NMI_Handler+0x4>

08002a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <BusFault_Handler+0x4>

08002aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <UsageFault_Handler+0x4>

08002ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae0:	f000 f9f2 	bl	8002ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <TIM2_IRQHandler+0x10>)
 8002aee:	f003 feb9 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000248 	.word	0x20000248

08002afc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <DMA2_Stream0_IRQHandler+0x10>)
 8002b02:	f001 f84f 	bl	8003ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000084 	.word	0x20000084

08002b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <SystemInit+0x20>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <SystemInit+0x20>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b48:	463b      	mov	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b5a:	f240 3247 	movw	r2, #839	; 0x347
 8002b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b68:	2263      	movs	r2, #99	; 0x63
 8002b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b78:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b7a:	f003 fc91 	bl	80064a0 <HAL_TIM_Base_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b84:	f7ff fd8a 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002b96:	f004 f82f 	bl	8006bf8 <HAL_TIM_ConfigClockSource>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ba0:	f7ff fd7c 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bac:	463b      	mov	r3, r7
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_TIM2_Init+0x94>)
 8002bb2:	f004 fc21 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002bbc:	f7ff fd6e 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000248 	.word	0x20000248

08002bcc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002be6:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <MX_TIM13_Init+0x98>)
 8002be8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002bec:	f240 3247 	movw	r2, #839	; 0x347
 8002bf0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002bfa:	2263      	movs	r2, #99	; 0x63
 8002bfc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002c0a:	4815      	ldr	r0, [pc, #84]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002c0c:	f003 fc48 	bl	80064a0 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002c16:	f7ff fd41 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002c1a:	4811      	ldr	r0, [pc, #68]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002c1c:	f003 fd00 	bl	8006620 <HAL_TIM_PWM_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002c26:	f7ff fd39 	bl	800269c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c2a:	2360      	movs	r3, #96	; 0x60
 8002c2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4807      	ldr	r0, [pc, #28]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002c42:	f003 ff17 	bl	8006a74 <HAL_TIM_PWM_ConfigChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002c4c:	f7ff fd26 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002c50:	4803      	ldr	r0, [pc, #12]	; (8002c60 <MX_TIM13_Init+0x94>)
 8002c52:	f000 f845 	bl	8002ce0 <HAL_TIM_MspPostInit>

}
 8002c56:	bf00      	nop
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000290 	.word	0x20000290
 8002c64:	40001c00 	.word	0x40001c00

08002c68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d116      	bne.n	8002ca8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_TIM_Base_MspInit+0x70>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <HAL_TIM_Base_MspInit+0x70>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_TIM_Base_MspInit+0x70>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	201c      	movs	r0, #28
 8002c9c:	f000 fe45 	bl	800392a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ca0:	201c      	movs	r0, #28
 8002ca2:	f000 fe5e 	bl	8003962 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002ca6:	e012      	b.n	8002cce <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <HAL_TIM_Base_MspInit+0x74>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_TIM_Base_MspInit+0x70>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <HAL_TIM_Base_MspInit+0x70>)
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_TIM_Base_MspInit+0x70>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40001c00 	.word	0x40001c00

08002ce0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <HAL_TIM_MspPostInit+0x68>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d11e      	bne.n	8002d40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_TIM_MspPostInit+0x6c>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <HAL_TIM_MspPostInit+0x6c>)
 8002d0c:	f043 0320 	orr.w	r3, r3, #32
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <HAL_TIM_MspPostInit+0x6c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002d30:	2309      	movs	r3, #9
 8002d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_MspPostInit+0x70>)
 8002d3c:	f001 f99c 	bl	8004078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002d40:	bf00      	nop
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40001c00 	.word	0x40001c00
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40021400 	.word	0x40021400

08002d54 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	b2db      	uxtb	r3, r3
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <DEC2BCD+0x44>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	08db      	lsrs	r3, r3, #3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	b258      	sxtb	r0, r3
 8002da2:	79fa      	ldrb	r2, [r7, #7]
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <DEC2BCD+0x44>)
 8002da6:	fba3 1302 	umull	r1, r3, r3, r2
 8002daa:	08d9      	lsrs	r1, r3, #3
 8002dac:	460b      	mov	r3, r1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	4303      	orrs	r3, r0
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	cccccccd 	.word	0xcccccccd

08002dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dd6:	490e      	ldr	r1, [pc, #56]	; (8002e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ddc:	e002      	b.n	8002de4 <LoopCopyDataInit>

08002dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de2:	3304      	adds	r3, #4

08002de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de8:	d3f9      	bcc.n	8002dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dea:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dec:	4c0b      	ldr	r4, [pc, #44]	; (8002e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df0:	e001      	b.n	8002df6 <LoopFillZerobss>

08002df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df4:	3204      	adds	r2, #4

08002df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df8:	d3fb      	bcc.n	8002df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dfa:	f7ff fe89 	bl	8002b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfe:	f004 fc63 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e02:	f7ff f9db 	bl	80021bc <main>
  bx  lr    
 8002e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e10:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002e14:	0800a734 	.word	0x0800a734
  ldr r2, =_sbss
 8002e18:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002e1c:	200002dc 	.word	0x200002dc

08002e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC_IRQHandler>
	...

08002e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_Init+0x40>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <HAL_Init+0x40>)
 8002e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_Init+0x40>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <HAL_Init+0x40>)
 8002e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_Init+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <HAL_Init+0x40>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f000 fd61 	bl	8003914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e52:	200f      	movs	r0, #15
 8002e54:	f000 f808 	bl	8002e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e58:	f7ff fdf4 	bl	8002a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00

08002e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_InitTick+0x54>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_InitTick+0x58>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fd79 	bl	800397e <HAL_SYSTICK_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00e      	b.n	8002eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d80a      	bhi.n	8002eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	f000 fd41 	bl	800392a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <HAL_InitTick+0x5c>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000014 	.word	0x20000014
 8002ec0:	2000001c 	.word	0x2000001c
 8002ec4:	20000018 	.word	0x20000018

08002ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_IncTick+0x20>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_IncTick+0x24>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <HAL_IncTick+0x24>)
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	2000001c 	.word	0x2000001c
 8002eec:	200002d8 	.word	0x200002d8

08002ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_GetTick+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	200002d8 	.word	0x200002d8

08002f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff ffee 	bl	8002ef0 <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d005      	beq.n	8002f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_Delay+0x44>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f2e:	bf00      	nop
 8002f30:	f7ff ffde 	bl	8002ef0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d8f7      	bhi.n	8002f30 <HAL_Delay+0x28>
  {
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000001c 	.word	0x2000001c

08002f50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e033      	b.n	8002fce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd ff50 	bl	8000e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f96:	f023 0302 	bic.w	r3, r3, #2
 8002f9a:	f043 0202 	orr.w	r2, r3, #2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa68 	bl	8003478 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002fbe:	e001      	b.n	8002fc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_Start_DMA+0x1e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e0e9      	b.n	80031ca <HAL_ADC_Start_DMA+0x1f2>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d018      	beq.n	800303e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800301c:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <HAL_ADC_Start_DMA+0x1fc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6d      	ldr	r2, [pc, #436]	; (80031d8 <HAL_ADC_Start_DMA+0x200>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0c9a      	lsrs	r2, r3, #18
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003030:	e002      	b.n	8003038 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3b01      	subs	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f9      	bne.n	8003032 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d107      	bne.n	800305e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 80a1 	bne.w	80031b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003098:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	d106      	bne.n	80030bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f023 0206 	bic.w	r2, r3, #6
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
 80030ba:	e002      	b.n	80030c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ca:	4b44      	ldr	r3, [pc, #272]	; (80031dc <HAL_ADC_Start_DMA+0x204>)
 80030cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4a43      	ldr	r2, [pc, #268]	; (80031e0 <HAL_ADC_Start_DMA+0x208>)
 80030d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4a42      	ldr	r2, [pc, #264]	; (80031e4 <HAL_ADC_Start_DMA+0x20c>)
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4a41      	ldr	r2, [pc, #260]	; (80031e8 <HAL_ADC_Start_DMA+0x210>)
 80030e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	334c      	adds	r3, #76	; 0x4c
 800311a:	4619      	mov	r1, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f000 fce8 	bl	8003af4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2b00      	cmp	r3, #0
 800312e:	d12a      	bne.n	8003186 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2d      	ldr	r2, [pc, #180]	; (80031ec <HAL_ADC_Start_DMA+0x214>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d015      	beq.n	8003166 <HAL_ADC_Start_DMA+0x18e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <HAL_ADC_Start_DMA+0x218>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d105      	bne.n	8003150 <HAL_ADC_Start_DMA+0x178>
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_ADC_Start_DMA+0x204>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <HAL_ADC_Start_DMA+0x21c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d136      	bne.n	80031c8 <HAL_ADC_Start_DMA+0x1f0>
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_ADC_Start_DMA+0x204>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	d130      	bne.n	80031c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d129      	bne.n	80031c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e020      	b.n	80031c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_ADC_Start_DMA+0x214>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d11b      	bne.n	80031c8 <HAL_ADC_Start_DMA+0x1f0>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d114      	bne.n	80031c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	e00b      	b.n	80031c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0210 	orr.w	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000014 	.word	0x20000014
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	40012300 	.word	0x40012300
 80031e0:	08003671 	.word	0x08003671
 80031e4:	0800372b 	.word	0x0800372b
 80031e8:	08003747 	.word	0x08003747
 80031ec:	40012000 	.word	0x40012000
 80031f0:	40012100 	.word	0x40012100
 80031f4:	40012200 	.word	0x40012200

080031f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x1c>
 800324c:	2302      	movs	r3, #2
 800324e:	e105      	b.n	800345c <HAL_ADC_ConfigChannel+0x228>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b09      	cmp	r3, #9
 800325e:	d925      	bls.n	80032ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	3b1e      	subs	r3, #30
 8003276:	2207      	movs	r2, #7
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43da      	mvns	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	400a      	ands	r2, r1
 8003284:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68d9      	ldr	r1, [r3, #12]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	4618      	mov	r0, r3
 8003298:	4603      	mov	r3, r0
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4403      	add	r3, r0
 800329e:	3b1e      	subs	r3, #30
 80032a0:	409a      	lsls	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e022      	b.n	80032f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	2207      	movs	r2, #7
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4403      	add	r3, r0
 80032e8:	409a      	lsls	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d824      	bhi.n	8003344 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	3b05      	subs	r3, #5
 800330c:	221f      	movs	r2, #31
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	400a      	ands	r2, r1
 800331a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	4618      	mov	r0, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	3b05      	subs	r3, #5
 8003336:	fa00 f203 	lsl.w	r2, r0, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	635a      	str	r2, [r3, #52]	; 0x34
 8003342:	e04c      	b.n	80033de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d824      	bhi.n	8003396 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	3b23      	subs	r3, #35	; 0x23
 800335e:	221f      	movs	r2, #31
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43da      	mvns	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	400a      	ands	r2, r1
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	4618      	mov	r0, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	3b23      	subs	r3, #35	; 0x23
 8003388:	fa00 f203 	lsl.w	r2, r0, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
 8003394:	e023      	b.n	80033de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3b41      	subs	r3, #65	; 0x41
 80033a8:	221f      	movs	r2, #31
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	400a      	ands	r2, r1
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4618      	mov	r0, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	3b41      	subs	r3, #65	; 0x41
 80033d2:	fa00 f203 	lsl.w	r2, r0, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_ADC_ConfigChannel+0x234>)
 80033e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_ADC_ConfigChannel+0x238>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d109      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1cc>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d105      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_ADC_ConfigChannel+0x238>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d123      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x21e>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b10      	cmp	r3, #16
 8003410:	d003      	beq.n	800341a <HAL_ADC_ConfigChannel+0x1e6>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b11      	cmp	r3, #17
 8003418:	d11b      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b10      	cmp	r3, #16
 800342c:	d111      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_ADC_ConfigChannel+0x23c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a10      	ldr	r2, [pc, #64]	; (8003474 <HAL_ADC_ConfigChannel+0x240>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9a      	lsrs	r2, r3, #18
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003444:	e002      	b.n	800344c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3b01      	subs	r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f9      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40012300 	.word	0x40012300
 800346c:	40012000 	.word	0x40012000
 8003470:	20000014 	.word	0x20000014
 8003474:	431bde83 	.word	0x431bde83

08003478 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003480:	4b79      	ldr	r3, [pc, #484]	; (8003668 <ADC_Init+0x1f0>)
 8003482:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	4a58      	ldr	r2, [pc, #352]	; (800366c <ADC_Init+0x1f4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800351e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	e00f      	b.n	8003576 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003574:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0202 	bic.w	r2, r2, #2
 8003584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6899      	ldr	r1, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7e1b      	ldrb	r3, [r3, #24]
 8003590:	005a      	lsls	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01b      	beq.n	80035dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	3b01      	subs	r3, #1
 80035d0:	035a      	lsls	r2, r3, #13
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	e007      	b.n	80035ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	3b01      	subs	r3, #1
 8003608:	051a      	lsls	r2, r3, #20
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800362e:	025a      	lsls	r2, r3, #9
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	029a      	lsls	r2, r3, #10
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40012300 	.word	0x40012300
 800366c:	0f000001 	.word	0x0f000001

08003670 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003686:	2b00      	cmp	r3, #0
 8003688:	d13c      	bne.n	8003704 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d12b      	bne.n	80036fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d127      	bne.n	80036fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d119      	bne.n	80036fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0220 	bic.w	r2, r2, #32
 80036d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fd7b 	bl	80031f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003702:	e00e      	b.n	8003722 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7ff fd85 	bl	8003220 <HAL_ADC_ErrorCallback>
}
 8003716:	e004      	b.n	8003722 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fd67 	bl	800320c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0204 	orr.w	r2, r3, #4
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7ff fd5a 	bl	8003220 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003790:	4013      	ands	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800379c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <__NVIC_GetPriorityGrouping+0x18>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 0307 	and.w	r3, r3, #7
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db0b      	blt.n	8003802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <__NVIC_EnableIRQ+0x38>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2001      	movs	r0, #1
 80037fa:	fa00 f202 	lsl.w	r2, r0, r2
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	; (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	; (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
         );
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e0:	d301      	bcc.n	80038e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00f      	b.n	8003906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <SysTick_Config+0x40>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ee:	210f      	movs	r1, #15
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f7ff ff8e 	bl	8003814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <SysTick_Config+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <SysTick_Config+0x40>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000e010 	.word	0xe000e010

08003914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff29 	bl	8003774 <__NVIC_SetPriorityGrouping>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	4603      	mov	r3, r0
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800393c:	f7ff ff3e 	bl	80037bc <__NVIC_GetPriorityGrouping>
 8003940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff ff8e 	bl	8003868 <NVIC_EncodePriority>
 800394c:	4602      	mov	r2, r0
 800394e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff5d 	bl	8003814 <__NVIC_SetPriority>
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff31 	bl	80037d8 <__NVIC_EnableIRQ>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ffa2 	bl	80038d0 <SysTick_Config>
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039a4:	f7ff faa4 	bl	8002ef0 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e099      	b.n	8003ae8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d4:	e00f      	b.n	80039f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039d6:	f7ff fa8b 	bl	8002ef0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d908      	bls.n	80039f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e078      	b.n	8003ae8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e8      	bne.n	80039d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <HAL_DMA_Init+0x158>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d107      	bne.n	8003a60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0307 	bic.w	r3, r3, #7
 8003a76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d117      	bne.n	8003aba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fa6f 	bl	8003f80 <DMA_CheckFifoParam>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2240      	movs	r2, #64	; 0x40
 8003aac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e016      	b.n	8003ae8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa26 	bl	8003f14 <DMA_CalcBaseAndBitshift>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	223f      	movs	r2, #63	; 0x3f
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	f010803f 	.word	0xf010803f

08003af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_DMA_Start_IT+0x26>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e040      	b.n	8003b9c <HAL_DMA_Start_IT+0xa8>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d12f      	bne.n	8003b8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f9b8 	bl	8003eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	223f      	movs	r2, #63	; 0x3f
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0216 	orr.w	r2, r2, #22
 8003b62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0208 	orr.w	r2, r2, #8
 8003b7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e005      	b.n	8003b9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
 8003b98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bb0:	4b8e      	ldr	r3, [pc, #568]	; (8003dec <HAL_DMA_IRQHandler+0x248>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a8e      	ldr	r2, [pc, #568]	; (8003df0 <HAL_DMA_IRQHandler+0x24c>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	2208      	movs	r2, #8
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01a      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0204 	bic.w	r2, r2, #4
 8003bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d012      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f043 0202 	orr.w	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	2204      	movs	r2, #4
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f043 0204 	orr.w	r2, r3, #4
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	2210      	movs	r2, #16
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d043      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03c      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d018      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d024      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
 8003cd2:	e01f      	b.n	8003d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01b      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
 8003ce4:	e016      	b.n	8003d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0208 	bic.w	r2, r2, #8
 8003d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	2220      	movs	r2, #32
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 808f 	beq.w	8003e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8087 	beq.w	8003e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d136      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0216 	bic.w	r2, r2, #22
 8003d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x1da>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0208 	bic.w	r2, r2, #8
 8003d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	223f      	movs	r2, #63	; 0x3f
 8003d94:	409a      	lsls	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d07e      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	4798      	blx	r3
        }
        return;
 8003dba:	e079      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01d      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10d      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d031      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
 8003de8:	e02c      	b.n	8003e44 <HAL_DMA_IRQHandler+0x2a0>
 8003dea:	bf00      	nop
 8003dec:	20000014 	.word	0x20000014
 8003df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d023      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
 8003e04:	e01e      	b.n	8003e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0210 	bic.w	r2, r2, #16
 8003e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d032      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d022      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2205      	movs	r2, #5
 8003e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d307      	bcc.n	8003e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f2      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x2cc>
 8003e8a:	e000      	b.n	8003e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
 8003eae:	e000      	b.n	8003eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003eb0:	bf00      	nop
    }
  }
}
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d108      	bne.n	8003ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ef6:	e007      	b.n	8003f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	60da      	str	r2, [r3, #12]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3b10      	subs	r3, #16
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <DMA_CalcBaseAndBitshift+0x64>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <DMA_CalcBaseAndBitshift+0x68>)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d909      	bls.n	8003f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	659a      	str	r2, [r3, #88]	; 0x58
 8003f54:	e007      	b.n	8003f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	aaaaaaab 	.word	0xaaaaaaab
 8003f7c:	0800a71c 	.word	0x0800a71c

08003f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11f      	bne.n	8003fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d856      	bhi.n	800404e <DMA_CheckFifoParam+0xce>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <DMA_CheckFifoParam+0x28>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fcb 	.word	0x08003fcb
 8003fb0:	08003fb9 	.word	0x08003fb9
 8003fb4:	0800404f 	.word	0x0800404f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d046      	beq.n	8004052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e043      	b.n	8004052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fd2:	d140      	bne.n	8004056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd8:	e03d      	b.n	8004056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d121      	bne.n	8004028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d837      	bhi.n	800405a <DMA_CheckFifoParam+0xda>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <DMA_CheckFifoParam+0x70>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004001 	.word	0x08004001
 8003ff4:	08004007 	.word	0x08004007
 8003ff8:	08004001 	.word	0x08004001
 8003ffc:	08004019 	.word	0x08004019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	e030      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d025      	beq.n	800405e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004016:	e022      	b.n	800405e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004020:	d11f      	bne.n	8004062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004026:	e01c      	b.n	8004062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d903      	bls.n	8004036 <DMA_CheckFifoParam+0xb6>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d003      	beq.n	800403c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004034:	e018      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
      break;
 800403a:	e015      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e00b      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;
 800404e:	bf00      	nop
 8004050:	e00a      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 8004052:	bf00      	nop
 8004054:	e008      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 8004056:	bf00      	nop
 8004058:	e006      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 800405a:	bf00      	nop
 800405c:	e004      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 800405e:	bf00      	nop
 8004060:	e002      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;   
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 8004066:	bf00      	nop
    }
  } 
  
  return status; 
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e16b      	b.n	800436c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004094:	2201      	movs	r2, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f040 815a 	bne.w	8004366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d005      	beq.n	80040ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d130      	bne.n	800412c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	2203      	movs	r2, #3
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004100:	2201      	movs	r2, #1
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 0201 	and.w	r2, r3, #1
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d017      	beq.n	8004168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d123      	bne.n	80041bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	220f      	movs	r2, #15
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	69b9      	ldr	r1, [r7, #24]
 80041b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80b4 	beq.w	8004366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b60      	ldr	r3, [pc, #384]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	4a5f      	ldr	r2, [pc, #380]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800420c:	6453      	str	r3, [r2, #68]	; 0x44
 800420e:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421a:	4a5b      	ldr	r2, [pc, #364]	; (8004388 <HAL_GPIO_Init+0x310>)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	3302      	adds	r3, #2
 8004222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	220f      	movs	r2, #15
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_GPIO_Init+0x314>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <HAL_GPIO_Init+0x226>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a51      	ldr	r2, [pc, #324]	; (8004390 <HAL_GPIO_Init+0x318>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d025      	beq.n	800429a <HAL_GPIO_Init+0x222>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_GPIO_Init+0x31c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <HAL_GPIO_Init+0x21e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4f      	ldr	r2, [pc, #316]	; (8004398 <HAL_GPIO_Init+0x320>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d019      	beq.n	8004292 <HAL_GPIO_Init+0x21a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_GPIO_Init+0x324>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_GPIO_Init+0x216>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4d      	ldr	r2, [pc, #308]	; (80043a0 <HAL_GPIO_Init+0x328>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00d      	beq.n	800428a <HAL_GPIO_Init+0x212>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4c      	ldr	r2, [pc, #304]	; (80043a4 <HAL_GPIO_Init+0x32c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <HAL_GPIO_Init+0x20e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <HAL_GPIO_Init+0x330>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_GPIO_Init+0x20a>
 800427e:	2307      	movs	r3, #7
 8004280:	e00e      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004282:	2308      	movs	r3, #8
 8004284:	e00c      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004286:	2306      	movs	r3, #6
 8004288:	e00a      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800428a:	2305      	movs	r3, #5
 800428c:	e008      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800428e:	2304      	movs	r3, #4
 8004290:	e006      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004292:	2303      	movs	r3, #3
 8004294:	e004      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004296:	2302      	movs	r3, #2
 8004298:	e002      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800429e:	2300      	movs	r3, #0
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f002 0203 	and.w	r2, r2, #3
 80042a6:	0092      	lsls	r2, r2, #2
 80042a8:	4093      	lsls	r3, r2
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b0:	4935      	ldr	r1, [pc, #212]	; (8004388 <HAL_GPIO_Init+0x310>)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_GPIO_Init+0x334>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_GPIO_Init+0x334>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3301      	adds	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	f67f ae90 	bls.w	8004094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3724      	adds	r7, #36	; 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	40013800 	.word	0x40013800
 800438c:	40020000 	.word	0x40020000
 8004390:	40020400 	.word	0x40020400
 8004394:	40020800 	.word	0x40020800
 8004398:	40020c00 	.word	0x40020c00
 800439c:	40021000 	.word	0x40021000
 80043a0:	40021400 	.word	0x40021400
 80043a4:	40021800 	.word	0x40021800
 80043a8:	40021c00 	.word	0x40021c00
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043cc:	e003      	b.n	80043d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e12b      	b.n	800464e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f910 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004448:	f001 fa2a 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 800444c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4a81      	ldr	r2, [pc, #516]	; (8004658 <HAL_I2C_Init+0x274>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d807      	bhi.n	8004468 <HAL_I2C_Init+0x84>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a80      	ldr	r2, [pc, #512]	; (800465c <HAL_I2C_Init+0x278>)
 800445c:	4293      	cmp	r3, r2
 800445e:	bf94      	ite	ls
 8004460:	2301      	movls	r3, #1
 8004462:	2300      	movhi	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e006      	b.n	8004476 <HAL_I2C_Init+0x92>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a7d      	ldr	r2, [pc, #500]	; (8004660 <HAL_I2C_Init+0x27c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	bf94      	ite	ls
 8004470:	2301      	movls	r3, #1
 8004472:	2300      	movhi	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0e7      	b.n	800464e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a78      	ldr	r2, [pc, #480]	; (8004664 <HAL_I2C_Init+0x280>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0c9b      	lsrs	r3, r3, #18
 8004488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4a6a      	ldr	r2, [pc, #424]	; (8004658 <HAL_I2C_Init+0x274>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d802      	bhi.n	80044b8 <HAL_I2C_Init+0xd4>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3301      	adds	r3, #1
 80044b6:	e009      	b.n	80044cc <HAL_I2C_Init+0xe8>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	4a69      	ldr	r2, [pc, #420]	; (8004668 <HAL_I2C_Init+0x284>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	3301      	adds	r3, #1
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	495c      	ldr	r1, [pc, #368]	; (8004658 <HAL_I2C_Init+0x274>)
 80044e8:	428b      	cmp	r3, r1
 80044ea:	d819      	bhi.n	8004520 <HAL_I2C_Init+0x13c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1e59      	subs	r1, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004500:	400b      	ands	r3, r1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_I2C_Init+0x138>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1e59      	subs	r1, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fbb1 f3f3 	udiv	r3, r1, r3
 8004514:	3301      	adds	r3, #1
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	e051      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 800451c:	2304      	movs	r3, #4
 800451e:	e04f      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d111      	bne.n	800454c <HAL_I2C_Init+0x168>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1e58      	subs	r0, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	440b      	add	r3, r1
 8004536:	fbb0 f3f3 	udiv	r3, r0, r3
 800453a:	3301      	adds	r3, #1
 800453c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	e012      	b.n	8004572 <HAL_I2C_Init+0x18e>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e58      	subs	r0, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	0099      	lsls	r1, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Init+0x196>
 8004576:	2301      	movs	r3, #1
 8004578:	e022      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10e      	bne.n	80045a0 <HAL_I2C_Init+0x1bc>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1e58      	subs	r0, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	460b      	mov	r3, r1
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	440b      	add	r3, r1
 8004590:	fbb0 f3f3 	udiv	r3, r0, r3
 8004594:	3301      	adds	r3, #1
 8004596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	e00f      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1e58      	subs	r0, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	0099      	lsls	r1, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b6:	3301      	adds	r3, #1
 80045b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	6809      	ldr	r1, [r1, #0]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6911      	ldr	r1, [r2, #16]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68d2      	ldr	r2, [r2, #12]
 80045fa:	4311      	orrs	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	430b      	orrs	r3, r1
 8004602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	000186a0 	.word	0x000186a0
 800465c:	001e847f 	.word	0x001e847f
 8004660:	003d08ff 	.word	0x003d08ff
 8004664:	431bde83 	.word	0x431bde83
 8004668:	10624dd3 	.word	0x10624dd3

0800466c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	; 0x30
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	4608      	mov	r0, r1
 8004676:	4611      	mov	r1, r2
 8004678:	461a      	mov	r2, r3
 800467a:	4603      	mov	r3, r0
 800467c:	817b      	strh	r3, [r7, #10]
 800467e:	460b      	mov	r3, r1
 8004680:	813b      	strh	r3, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004686:	f7fe fc33 	bl	8002ef0 <HAL_GetTick>
 800468a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b20      	cmp	r3, #32
 8004696:	f040 8208 	bne.w	8004aaa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2319      	movs	r3, #25
 80046a0:	2201      	movs	r2, #1
 80046a2:	497b      	ldr	r1, [pc, #492]	; (8004890 <HAL_I2C_Mem_Read+0x224>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 faef 	bl	8004c88 <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
 80046b2:	e1fb      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_Mem_Read+0x56>
 80046be:	2302      	movs	r3, #2
 80046c0:	e1f4      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d007      	beq.n	80046e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2222      	movs	r2, #34	; 0x22
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a5b      	ldr	r2, [pc, #364]	; (8004894 <HAL_I2C_Mem_Read+0x228>)
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800472a:	88f8      	ldrh	r0, [r7, #6]
 800472c:	893a      	ldrh	r2, [r7, #8]
 800472e:	8979      	ldrh	r1, [r7, #10]
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4603      	mov	r3, r0
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f9bc 	bl	8004ab8 <I2C_RequestMemoryRead>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1b0      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d113      	bne.n	800477a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e184      	b.n	8004a84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	2b01      	cmp	r3, #1
 8004780:	d11b      	bne.n	80047ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e164      	b.n	8004a84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d11b      	bne.n	80047fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	e144      	b.n	8004a84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004810:	e138      	b.n	8004a84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b03      	cmp	r3, #3
 8004818:	f200 80f1 	bhi.w	80049fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	2b01      	cmp	r3, #1
 8004822:	d123      	bne.n	800486c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fb44 	bl	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e139      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800486a:	e10b      	b.n	8004a84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	2b02      	cmp	r3, #2
 8004872:	d14e      	bne.n	8004912 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	2200      	movs	r2, #0
 800487c:	4906      	ldr	r1, [pc, #24]	; (8004898 <HAL_I2C_Mem_Read+0x22c>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa02 	bl	8004c88 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e10e      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
 800488e:	bf00      	nop
 8004890:	00100002 	.word	0x00100002
 8004894:	ffff0000 	.word	0xffff0000
 8004898:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004910:	e0b8      	b.n	8004a84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	2200      	movs	r2, #0
 800491a:	4966      	ldr	r1, [pc, #408]	; (8004ab4 <HAL_I2C_Mem_Read+0x448>)
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f9b3 	bl	8004c88 <I2C_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0bf      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2200      	movs	r2, #0
 8004976:	494f      	ldr	r1, [pc, #316]	; (8004ab4 <HAL_I2C_Mem_Read+0x448>)
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f985 	bl	8004c88 <I2C_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e091      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049fc:	e042      	b.n	8004a84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fa57 	bl	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e04c      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d118      	bne.n	8004a84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f aec2 	bne.w	8004812 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	00010004 	.word	0x00010004

08004ab8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	817b      	strh	r3, [r7, #10]
 8004aca:	460b      	mov	r3, r1
 8004acc:	813b      	strh	r3, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f8c2 	bl	8004c88 <I2C_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b18:	d103      	bne.n	8004b22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0aa      	b.n	8004c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b26:	897b      	ldrh	r3, [r7, #10]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	4952      	ldr	r1, [pc, #328]	; (8004c84 <I2C_RequestMemoryRead+0x1cc>)
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f8fa 	bl	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e097      	b.n	8004c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f964 	bl	8004e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e076      	b.n	8004c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]
 8004b9e:	e021      	b.n	8004be4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba0:	893b      	ldrh	r3, [r7, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb0:	6a39      	ldr	r1, [r7, #32]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f93e 	bl	8004e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d107      	bne.n	8004bd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e050      	b.n	8004c7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bda:	893b      	ldrh	r3, [r7, #8]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be6:	6a39      	ldr	r1, [r7, #32]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f923 	bl	8004e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00d      	beq.n	8004c10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d107      	bne.n	8004c0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e035      	b.n	8004c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f82b 	bl	8004c88 <I2C_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c46:	d103      	bne.n	8004c50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e013      	b.n	8004c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	6a3a      	ldr	r2, [r7, #32]
 8004c68:	4906      	ldr	r1, [pc, #24]	; (8004c84 <I2C_RequestMemoryRead+0x1cc>)
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f863 	bl	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	00010002 	.word	0x00010002

08004c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c98:	e025      	b.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d021      	beq.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fe f925 	bl	8002ef0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d116      	bne.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e023      	b.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10d      	bne.n	8004d0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	e00c      	b.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	43da      	mvns	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d0b6      	beq.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d44:	e051      	b.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d54:	d123      	bne.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0204 	orr.w	r2, r3, #4
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e046      	b.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d021      	beq.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fe f8a3 	bl	8002ef0 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d116      	bne.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f043 0220 	orr.w	r2, r3, #32
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e020      	b.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d10c      	bne.n	8004e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	43da      	mvns	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	e00b      	b.n	8004e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	43da      	mvns	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d18d      	bne.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e40:	e02d      	b.n	8004e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f88d 	bl	8004f62 <I2C_IsAcknowledgeFailed>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e02d      	b.n	8004eae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d021      	beq.n	8004e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5a:	f7fe f849 	bl	8002ef0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e007      	b.n	8004eae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b80      	cmp	r3, #128	; 0x80
 8004eaa:	d1ca      	bne.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec2:	e042      	b.n	8004f4a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d119      	bne.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f06f 0210 	mvn.w	r2, #16
 8004eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e029      	b.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f06:	f7fd fff3 	bl	8002ef0 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d302      	bcc.n	8004f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d116      	bne.n	8004f4a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e007      	b.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d1b5      	bne.n	8004ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d11b      	bne.n	8004fb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e267      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d075      	beq.n	80050ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fde:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d00c      	beq.n	8005004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fea:	4b85      	ldr	r3, [pc, #532]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d112      	bne.n	800501c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff6:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005002:	d10b      	bne.n	800501c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005004:	4b7e      	ldr	r3, [pc, #504]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d05b      	beq.n	80050c8 <HAL_RCC_OscConfig+0x108>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d157      	bne.n	80050c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e242      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d106      	bne.n	8005034 <HAL_RCC_OscConfig+0x74>
 8005026:	4b76      	ldr	r3, [pc, #472]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a75      	ldr	r2, [pc, #468]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e01d      	b.n	8005070 <HAL_RCC_OscConfig+0xb0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800503c:	d10c      	bne.n	8005058 <HAL_RCC_OscConfig+0x98>
 800503e:	4b70      	ldr	r3, [pc, #448]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a6f      	ldr	r2, [pc, #444]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4b6d      	ldr	r3, [pc, #436]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6c      	ldr	r2, [pc, #432]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e00b      	b.n	8005070 <HAL_RCC_OscConfig+0xb0>
 8005058:	4b69      	ldr	r3, [pc, #420]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a68      	ldr	r2, [pc, #416]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800505e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	4b66      	ldr	r3, [pc, #408]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a65      	ldr	r2, [pc, #404]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800506a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d013      	beq.n	80050a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fd ff3a 	bl	8002ef0 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005080:	f7fd ff36 	bl	8002ef0 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e207      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b5b      	ldr	r3, [pc, #364]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0xc0>
 800509e:	e014      	b.n	80050ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fd ff26 	bl	8002ef0 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fd ff22 	bl	8002ef0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e1f3      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ba:	4b51      	ldr	r3, [pc, #324]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0xe8>
 80050c6:	e000      	b.n	80050ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d063      	beq.n	800519e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d6:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e2:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d11c      	bne.n	8005128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ee:	4b44      	ldr	r3, [pc, #272]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d116      	bne.n	8005128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	4b41      	ldr	r3, [pc, #260]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_RCC_OscConfig+0x152>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d001      	beq.n	8005112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e1c7      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005112:	4b3b      	ldr	r3, [pc, #236]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4937      	ldr	r1, [pc, #220]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005126:	e03a      	b.n	800519e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d020      	beq.n	8005172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005130:	4b34      	ldr	r3, [pc, #208]	; (8005204 <HAL_RCC_OscConfig+0x244>)
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7fd fedb 	bl	8002ef0 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513e:	f7fd fed7 	bl	8002ef0 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e1a8      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005150:	4b2b      	ldr	r3, [pc, #172]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515c:	4b28      	ldr	r3, [pc, #160]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4925      	ldr	r1, [pc, #148]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800516c:	4313      	orrs	r3, r2
 800516e:	600b      	str	r3, [r1, #0]
 8005170:	e015      	b.n	800519e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCC_OscConfig+0x244>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fd feba 	bl	8002ef0 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005180:	f7fd feb6 	bl	8002ef0 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e187      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d036      	beq.n	8005218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <HAL_RCC_OscConfig+0x248>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fd fe9a 	bl	8002ef0 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c0:	f7fd fe96 	bl	8002ef0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e167      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80051d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x200>
 80051de:	e01b      	b.n	8005218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_OscConfig+0x248>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e6:	f7fd fe83 	bl	8002ef0 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ec:	e00e      	b.n	800520c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ee:	f7fd fe7f 	bl	8002ef0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d907      	bls.n	800520c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e150      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
 8005200:	40023800 	.word	0x40023800
 8005204:	42470000 	.word	0x42470000
 8005208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	4b88      	ldr	r3, [pc, #544]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800520e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ea      	bne.n	80051ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8097 	beq.w	8005354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522a:	4b81      	ldr	r3, [pc, #516]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10f      	bne.n	8005256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	4b7d      	ldr	r3, [pc, #500]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	4a7c      	ldr	r2, [pc, #496]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	6413      	str	r3, [r2, #64]	; 0x40
 8005246:	4b7a      	ldr	r3, [pc, #488]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005256:	4b77      	ldr	r3, [pc, #476]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d118      	bne.n	8005294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005262:	4b74      	ldr	r3, [pc, #464]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a73      	ldr	r2, [pc, #460]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526e:	f7fd fe3f 	bl	8002ef0 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005276:	f7fd fe3b 	bl	8002ef0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e10c      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x2ea>
 800529c:	4b64      	ldr	r3, [pc, #400]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	4a63      	ldr	r2, [pc, #396]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6713      	str	r3, [r2, #112]	; 0x70
 80052a8:	e01c      	b.n	80052e4 <HAL_RCC_OscConfig+0x324>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x30c>
 80052b2:	4b5f      	ldr	r3, [pc, #380]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	4a5e      	ldr	r2, [pc, #376]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052b8:	f043 0304 	orr.w	r3, r3, #4
 80052bc:	6713      	str	r3, [r2, #112]	; 0x70
 80052be:	4b5c      	ldr	r3, [pc, #368]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a5b      	ldr	r2, [pc, #364]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ca:	e00b      	b.n	80052e4 <HAL_RCC_OscConfig+0x324>
 80052cc:	4b58      	ldr	r3, [pc, #352]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	4a57      	ldr	r2, [pc, #348]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	6713      	str	r3, [r2, #112]	; 0x70
 80052d8:	4b55      	ldr	r3, [pc, #340]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	4a54      	ldr	r2, [pc, #336]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052de:	f023 0304 	bic.w	r3, r3, #4
 80052e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d015      	beq.n	8005318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ec:	f7fd fe00 	bl	8002ef0 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f2:	e00a      	b.n	800530a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f4:	f7fd fdfc 	bl	8002ef0 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0cb      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530a:	4b49      	ldr	r3, [pc, #292]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0ee      	beq.n	80052f4 <HAL_RCC_OscConfig+0x334>
 8005316:	e014      	b.n	8005342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005318:	f7fd fdea 	bl	8002ef0 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531e:	e00a      	b.n	8005336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fd fde6 	bl	8002ef0 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e0b5      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005336:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1ee      	bne.n	8005320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d105      	bne.n	8005354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005348:	4b39      	ldr	r3, [pc, #228]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	4a38      	ldr	r2, [pc, #224]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800534e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80a1 	beq.w	80054a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800535e:	4b34      	ldr	r3, [pc, #208]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b08      	cmp	r3, #8
 8005368:	d05c      	beq.n	8005424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d141      	bne.n	80053f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005372:	4b31      	ldr	r3, [pc, #196]	; (8005438 <HAL_RCC_OscConfig+0x478>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fd fdba 	bl	8002ef0 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005380:	f7fd fdb6 	bl	8002ef0 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e087      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005392:	4b27      	ldr	r3, [pc, #156]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	3b01      	subs	r3, #1
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	061b      	lsls	r3, r3, #24
 80053c2:	491b      	ldr	r1, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <HAL_RCC_OscConfig+0x478>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fd fd8f 	bl	8002ef0 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fd fd8b 	bl	8002ef0 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e05c      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x416>
 80053f4:	e054      	b.n	80054a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <HAL_RCC_OscConfig+0x478>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fd fd78 	bl	8002ef0 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005404:	f7fd fd74 	bl	8002ef0 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e045      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x444>
 8005422:	e03d      	b.n	80054a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e038      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
 8005430:	40023800 	.word	0x40023800
 8005434:	40007000 	.word	0x40007000
 8005438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800543c:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <HAL_RCC_OscConfig+0x4ec>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d028      	beq.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d121      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d11a      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800546c:	4013      	ands	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005474:	4293      	cmp	r3, r2
 8005476:	d111      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	3b01      	subs	r3, #1
 8005486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005488:	429a      	cmp	r2, r3
 800548a:	d107      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40023800 	.word	0x40023800

080054b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0cc      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b68      	ldr	r3, [pc, #416]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d90c      	bls.n	80054ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b65      	ldr	r3, [pc, #404]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b63      	ldr	r3, [pc, #396]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0b8      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d020      	beq.n	800553a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005504:	4b59      	ldr	r3, [pc, #356]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4a58      	ldr	r2, [pc, #352]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800550e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800551c:	4b53      	ldr	r3, [pc, #332]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4a52      	ldr	r2, [pc, #328]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005528:	4b50      	ldr	r3, [pc, #320]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	494d      	ldr	r1, [pc, #308]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	4313      	orrs	r3, r2
 8005538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d044      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d107      	bne.n	800555e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	4b47      	ldr	r3, [pc, #284]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d119      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e07f      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d003      	beq.n	800556e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556a:	2b03      	cmp	r3, #3
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556e:	4b3f      	ldr	r3, [pc, #252]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e06f      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557e:	4b3b      	ldr	r3, [pc, #236]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e067      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800558e:	4b37      	ldr	r3, [pc, #220]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 0203 	bic.w	r2, r3, #3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4934      	ldr	r1, [pc, #208]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	4313      	orrs	r3, r2
 800559e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a0:	f7fd fca6 	bl	8002ef0 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	e00a      	b.n	80055be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a8:	f7fd fca2 	bl	8002ef0 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e04f      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	4b2b      	ldr	r3, [pc, #172]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 020c 	and.w	r2, r3, #12
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1eb      	bne.n	80055a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d0:	4b25      	ldr	r3, [pc, #148]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d20c      	bcs.n	80055f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b22      	ldr	r3, [pc, #136]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b20      	ldr	r3, [pc, #128]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e032      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005604:	4b19      	ldr	r3, [pc, #100]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4916      	ldr	r1, [pc, #88]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	490e      	ldr	r1, [pc, #56]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005636:	f000 f821 	bl	800567c <HAL_RCC_GetSysClockFreq>
 800563a:	4602      	mov	r2, r0
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	490a      	ldr	r1, [pc, #40]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 8005648:	5ccb      	ldrb	r3, [r1, r3]
 800564a:	fa22 f303 	lsr.w	r3, r2, r3
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd fc06 	bl	8002e68 <HAL_InitTick>

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40023c00 	.word	0x40023c00
 800566c:	40023800 	.word	0x40023800
 8005670:	0800a704 	.word	0x0800a704
 8005674:	20000014 	.word	0x20000014
 8005678:	20000018 	.word	0x20000018

0800567c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800567c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005680:	b094      	sub	sp, #80	; 0x50
 8005682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	647b      	str	r3, [r7, #68]	; 0x44
 8005688:	2300      	movs	r3, #0
 800568a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568c:	2300      	movs	r3, #0
 800568e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005694:	4b79      	ldr	r3, [pc, #484]	; (800587c <HAL_RCC_GetSysClockFreq+0x200>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d00d      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x40>
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	f200 80e1 	bhi.w	8005868 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_RCC_GetSysClockFreq+0x34>
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d003      	beq.n	80056b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ae:	e0db      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b73      	ldr	r3, [pc, #460]	; (8005880 <HAL_RCC_GetSysClockFreq+0x204>)
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056b4:	e0db      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056b6:	4b73      	ldr	r3, [pc, #460]	; (8005884 <HAL_RCC_GetSysClockFreq+0x208>)
 80056b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ba:	e0d8      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056bc:	4b6f      	ldr	r3, [pc, #444]	; (800587c <HAL_RCC_GetSysClockFreq+0x200>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056c6:	4b6d      	ldr	r3, [pc, #436]	; (800587c <HAL_RCC_GetSysClockFreq+0x200>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d063      	beq.n	800579a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d2:	4b6a      	ldr	r3, [pc, #424]	; (800587c <HAL_RCC_GetSysClockFreq+0x200>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	2200      	movs	r2, #0
 80056da:	63bb      	str	r3, [r7, #56]	; 0x38
 80056dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e4:	633b      	str	r3, [r7, #48]	; 0x30
 80056e6:	2300      	movs	r3, #0
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056ee:	4622      	mov	r2, r4
 80056f0:	462b      	mov	r3, r5
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	0159      	lsls	r1, r3, #5
 80056fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005700:	0150      	lsls	r0, r2, #5
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4621      	mov	r1, r4
 8005708:	1a51      	subs	r1, r2, r1
 800570a:	6139      	str	r1, [r7, #16]
 800570c:	4629      	mov	r1, r5
 800570e:	eb63 0301 	sbc.w	r3, r3, r1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005720:	4659      	mov	r1, fp
 8005722:	018b      	lsls	r3, r1, #6
 8005724:	4651      	mov	r1, sl
 8005726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800572a:	4651      	mov	r1, sl
 800572c:	018a      	lsls	r2, r1, #6
 800572e:	4651      	mov	r1, sl
 8005730:	ebb2 0801 	subs.w	r8, r2, r1
 8005734:	4659      	mov	r1, fp
 8005736:	eb63 0901 	sbc.w	r9, r3, r1
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800574e:	4690      	mov	r8, r2
 8005750:	4699      	mov	r9, r3
 8005752:	4623      	mov	r3, r4
 8005754:	eb18 0303 	adds.w	r3, r8, r3
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	462b      	mov	r3, r5
 800575c:	eb49 0303 	adc.w	r3, r9, r3
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800576e:	4629      	mov	r1, r5
 8005770:	024b      	lsls	r3, r1, #9
 8005772:	4621      	mov	r1, r4
 8005774:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005778:	4621      	mov	r1, r4
 800577a:	024a      	lsls	r2, r1, #9
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005782:	2200      	movs	r2, #0
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
 8005786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800578c:	f7fb f93a 	bl	8000a04 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4613      	mov	r3, r2
 8005796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005798:	e058      	b.n	800584c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579a:	4b38      	ldr	r3, [pc, #224]	; (800587c <HAL_RCC_GetSysClockFreq+0x200>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	099b      	lsrs	r3, r3, #6
 80057a0:	2200      	movs	r2, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	4611      	mov	r1, r2
 80057a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	2300      	movs	r3, #0
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
 80057b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057b4:	4642      	mov	r2, r8
 80057b6:	464b      	mov	r3, r9
 80057b8:	f04f 0000 	mov.w	r0, #0
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	0159      	lsls	r1, r3, #5
 80057c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c6:	0150      	lsls	r0, r2, #5
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4641      	mov	r1, r8
 80057ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80057d2:	4649      	mov	r1, r9
 80057d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057ec:	ebb2 040a 	subs.w	r4, r2, sl
 80057f0:	eb63 050b 	sbc.w	r5, r3, fp
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	00eb      	lsls	r3, r5, #3
 80057fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005802:	00e2      	lsls	r2, r4, #3
 8005804:	4614      	mov	r4, r2
 8005806:	461d      	mov	r5, r3
 8005808:	4643      	mov	r3, r8
 800580a:	18e3      	adds	r3, r4, r3
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	464b      	mov	r3, r9
 8005810:	eb45 0303 	adc.w	r3, r5, r3
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005822:	4629      	mov	r1, r5
 8005824:	028b      	lsls	r3, r1, #10
 8005826:	4621      	mov	r1, r4
 8005828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800582c:	4621      	mov	r1, r4
 800582e:	028a      	lsls	r2, r1, #10
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005836:	2200      	movs	r2, #0
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	61fa      	str	r2, [r7, #28]
 800583c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005840:	f7fb f8e0 	bl	8000a04 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4613      	mov	r3, r2
 800584a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800584c:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_RCC_GetSysClockFreq+0x200>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	3301      	adds	r3, #1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800585c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800585e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005866:	e002      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCC_GetSysClockFreq+0x204>)
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800586c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800586e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005870:	4618      	mov	r0, r3
 8005872:	3750      	adds	r7, #80	; 0x50
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800
 8005880:	00f42400 	.word	0x00f42400
 8005884:	007a1200 	.word	0x007a1200

08005888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <HAL_RCC_GetHCLKFreq+0x14>)
 800588e:	681b      	ldr	r3, [r3, #0]
}
 8005890:	4618      	mov	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000014 	.word	0x20000014

080058a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058a4:	f7ff fff0 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	0a9b      	lsrs	r3, r3, #10
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4903      	ldr	r1, [pc, #12]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b6:	5ccb      	ldrb	r3, [r1, r3]
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40023800 	.word	0x40023800
 80058c4:	0800a714 	.word	0x0800a714

080058c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e07b      	b.n	80059d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ea:	d009      	beq.n	8005900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	61da      	str	r2, [r3, #28]
 80058f2:	e005      	b.n	8005900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fd f84a 	bl	80029b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	ea42 0103 	orr.w	r1, r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	f003 0104 	and.w	r1, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f003 0210 	and.w	r2, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b088      	sub	sp, #32
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_SPI_Transmit+0x22>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e126      	b.n	8005c4a <HAL_SPI_Transmit+0x270>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a04:	f7fd fa74 	bl	8002ef0 <HAL_GetTick>
 8005a08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d002      	beq.n	8005a20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a1e:	e10b      	b.n	8005c38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0x52>
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a30:	e102      	b.n	8005c38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2203      	movs	r2, #3
 8005a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	88fa      	ldrh	r2, [r7, #6]
 8005a4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a78:	d10f      	bne.n	8005a9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d007      	beq.n	8005ab8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac0:	d14b      	bne.n	8005b5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_SPI_Transmit+0xf6>
 8005aca:	8afb      	ldrh	r3, [r7, #22]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d13e      	bne.n	8005b4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	1c9a      	adds	r2, r3, #2
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005af4:	e02b      	b.n	8005b4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d112      	bne.n	8005b2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b28:	e011      	b.n	8005b4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2a:	f7fd f9e1 	bl	8002ef0 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d803      	bhi.n	8005b42 <HAL_SPI_Transmit+0x168>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_Transmit+0x16e>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b4c:	e074      	b.n	8005c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ce      	bne.n	8005af6 <HAL_SPI_Transmit+0x11c>
 8005b58:	e04c      	b.n	8005bf4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x18e>
 8005b62:	8afb      	ldrh	r3, [r7, #22]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d140      	bne.n	8005bea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	7812      	ldrb	r2, [r2, #0]
 8005b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b8e:	e02c      	b.n	8005bea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d113      	bne.n	8005bc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bc4:	e011      	b.n	8005bea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc6:	f7fd f993 	bl	8002ef0 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d803      	bhi.n	8005bde <HAL_SPI_Transmit+0x204>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d102      	bne.n	8005be4 <HAL_SPI_Transmit+0x20a>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005be8:	e026      	b.n	8005c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1cd      	bne.n	8005b90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fbcb 	bl	8006394 <SPI_EndRxTxTransaction>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e000      	b.n	8005c38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005c36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b088      	sub	sp, #32
 8005c56:	af02      	add	r7, sp, #8
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	603b      	str	r3, [r7, #0]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c6e:	d112      	bne.n	8005c96 <HAL_SPI_Receive+0x44>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10e      	bne.n	8005c96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2204      	movs	r2, #4
 8005c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f8f1 	bl	8005e74 <HAL_SPI_TransmitReceive>
 8005c92:	4603      	mov	r3, r0
 8005c94:	e0ea      	b.n	8005e6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_SPI_Receive+0x52>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e0e3      	b.n	8005e6c <HAL_SPI_Receive+0x21a>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cac:	f7fd f920 	bl	8002ef0 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cc2:	e0ca      	b.n	8005e5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_SPI_Receive+0x7e>
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cd4:	e0c1      	b.n	8005e5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	88fa      	ldrh	r2, [r7, #6]
 8005cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1c:	d10f      	bne.n	8005d3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d007      	beq.n	8005d5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d162      	bne.n	8005e2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d64:	e02e      	b.n	8005dc4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d115      	bne.n	8005da0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f103 020c 	add.w	r2, r3, #12
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	7812      	ldrb	r2, [r2, #0]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d9e:	e011      	b.n	8005dc4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da0:	f7fd f8a6 	bl	8002ef0 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d803      	bhi.n	8005db8 <HAL_SPI_Receive+0x166>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db6:	d102      	bne.n	8005dbe <HAL_SPI_Receive+0x16c>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dc2:	e04a      	b.n	8005e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1cb      	bne.n	8005d66 <HAL_SPI_Receive+0x114>
 8005dce:	e031      	b.n	8005e34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d113      	bne.n	8005e06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	b292      	uxth	r2, r2
 8005dea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	1c9a      	adds	r2, r3, #2
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e04:	e011      	b.n	8005e2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e06:	f7fd f873 	bl	8002ef0 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d803      	bhi.n	8005e1e <HAL_SPI_Receive+0x1cc>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d102      	bne.n	8005e24 <HAL_SPI_Receive+0x1d2>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e28:	e017      	b.n	8005e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1cd      	bne.n	8005dd0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fa45 	bl	80062c8 <SPI_EndRxTransaction>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
 8005e56:	e000      	b.n	8005e5a <HAL_SPI_Receive+0x208>
  }

error :
 8005e58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08c      	sub	sp, #48	; 0x30
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e82:	2301      	movs	r3, #1
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x26>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e18a      	b.n	80061b0 <HAL_SPI_TransmitReceive+0x33c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea2:	f7fd f825 	bl	8002ef0 <HAL_GetTick>
 8005ea6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005eb8:	887b      	ldrh	r3, [r7, #2]
 8005eba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d00f      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x70>
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eca:	d107      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x68>
 8005ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d003      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ee2:	e15b      	b.n	800619c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_SPI_TransmitReceive+0x82>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_TransmitReceive+0x82>
 8005ef0:	887b      	ldrh	r3, [r7, #2]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005efc:	e14e      	b.n	800619c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d003      	beq.n	8005f12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	887a      	ldrh	r2, [r7, #2]
 8005f22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	887a      	ldrh	r2, [r7, #2]
 8005f28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	887a      	ldrh	r2, [r7, #2]
 8005f34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	887a      	ldrh	r2, [r7, #2]
 8005f3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d007      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6e:	d178      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x10a>
 8005f78:	8b7b      	ldrh	r3, [r7, #26]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d166      	bne.n	800604c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	881a      	ldrh	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	1c9a      	adds	r2, r3, #2
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa2:	e053      	b.n	800604c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d11b      	bne.n	8005fea <HAL_SPI_TransmitReceive+0x176>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d016      	beq.n	8005fea <HAL_SPI_TransmitReceive+0x176>
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d113      	bne.n	8005fea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d119      	bne.n	800602c <HAL_SPI_TransmitReceive+0x1b8>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d014      	beq.n	800602c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	b292      	uxth	r2, r2
 800600e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	1c9a      	adds	r2, r3, #2
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006028:	2301      	movs	r3, #1
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800602c:	f7fc ff60 	bl	8002ef0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006038:	429a      	cmp	r2, r3
 800603a:	d807      	bhi.n	800604c <HAL_SPI_TransmitReceive+0x1d8>
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d003      	beq.n	800604c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800604a:	e0a7      	b.n	800619c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1a6      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x130>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1a1      	bne.n	8005fa4 <HAL_SPI_TransmitReceive+0x130>
 8006060:	e07c      	b.n	800615c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_SPI_TransmitReceive+0x1fc>
 800606a:	8b7b      	ldrh	r3, [r7, #26]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d16b      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006096:	e057      	b.n	8006148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d11c      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x26c>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d017      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x26c>
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d114      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	7812      	ldrb	r2, [r2, #0]
 80060c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d119      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2ae>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d014      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800611e:	2301      	movs	r3, #1
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006122:	f7fc fee5 	bl	8002ef0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800612e:	429a      	cmp	r2, r3
 8006130:	d803      	bhi.n	800613a <HAL_SPI_TransmitReceive+0x2c6>
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d102      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x2cc>
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006146:	e029      	b.n	800619c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1a2      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x224>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d19d      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f917 	bl	8006394 <SPI_EndRxTxTransaction>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006178:	e010      	b.n	800619c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	e000      	b.n	800619c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800619a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3730      	adds	r7, #48	; 0x30
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061c8:	f7fc fe92 	bl	8002ef0 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061d8:	f7fc fe8a 	bl	8002ef0 <HAL_GetTick>
 80061dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061de:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	015b      	lsls	r3, r3, #5
 80061e4:	0d1b      	lsrs	r3, r3, #20
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	fb02 f303 	mul.w	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ee:	e054      	b.n	800629a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d050      	beq.n	800629a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f8:	f7fc fe7a 	bl	8002ef0 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	429a      	cmp	r2, r3
 8006206:	d902      	bls.n	800620e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d13d      	bne.n	800628a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800621c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006226:	d111      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006230:	d004      	beq.n	800623c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623a:	d107      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006254:	d10f      	bne.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e017      	b.n	80062ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	3b01      	subs	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	bf0c      	ite	eq
 80062aa:	2301      	moveq	r3, #1
 80062ac:	2300      	movne	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d19b      	bne.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000014 	.word	0x20000014

080062c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062dc:	d111      	bne.n	8006302 <SPI_EndRxTransaction+0x3a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e6:	d004      	beq.n	80062f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f0:	d107      	bne.n	8006302 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630a:	d12a      	bne.n	8006362 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006314:	d012      	beq.n	800633c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	2180      	movs	r1, #128	; 0x80
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ff49 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d02d      	beq.n	8006388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e026      	b.n	800638a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2200      	movs	r2, #0
 8006344:	2101      	movs	r1, #1
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ff36 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01a      	beq.n	8006388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e013      	b.n	800638a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2200      	movs	r2, #0
 800636a:	2101      	movs	r1, #1
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ff23 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e000      	b.n	800638a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <SPI_EndRxTxTransaction+0x7c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1b      	ldr	r2, [pc, #108]	; (8006414 <SPI_EndRxTxTransaction+0x80>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	0d5b      	lsrs	r3, r3, #21
 80063ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063be:	d112      	bne.n	80063e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	2180      	movs	r1, #128	; 0x80
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff fef4 	bl	80061b8 <SPI_WaitFlagStateUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d016      	beq.n	8006404 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e00f      	b.n	8006406 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d0f2      	beq.n	80063e6 <SPI_EndRxTxTransaction+0x52>
 8006400:	e000      	b.n	8006404 <SPI_EndRxTxTransaction+0x70>
        break;
 8006402:	bf00      	nop
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000014 	.word	0x20000014
 8006414:	165e9f81 	.word	0x165e9f81

08006418 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e034      	b.n	8006498 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7fa ffb6 	bl	80013b4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3308      	adds	r3, #8
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f001 f860 	bl	8007518 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	461a      	mov	r2, r3
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	f001 f8aa 	bl	80075bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6858      	ldr	r0, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	f001 f8df 	bl	8007638 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	6892      	ldr	r2, [r2, #8]
 8006482:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	6892      	ldr	r2, [r2, #8]
 800648e:	f041 0101 	orr.w	r1, r1, #1
 8006492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e041      	b.n	8006536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fc fbce 	bl	8002c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fc7a 	bl	8006dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	d001      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e04e      	b.n	80065f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a23      	ldr	r2, [pc, #140]	; (8006604 <HAL_TIM_Base_Start_IT+0xc4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d022      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006582:	d01d      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <HAL_TIM_Base_Start_IT+0xc8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d018      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <HAL_TIM_Base_Start_IT+0xcc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d013      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_TIM_Base_Start_IT+0xd0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00e      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1b      	ldr	r2, [pc, #108]	; (8006614 <HAL_TIM_Base_Start_IT+0xd4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a19      	ldr	r2, [pc, #100]	; (8006618 <HAL_TIM_Base_Start_IT+0xd8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a18      	ldr	r2, [pc, #96]	; (800661c <HAL_TIM_Base_Start_IT+0xdc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d111      	bne.n	80065e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b06      	cmp	r3, #6
 80065d0:	d010      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e2:	e007      	b.n	80065f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40010400 	.word	0x40010400
 8006618:	40014000 	.word	0x40014000
 800661c:	40001800 	.word	0x40001800

08006620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e041      	b.n	80066b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f839 	bl	80066be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f000 fbba 	bl	8006dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_TIM_PWM_Start+0x24>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	bf14      	ite	ne
 80066f0:	2301      	movne	r3, #1
 80066f2:	2300      	moveq	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	e022      	b.n	800673e <HAL_TIM_PWM_Start+0x6a>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d109      	bne.n	8006712 <HAL_TIM_PWM_Start+0x3e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	bf14      	ite	ne
 800670a:	2301      	movne	r3, #1
 800670c:	2300      	moveq	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	e015      	b.n	800673e <HAL_TIM_PWM_Start+0x6a>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b08      	cmp	r3, #8
 8006716:	d109      	bne.n	800672c <HAL_TIM_PWM_Start+0x58>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	e008      	b.n	800673e <HAL_TIM_PWM_Start+0x6a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	bf14      	ite	ne
 8006738:	2301      	movne	r3, #1
 800673a:	2300      	moveq	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e07c      	b.n	8006840 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <HAL_TIM_PWM_Start+0x82>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006754:	e013      	b.n	800677e <HAL_TIM_PWM_Start+0xaa>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b04      	cmp	r3, #4
 800675a:	d104      	bne.n	8006766 <HAL_TIM_PWM_Start+0x92>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006764:	e00b      	b.n	800677e <HAL_TIM_PWM_Start+0xaa>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b08      	cmp	r3, #8
 800676a:	d104      	bne.n	8006776 <HAL_TIM_PWM_Start+0xa2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006774:	e003      	b.n	800677e <HAL_TIM_PWM_Start+0xaa>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2202      	movs	r2, #2
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2201      	movs	r2, #1
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fe10 	bl	80073ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a2d      	ldr	r2, [pc, #180]	; (8006848 <HAL_TIM_PWM_Start+0x174>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d004      	beq.n	80067a0 <HAL_TIM_PWM_Start+0xcc>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2c      	ldr	r2, [pc, #176]	; (800684c <HAL_TIM_PWM_Start+0x178>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d101      	bne.n	80067a4 <HAL_TIM_PWM_Start+0xd0>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <HAL_TIM_PWM_Start+0xd2>
 80067a4:	2300      	movs	r3, #0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a22      	ldr	r2, [pc, #136]	; (8006848 <HAL_TIM_PWM_Start+0x174>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d022      	beq.n	800680a <HAL_TIM_PWM_Start+0x136>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d01d      	beq.n	800680a <HAL_TIM_PWM_Start+0x136>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1f      	ldr	r2, [pc, #124]	; (8006850 <HAL_TIM_PWM_Start+0x17c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d018      	beq.n	800680a <HAL_TIM_PWM_Start+0x136>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <HAL_TIM_PWM_Start+0x180>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d013      	beq.n	800680a <HAL_TIM_PWM_Start+0x136>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1c      	ldr	r2, [pc, #112]	; (8006858 <HAL_TIM_PWM_Start+0x184>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00e      	beq.n	800680a <HAL_TIM_PWM_Start+0x136>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a16      	ldr	r2, [pc, #88]	; (800684c <HAL_TIM_PWM_Start+0x178>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d009      	beq.n	800680a <HAL_TIM_PWM_Start+0x136>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a18      	ldr	r2, [pc, #96]	; (800685c <HAL_TIM_PWM_Start+0x188>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d004      	beq.n	800680a <HAL_TIM_PWM_Start+0x136>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a16      	ldr	r2, [pc, #88]	; (8006860 <HAL_TIM_PWM_Start+0x18c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d111      	bne.n	800682e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b06      	cmp	r3, #6
 800681a:	d010      	beq.n	800683e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682c:	e007      	b.n	800683e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40010000 	.word	0x40010000
 800684c:	40010400 	.word	0x40010400
 8006850:	40000400 	.word	0x40000400
 8006854:	40000800 	.word	0x40000800
 8006858:	40000c00 	.word	0x40000c00
 800685c:	40014000 	.word	0x40014000
 8006860:	40001800 	.word	0x40001800

08006864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d122      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b02      	cmp	r3, #2
 8006886:	d11b      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0202 	mvn.w	r2, #2
 8006890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa77 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa69 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa7a 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d122      	bne.n	8006914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d11b      	bne.n	8006914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0204 	mvn.w	r2, #4
 80068e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa4d 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa3f 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa50 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b08      	cmp	r3, #8
 8006920:	d122      	bne.n	8006968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b08      	cmp	r3, #8
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0208 	mvn.w	r2, #8
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2204      	movs	r2, #4
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa23 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa15 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fa26 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b10      	cmp	r3, #16
 8006974:	d122      	bne.n	80069bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b10      	cmp	r3, #16
 8006982:	d11b      	bne.n	80069bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0210 	mvn.w	r2, #16
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2208      	movs	r2, #8
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f9f9 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9eb 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9fc 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10e      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0201 	mvn.w	r2, #1
 80069e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fb ff9a 	bl	800291c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d10e      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d107      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fd78 	bl	8007504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d10e      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d107      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f9c1 	bl	8006dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d10e      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d107      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0220 	mvn.w	r2, #32
 8006a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fd42 	bl	80074f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e0ae      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	f200 809f 	bhi.w	8006be0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006be1 	.word	0x08006be1
 8006ab0:	08006be1 	.word	0x08006be1
 8006ab4:	08006be1 	.word	0x08006be1
 8006ab8:	08006b1d 	.word	0x08006b1d
 8006abc:	08006be1 	.word	0x08006be1
 8006ac0:	08006be1 	.word	0x08006be1
 8006ac4:	08006be1 	.word	0x08006be1
 8006ac8:	08006b5f 	.word	0x08006b5f
 8006acc:	08006be1 	.word	0x08006be1
 8006ad0:	08006be1 	.word	0x08006be1
 8006ad4:	08006be1 	.word	0x08006be1
 8006ad8:	08006b9f 	.word	0x08006b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fa18 	bl	8006f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0208 	orr.w	r2, r2, #8
 8006af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6999      	ldr	r1, [r3, #24]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	619a      	str	r2, [r3, #24]
      break;
 8006b1a:	e064      	b.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fa68 	bl	8006ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	619a      	str	r2, [r3, #24]
      break;
 8006b5c:	e043      	b.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fabd 	bl	80070e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0208 	orr.w	r2, r2, #8
 8006b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0204 	bic.w	r2, r2, #4
 8006b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69d9      	ldr	r1, [r3, #28]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	61da      	str	r2, [r3, #28]
      break;
 8006b9c:	e023      	b.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fb11 	bl	80071cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	021a      	lsls	r2, r3, #8
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	61da      	str	r2, [r3, #28]
      break;
 8006bde:	e002      	b.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e0b4      	b.n	8006d7e <HAL_TIM_ConfigClockSource+0x186>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4c:	d03e      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0xd4>
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c52:	f200 8087 	bhi.w	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5a:	f000 8086 	beq.w	8006d6a <HAL_TIM_ConfigClockSource+0x172>
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d87f      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c64:	2b70      	cmp	r3, #112	; 0x70
 8006c66:	d01a      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0xa6>
 8006c68:	2b70      	cmp	r3, #112	; 0x70
 8006c6a:	d87b      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6c:	2b60      	cmp	r3, #96	; 0x60
 8006c6e:	d050      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0x11a>
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d877      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b50      	cmp	r3, #80	; 0x50
 8006c76:	d03c      	beq.n	8006cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c78:	2b50      	cmp	r3, #80	; 0x50
 8006c7a:	d873      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d058      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x13a>
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d86f      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c84:	2b30      	cmp	r3, #48	; 0x30
 8006c86:	d064      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c88:	2b30      	cmp	r3, #48	; 0x30
 8006c8a:	d86b      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d060      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d867      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d05c      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d05a      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c9c:	e062      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6899      	ldr	r1, [r3, #8]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f000 fb5d 	bl	800736c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	609a      	str	r2, [r3, #8]
      break;
 8006cca:	e04f      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	6899      	ldr	r1, [r3, #8]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f000 fb46 	bl	800736c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cee:	609a      	str	r2, [r3, #8]
      break;
 8006cf0:	e03c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6859      	ldr	r1, [r3, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f000 faba 	bl	8007278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2150      	movs	r1, #80	; 0x50
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fb13 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006d10:	e02c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6859      	ldr	r1, [r3, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f000 fad9 	bl	80072d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2160      	movs	r1, #96	; 0x60
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fb03 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006d30:	e01c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f000 fa9a 	bl	8007278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2140      	movs	r1, #64	; 0x40
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 faf3 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006d50:	e00c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f000 faea 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006d62:	e003      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	e000      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a40      	ldr	r2, [pc, #256]	; (8006eec <TIM_Base_SetConfig+0x114>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df6:	d00f      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a3d      	ldr	r2, [pc, #244]	; (8006ef0 <TIM_Base_SetConfig+0x118>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00b      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a3c      	ldr	r2, [pc, #240]	; (8006ef4 <TIM_Base_SetConfig+0x11c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a3b      	ldr	r2, [pc, #236]	; (8006ef8 <TIM_Base_SetConfig+0x120>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a3a      	ldr	r2, [pc, #232]	; (8006efc <TIM_Base_SetConfig+0x124>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d108      	bne.n	8006e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2f      	ldr	r2, [pc, #188]	; (8006eec <TIM_Base_SetConfig+0x114>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d02b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d027      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ef0 <TIM_Base_SetConfig+0x118>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d023      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <TIM_Base_SetConfig+0x11c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01f      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <TIM_Base_SetConfig+0x120>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a29      	ldr	r2, [pc, #164]	; (8006efc <TIM_Base_SetConfig+0x124>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d017      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a28      	ldr	r2, [pc, #160]	; (8006f00 <TIM_Base_SetConfig+0x128>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a27      	ldr	r2, [pc, #156]	; (8006f04 <TIM_Base_SetConfig+0x12c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <TIM_Base_SetConfig+0x130>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <TIM_Base_SetConfig+0x134>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a24      	ldr	r2, [pc, #144]	; (8006f10 <TIM_Base_SetConfig+0x138>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a23      	ldr	r2, [pc, #140]	; (8006f14 <TIM_Base_SetConfig+0x13c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d108      	bne.n	8006e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <TIM_Base_SetConfig+0x114>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_Base_SetConfig+0xf8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a0c      	ldr	r2, [pc, #48]	; (8006efc <TIM_Base_SetConfig+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d103      	bne.n	8006ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	615a      	str	r2, [r3, #20]
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40010000 	.word	0x40010000
 8006ef0:	40000400 	.word	0x40000400
 8006ef4:	40000800 	.word	0x40000800
 8006ef8:	40000c00 	.word	0x40000c00
 8006efc:	40010400 	.word	0x40010400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	40014400 	.word	0x40014400
 8006f08:	40014800 	.word	0x40014800
 8006f0c:	40001800 	.word	0x40001800
 8006f10:	40001c00 	.word	0x40001c00
 8006f14:	40002000 	.word	0x40002000

08006f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f023 0201 	bic.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 0302 	bic.w	r3, r3, #2
 8006f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <TIM_OC1_SetConfig+0xd8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_OC1_SetConfig+0x64>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <TIM_OC1_SetConfig+0xdc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d10c      	bne.n	8006f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f023 0308 	bic.w	r3, r3, #8
 8006f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f023 0304 	bic.w	r3, r3, #4
 8006f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <TIM_OC1_SetConfig+0xd8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC1_SetConfig+0x8e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a14      	ldr	r2, [pc, #80]	; (8006ff4 <TIM_OC1_SetConfig+0xdc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d111      	bne.n	8006fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40010400 	.word	0x40010400

08006ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0210 	bic.w	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0320 	bic.w	r3, r3, #32
 8007042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a22      	ldr	r2, [pc, #136]	; (80070dc <TIM_OC2_SetConfig+0xe4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_OC2_SetConfig+0x68>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a21      	ldr	r2, [pc, #132]	; (80070e0 <TIM_OC2_SetConfig+0xe8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10d      	bne.n	800707c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a17      	ldr	r2, [pc, #92]	; (80070dc <TIM_OC2_SetConfig+0xe4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC2_SetConfig+0x94>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <TIM_OC2_SetConfig+0xe8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d113      	bne.n	80070b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800709a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40010400 	.word	0x40010400

080070e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800712c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <TIM_OC3_SetConfig+0xe0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <TIM_OC3_SetConfig+0x66>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <TIM_OC3_SetConfig+0xe4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d10d      	bne.n	8007166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a16      	ldr	r2, [pc, #88]	; (80071c4 <TIM_OC3_SetConfig+0xe0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_OC3_SetConfig+0x92>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <TIM_OC3_SetConfig+0xe4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d113      	bne.n	800719e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800717c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40010400 	.word	0x40010400

080071cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	031b      	lsls	r3, r3, #12
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a12      	ldr	r2, [pc, #72]	; (8007270 <TIM_OC4_SetConfig+0xa4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_OC4_SetConfig+0x68>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a11      	ldr	r2, [pc, #68]	; (8007274 <TIM_OC4_SetConfig+0xa8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d109      	bne.n	8007248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800723a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	019b      	lsls	r3, r3, #6
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0201 	bic.w	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 030a 	bic.w	r3, r3, #10
 80072b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	621a      	str	r2, [r3, #32]
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f023 0210 	bic.w	r2, r3, #16
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	031b      	lsls	r3, r3, #12
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	f043 0307 	orr.w	r3, r3, #7
 8007358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	609a      	str	r2, [r3, #8]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	431a      	orrs	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	43db      	mvns	r3, r3
 80073ce:	401a      	ands	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e05a      	b.n	80074c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d022      	beq.n	800749a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745c:	d01d      	beq.n	800749a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1d      	ldr	r2, [pc, #116]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d018      	beq.n	800749a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1b      	ldr	r2, [pc, #108]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1a      	ldr	r2, [pc, #104]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00e      	beq.n	800749a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a18      	ldr	r2, [pc, #96]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a15      	ldr	r2, [pc, #84]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d10c      	bne.n	80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40000400 	.word	0x40000400
 80074dc:	40000800 	.word	0x40000800
 80074e0:	40000c00 	.word	0x40000c00
 80074e4:	40010400 	.word	0x40010400
 80074e8:	40014000 	.word	0x40014000
 80074ec:	40001800 	.word	0x40001800

080074f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007530:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4b20      	ldr	r3, [pc, #128]	; (80075b8 <FSMC_NORSRAM_Init+0xa0>)
 8007536:	4013      	ands	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007542:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007548:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800754e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007554:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800755a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007560:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007566:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800756c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007572:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007578:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800757e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007584:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d103      	bne.n	800759c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68f9      	ldr	r1, [r7, #12]
 80075a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	fff00080 	.word	0xfff00080

080075bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80075de:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80075f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80075fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007604:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	3b02      	subs	r3, #2
 800760c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800760e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007614:	4313      	orrs	r3, r2
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6979      	ldr	r1, [r7, #20]
 8007624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007650:	d122      	bne.n	8007698 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007660:	4013      	ands	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800766e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007676:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800767e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007684:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6979      	ldr	r1, [r7, #20]
 8007692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007696:	e005      	b.n	80076a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80076a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	cff00000 	.word	0xcff00000

080076b8 <memset>:
 80076b8:	4402      	add	r2, r0
 80076ba:	4603      	mov	r3, r0
 80076bc:	4293      	cmp	r3, r2
 80076be:	d100      	bne.n	80076c2 <memset+0xa>
 80076c0:	4770      	bx	lr
 80076c2:	f803 1b01 	strb.w	r1, [r3], #1
 80076c6:	e7f9      	b.n	80076bc <memset+0x4>

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4d0d      	ldr	r5, [pc, #52]	; (8007700 <__libc_init_array+0x38>)
 80076cc:	4c0d      	ldr	r4, [pc, #52]	; (8007704 <__libc_init_array+0x3c>)
 80076ce:	1b64      	subs	r4, r4, r5
 80076d0:	10a4      	asrs	r4, r4, #2
 80076d2:	2600      	movs	r6, #0
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	4d0b      	ldr	r5, [pc, #44]	; (8007708 <__libc_init_array+0x40>)
 80076da:	4c0c      	ldr	r4, [pc, #48]	; (800770c <__libc_init_array+0x44>)
 80076dc:	f000 f818 	bl	8007710 <_init>
 80076e0:	1b64      	subs	r4, r4, r5
 80076e2:	10a4      	asrs	r4, r4, #2
 80076e4:	2600      	movs	r6, #0
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f0:	4798      	blx	r3
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fa:	4798      	blx	r3
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	0800a72c 	.word	0x0800a72c
 8007704:	0800a72c 	.word	0x0800a72c
 8007708:	0800a72c 	.word	0x0800a72c
 800770c:	0800a730 	.word	0x0800a730

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
